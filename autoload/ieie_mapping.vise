
;=============================================================================
; FILE: ieie_mapping.vise
; AUTHOR:  aharisu <foo.yobina@gmail.com>
; Last Modified: 15 Feb 2013.
; License: MIT license;{{{
;     Permission is hereby granted, free of charge, to any person obtaining
;     a copy of this software and associated documentation files (the
;     "Software"), to deal in the Software without restriction, including
;     without limitation the rights to use, copy, modify, merge, publish,
;     distribute, sublicense, and/or sell copies of the Software, and to
;     permit persons to whom the Software is furnished to do so, subject to
;     the following conditions:
;
;     The above copyright notice and this permission notice shall be included
;     in all copies or substantial portions of the Software.
;
;     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
;     OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
;     MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
;     IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
;     CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
;     TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
;     SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.;}}}
;=============================================================================

(include "common-macro.vise")

(defun ieie-mapping#initialize ()
  (raw-vimscript "
  nnoremap <buffer><expr> <Plug>(ieie_change_line) <SID>change_line()

  nnoremap <buffer><silent> <Plug>(ieie_execute_line) :<C-u>call <SID>execute_line(0)<CR>
  nnoremap <buffer><silent> <Plug>(ieie_insert_head) :<C-u>call <SID>insert_head()<CR>
  nnoremap <buffer><silent> <Plug>(ieie_append_end) :<C-u>call <SID>append_end()<CR>
  nnoremap <buffer><silent> <Plug>(ieie_insert_enter) :<C-u>call <SID>insert_enter()<CR>
  nnoremap <buffer><silent> <Plug>(ieie_append_enter) :<C-u>call <SID>append_enter()<CR>
  nnoremap <buffer><silent> <Plug>(ieie_line_replace_history_prev) :<C-u>call <SID>line_replace_input_history(1)<CR>
  nnoremap <buffer><silent> <Plug>(ieie_line_replace_history_next) :<C-u>call <SID>line_replace_input_history(0)<CR>

  inoremap <buffer><silent> <Plug>(ieie_execute_line) <ESC>:<C-u>call <SID>execute_line(1)<CR>
  inoremap <buffer><expr> <Plug>(ieie_delete_backword_char) <SID>delete_backword_char()
  inoremap <buffer><expr> <Plug>(ieie_delete_backword_char) <SID>delete_backword_char()
  inoremap <buffer><expr> <Plug>(ieie_delete_backword_line) <SID>delete_backword_line()
  inoremap <buffer><silent> <Plug>(ieie_line_replace_history_prev) <ESC>:<C-u>call <SID>line_replace_input_history(1)<CR>:startinsert!<CR>
  inoremap <buffer><silent> <Plug>(ieie_line_replace_history_next) <ESC>:<C-u>call <SID>line_replace_input_history(0)<CR>:startinsert!<CR>
  ")
  ;;map to key
  (raw-vimscript "
  nmap <buffer> <CR> <Plug>(ieie_execute_line)
  nmap <buffer> cc <Plug>(ieie_change_line)
  nmap <buffer> dd <Plug>(ieie_change_line)<ESC>
  nmap <buffer> I <Plug>(ieie_insert_head)
  nmap <buffer> A <Plug>(ieie_append_end)
  nmap <buffer> i <Plug>(ieie_insert_enter)
  nmap <buffer> a <Plug>(ieie_append_enter)

  nmap <buffer> <C-p> <Plug>(ieie_line_replace_history_prev)
  nmap <buffer> <C-n> <Plug>(ieie_line_replace_history_next)

  imap <buffer> <CR> <Plug>(ieie_execute_line)
  imap <buffer> <BS> <Plug>(ieie_delete_backword_char)
  imap <buffer> <C-h> <Plug>(ieie_delete_backword_char)
  imap <buffer> <C-u> <Plug>(ieie_delete_backword_line)

  imap <buffer><silent> <C-p> <Plug>(ieie_line_replace_history_prev)
  imap <buffer><silent> <C-n> <Plug>(ieie_line_replace_history_next)

  vmap <buffer> <CR> <Plug>(ieie_repl_send_block)
  "))

(defun execute-line (is-insert)
  (let1 bufnum (bufnr "%")
    (ieie#execute (ieie#get-line-text 
                    (ieie#get-context bufnum)
                    (line "."))
                  bufnum is-insert)))

(defun change-line ()
  (let1 ctx (ieie#get-context (bufnr "%"))
    (when (is ctx 0)
      (return "ddO"))
    (let1 prompt (ieie#get-prompt ctx (line "."))
      (if (empty prompt)
        "ddO"
        (printf "0%dlc$" (strchars prompt))))))

(defun delete-backword-char ()
  (let ([ctx (ieie#get-context (bufnr "%"))]
        [prefix (if (not (pumvisible)) "" (key-str "\\<C-y>"))]
        [line-num (line ".")])
    (if (> (len (getline line-num)) (len (ieie#get-prompt ctx line-num)))
      (s+ prefix (key-str "\\<BS>"))
      prefix)))

(defun delete-backword-line ()
  (let* ([prefix (if (not (pumvisible)) "" (key-str "\\<C-y>"))]
         [line-num (line ".")]
         [len (- (strchars (getline line-num))
                 (strchars (ieie#get-prompt (ieie#get-context (bufnr "%")) line-num)))])
    (s+ prefix (repeat (key-str "\\<BS>") len))))

(defun insert-head ()
  (normal! 0)
  (insert-enter))

(defun append-end ()
  (insert-enter)
  (startinsert!))

(defun append-enter ()
  (if (== (+ (col ".") 1) (col "$"))
    (append-end)
    (begin
      (normal! 'l)
      (insert-enter))))

(defun insert-enter ()
  (let* ([ctx (ieie#get-context (bufnr "%"))]
         [line-num (line ".")]
         [prompt (ieie#get-prompt ctx line-num)])
    (when (and (empty prompt) (!= line-num (line "$")))
      (startinsert)
      (return))
    (let1 prompt-len (strchars prompt)
      (when (<= (col ".") prompt-len)
        (if (>= (+ prompt-len 1) (col "$"))
          (begin
            (startinsert!)
            (return))
          (let1 pos (getpos ".")
            (ref-set! pos 2 (+ prompt-len 1))
            (setpos "." pos))))
      (startinsert))))

(defun line-replace-input-history (prev)
  (let* ([ctx (ieie#get-context (bufnr "%"))]
         [lines-len (len (ref ctx 'lines))])
    (when (== lines-len 0)
      (return))
    (let1 index (+ (ref ctx 'input-history-index) (if (== prev 1) 1 -1))
      (cond
        [(== index 0)
         (defvar l:text "")]
        [(> index 0)
         (if (<= index lines-len)
           (defvar l:text (ref ctx 'lines (- index)))
           (begin
             (set! index 0)
             (defvar l:text "")))]
        [else
          (set! index lines-len)
          (defvar l:text (ref ctx 'lines (- index)))])
      (when (exists "text")
        (let1 line-num (line ".")
          (setline line-num (s+ (ieie#get-prompt ctx line-num) l:text)))
        (ref-set! ctx 'input-history-index index)))))


;Util

(defun strchars (str)
  (strlen (substitute (copy str) "." "x" "g")))


; vim: foldmethod=marker commentstring=;%s
