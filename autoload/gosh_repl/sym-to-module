(define-constant %s->m% (make-hash-table 'string=?))
(hash-table-put! %s->m% "LOG_DEBUG" 'gauche.syslog)
(hash-table-put! %s->m% "delete-duplicates" 'srfi-1)
(hash-table-put! %s->m% "chdir" 'compat.stk)
(hash-table-put! %s->m% "job-acknowledge-time" 'control.job)
(hash-table-put! %s->m% "SO_RCVTIMEO" 'gauche.net)
(hash-table-put! %s->m% "html:cite" 'text.html-lite)
(hash-table-put! %s->m% "cgen-emit-h" 'gauche.cgen.unit)
(hash-table-put! %s->m% "match-define" 'util.match)
(hash-table-put! %s->m% "power-set" 'util.combinations)
(hash-table-put! %s->m% "ftype:int32" 'binary.ftype)
(hash-table-put! %s->m% "s16vector-clamp!" 'gauche.uvector)
(hash-table-put! %s->m% "fifth" 'srfi-1)
(hash-table-put! %s->m% "1+" 'slib)
(hash-table-put! %s->m% "char-set:full" 'srfi-14)
(hash-table-put! %s->m% "rfc822-parse-date" 'rfc.822)
(hash-table-put! %s->m% "sparse-vector-update!" 'util.sparse)
(hash-table-put! %s->m% "$sep-end-by" 'parser.peg)
(hash-table-put! %s->m% "move-file" 'file.util)
(hash-table-put! %s->m% "LOG_LOCAL7" 'gauche.syslog)
(hash-table-put! %s->m% "mutex-specific" 'gauche.threads)
(hash-table-put! %s->m% "<instance-pool-mixin>" 'gauche.mop.instance-pool)
(hash-table-put! %s->m% "$->rope" 'parser.peg)
(hash-table-put! %s->m% "u32vector->string" 'gauche.uvector)
(hash-table-put! %s->m% "string-fold-right" 'srfi-13)
(hash-table-put! %s->m% "f16vector-set!" 'gauche.uvector)
(hash-table-put! %s->m% "rxmatch-case" 'gauche.regexp)
(hash-table-put! %s->m% "<s64array>" 'gauche.array)
(hash-table-put! %s->m% "mime-encode-word" 'rfc.mime)
(hash-table-put! %s->m% "every?-ec" 'srfi-42)
(hash-table-put! %s->m% "ftype:schar" 'binary.ftype)
(hash-table-put! %s->m% "sys-stat->ctime" 'gauche.fileutil)
(hash-table-put! %s->m% "sys-localeconv" 'gauche.auxsys)
(hash-table-put! %s->m% "rassv" 'util.list)
(hash-table-put! %s->m% "peg-parse1" 'parser.peg)
(hash-table-put! %s->m% "file-device=?" 'file.util)
(hash-table-put! %s->m% "thread-terminate!" 'gauche.threads)
(hash-table-put! %s->m% "sxml:following-sibling" 'sxml.sxpath)
(hash-table-put! %s->m% "string-count" 'srfi-13)
(hash-table-put! %s->m% "put-u64!" 'binary.io)
(hash-table-put! %s->m% "s16vector-ior" 'gauche.uvector)
(hash-table-put! %s->m% "sys-abort" 'gauche.auxsys)
(hash-table-put! %s->m% "IFF_RUNNING" 'gauche.net)
(hash-table-put! %s->m% "vector->s16vector" 'gauche.uvector)
(hash-table-put! %s->m% "sys-getprotobyname" 'gauche.net)
(hash-table-put! %s->m% "date-second" 'srfi-19)
(hash-table-put! %s->m% "time-counter-get-delta" 'gauche.time)
(hash-table-put! %s->m% "bit-count" 'srfi-60)
(hash-table-put! %s->m% "icmp6-describe-packet" 'rfc.icmp)
(hash-table-put! %s->m% "file-is-writable?" 'compat.stk)
(hash-table-put! %s->m% "sxml:node?" 'sxml.sxpath)
(hash-table-put! %s->m% "char-set-complement!" 'srfi-14)
(hash-table-put! %s->m% "u64vector-swap-bytes" 'gauche.uvector)
(hash-table-put! %s->m% "string-ci<>" 'srfi-13)
(hash-table-put! %s->m% "find-tmodule" 'gauche.cgen.tmodule)
(hash-table-put! %s->m% "socket-recv!" 'gauche.net)
(hash-table-put! %s->m% "time-utc->time-tai!" 'srfi-19)
(hash-table-put! %s->m% "time-nanosecond" 'srfi-19)
(hash-table-put! %s->m% "<json-construct-error>" 'rfc.json)
(hash-table-put! %s->m% "posix-perror" 'compat.stk)
(hash-table-put! %s->m% "ICMP6_UNREACH_BEYONDSCOPE" 'rfc.icmp)
(hash-table-put! %s->m% "<http-error>" 'rfc.http)
(hash-table-put! %s->m% "listener-read-handler" 'gauche.listener)
(hash-table-put! %s->m% "relation-fold" 'util.relation)
(hash-table-put! %s->m% "sxml:squeeze!" 'sxml.tools)
(hash-table-put! %s->m% "count$" 'gauche.procedure)
(hash-table-put! %s->m% "permute-to" 'gauche.sequence)
(hash-table-put! %s->m% "s8vector-add!" 'gauche.uvector)
(hash-table-put! %s->m% "map-union" 'sxml.sxpath)
(hash-table-put! %s->m% "sys-cfgetispeed" 'gauche.termios)
(hash-table-put! %s->m% "string-copy!" 'srfi-13)
(hash-table-put! %s->m% "<sha1>" 'rfc.sha)
(hash-table-put! %s->m% "rbtree-fold" 'util.rbtree)
(hash-table-put! %s->m% "get-f16" 'binary.io)
(hash-table-put! %s->m% "html:optgroup" 'text.html-lite)
(hash-table-put! %s->m% "scheme-file-suffix" 'slib)
(hash-table-put! %s->m% "ec-guarded-do-ec" 'srfi-42)
(hash-table-put! %s->m% "glet*" 'gauche.generator)
(hash-table-put! %s->m% "codepoints->words" 'text.unicode)
(hash-table-put! %s->m% "socket-input-port" 'gauche.net)
(hash-table-put! %s->m% "zstream-dictionary-adler32" 'rfc.zlib)
(hash-table-put! %s->m% "tree-fold" 'util.tree)
(hash-table-put! %s->m% "julian-day->time-tai" 'srfi-19)
(hash-table-put! %s->m% "ntype-names??" 'sxml.sxpath)
(hash-table-put! %s->m% "ICMP4_PARAM_MISSING" 'rfc.icmp)
(hash-table-put! %s->m% "stream-cadar" 'util.stream)
(hash-table-put! %s->m% "relation-rows" 'util.relation)
(hash-table-put! %s->m% "sxml:ns-uri->nodes" 'sxml.tools)
(hash-table-put! %s->m% "array->list" 'gauche.array)
(hash-table-put! %s->m% "AI_NUMERICSERV" 'gauche.net)
(hash-table-put! %s->m% "ftype-getter" 'binary.ftype)
(hash-table-put! %s->m% "unpack" 'binary.pack)
(hash-table-put! %s->m% "u32vector->list" 'gauche.uvector)
(hash-table-put! %s->m% "srl:sxml->xml-noindent" 'sxml.serializer)
(hash-table-put! %s->m% "s16vector-mul" 'gauche.uvector)
(hash-table-put! %s->m% "terminated-thread-exception?" 'gauche.threads)
(hash-table-put! %s->m% "FFDLY" 'gauche.termios)
(hash-table-put! %s->m% "vector-map" 'srfi-43)
(hash-table-put! %s->m% "crc32" 'rfc.zlib)
(hash-table-put! %s->m% "any-in-queue" 'util.queue)
(hash-table-put! %s->m% "<dbi-parameter-error>" 'dbi)
(hash-table-put! %s->m% "ICMP4_HOST_ANO" 'rfc.icmp)
(hash-table-put! %s->m% "SO_PRIORITY" 'gauche.net)
(hash-table-put! %s->m% "job?" 'control.job)
(hash-table-put! %s->m% "cgen-unit-h-file" 'gauche.cgen.unit)
(hash-table-put! %s->m% "sxml:minimized?" 'sxml.tools)
(hash-table-put! %s->m% "share-array" 'gauche.array)
(hash-table-put! %s->m% "record?" 'gauche.record)
(hash-table-put! %s->m% "html:tfoot" 'text.html-lite)
(hash-table-put! %s->m% "u8vector-clamp!" 'gauche.uvector)
(hash-table-put! %s->m% "port->char-generator" 'gauche.generator)
(hash-table-put! %s->m% "<mtqueue>" 'util.queue)
(hash-table-put! %s->m% "stream-append" 'util.stream)
(hash-table-put! %s->m% "http-default-redirect-handler" 'rfc.http)
(hash-table-put! %s->m% "LOG_LOCAL4" 'gauche.syslog)
(hash-table-put! %s->m% "srfi-42-do" 'srfi-42)
(hash-table-put! %s->m% "VDISCARD" 'gauche.termios)
(hash-table-put! %s->m% "string->s32vector" 'gauche.uvector)
(hash-table-put! %s->m% "ICMP4_INFO_REPLY" 'rfc.icmp)
(hash-table-put! %s->m% "stream-tabulate" 'util.stream)
(hash-table-put! %s->m% "char-set-fold" 'srfi-14)
(hash-table-put! %s->m% "<message-digest-algorithm>" 'util.digest)
(hash-table-put! %s->m% "f16vector" 'gauche.uvector)
(hash-table-put! %s->m% "info-parse-menu" 'text.info)
(hash-table-put! %s->m% "s8vector-ref" 'gauche.uvector)
(hash-table-put! %s->m% "sys-gethostname" 'gauche.auxsys)
(hash-table-put! %s->m% "thread-yield!" 'gauche.threads)
(hash-table-put! %s->m% "ftp-site" 'rfc.ftp)
(hash-table-put! %s->m% "find-min&max" 'gauche.collection)
(hash-table-put! %s->m% "sxml:ancestor-or-self" 'sxml.sxpath)
(hash-table-put! %s->m% "append-ec" 'srfi-42)
(hash-table-put! %s->m% "cgen-return-stmt" 'gauche.cgen.type)
(hash-table-put! %s->m% "u8vector-xor!" 'gauche.uvector)
(hash-table-put! %s->m% "IFF_BROADCAST" 'gauche.net)
(hash-table-put! %s->m% "sys-ctermid" 'gauche.auxsys)
(hash-table-put! %s->m% "list->s16vector" 'gauche.uvector)
(hash-table-put! %s->m% "stream-cddadr" 'util.stream)
(hash-table-put! %s->m% "O_TRUNC" 'gauche.fcntl)
(hash-table-put! %s->m% "module-environment" 'compat.stk)
(hash-table-put! %s->m% "read-from-string-with-serializer" 'gauche.serializer)
(hash-table-put! %s->m% "u32vector-swap-bytes!" 'gauche.uvector)
(hash-table-put! %s->m% "srfi-42-" 'srfi-42)
(hash-table-put! %s->m% "sxml:number" 'sxml.sxpath)
(hash-table-put! %s->m% "with-output-conversion" 'gauche.charconv)
(hash-table-put! %s->m% "lset-difference" 'srfi-1)
(hash-table-put! %s->m% "attlist-add" 'sxml.ssax)
(hash-table-put! %s->m% "cgen-emit-body" 'gauche.cgen.unit)
(hash-table-put! %s->m% "current-tmodule" 'gauche.cgen.tmodule)
(hash-table-put! %s->m% "get-environment-variable" 'srfi-98)
(hash-table-put! %s->m% "srfi-42-parallel-1" 'srfi-42)
(hash-table-put! %s->m% "try-load" 'compat.stk)
(hash-table-put! %s->m% "do-ec:do" 'srfi-42)
(hash-table-put! %s->m% "process-output" 'gauche.process)
(hash-table-put! %s->m% "reduce$" 'gauche.procedure)
(hash-table-put! %s->m% "f64vector->vector" 'gauche.uvector)
(hash-table-put! %s->m% "node-equal?" 'sxml.sxpath)
(hash-table-put! %s->m% "sys-tcflow" 'gauche.termios)
(hash-table-put! %s->m% "partition" 'gauche.collection)
(hash-table-put! %s->m% "assoc-set!" 'util.list)
(hash-table-put! %s->m% "pi/2" 'math.const)
(hash-table-put! %s->m% "stream-cdar" 'util.stream)
(hash-table-put! %s->m% "read-binary-sint" 'binary.io)
(hash-table-put! %s->m% "ftype-alignment" 'binary.ftype)
(hash-table-put! %s->m% "make-hook" 'gauche.hook)
(hash-table-put! %s->m% "AI_PASSIVE" 'gauche.net)
(hash-table-put! %s->m% "uri-encode-string" 'rfc.uri)
(hash-table-put! %s->m% "append-reverse!" 'srfi-1)
(hash-table-put! %s->m% "u32vector-set!" 'gauche.uvector)
(hash-table-put! %s->m% "ftp-mdtm" 'rfc.ftp)
(hash-table-put! %s->m% "s8vector-mul!" 'gauche.uvector)
(hash-table-put! %s->m% "VTDLY" 'gauche.termios)
(hash-table-put! %s->m% "$y" 'parser.peg)
(hash-table-put! %s->m% "write-u8" 'binary.io)
(hash-table-put! %s->m% "html:frameset" 'text.html-lite)
(hash-table-put! %s->m% "port->list" 'gauche.portutil)
(hash-table-put! %s->m% "with-lock-file" 'file.util)
(hash-table-put! %s->m% "scheme-implementation-home-page" 'slib)
(hash-table-put! %s->m% "filter!" 'srfi-1)
(hash-table-put! %s->m% "SO_OOBINLINE" 'gauche.net)
(hash-table-put! %s->m% "string-delete" 'srfi-13)
(hash-table-put! %s->m% "<cgen-unit>" 'gauche.cgen.unit)
(hash-table-put! %s->m% "array-start" 'gauche.array)
(hash-table-put! %s->m% "mime-compose-message" 'rfc.mime)
(hash-table-put! %s->m% "put-s32be!" 'binary.io)
(hash-table-put! %s->m% "TCOON" 'gauche.termios)
(hash-table-put! %s->m% "permutations" 'util.combinations)
(hash-table-put! %s->m% "s8vector-clamp!" 'gauche.uvector)
(hash-table-put! %s->m% "ftype:ulong" 'binary.ftype)
(hash-table-put! %s->m% "parameter-pre-observers" 'gauche.parameter)
(hash-table-put! %s->m% "store-bundle!" 'srfi-29.bundle)
(hash-table-put! %s->m% "lrxmatch" 'gauche.lazy)
(hash-table-put! %s->m% "sparse-vector-num-entries" 'util.sparse)
(hash-table-put! %s->m% "file->sexp-generator" 'gauche.generator)
(hash-table-put! %s->m% "$fold-parsers-right" 'parser.peg)
(hash-table-put! %s->m% "read-s16" 'binary.io)
(hash-table-put! %s->m% "<f16vector>" 'gauche.uvector)
(hash-table-put! %s->m% "file-atime>=?" 'file.util)
(hash-table-put! %s->m% "LOG_LOCAL1" 'gauche.syslog)
(hash-table-put! %s->m% "string-reverse!" 'srfi-13)
(hash-table-put! %s->m% "string->u8vector!" 'gauche.uvector)
(hash-table-put! %s->m% "<array-meta>" 'gauche.array)
(hash-table-put! %s->m% "vector->u64vector" 'gauche.uvector)
(hash-table-put! %s->m% "lappend" 'gauche.lazy)
(hash-table-put! %s->m% "inet-string->address" 'gauche.net)
(hash-table-put! %s->m% "current-date" 'srfi-19)
(hash-table-put! %s->m% "posix-host-name" 'compat.stk)
(hash-table-put! %s->m% "stream-tenth" 'util.stream)
(hash-table-put! %s->m% "file-uid" 'file.util)
(hash-table-put! %s->m% "cise-context" 'gauche.cgen.cise)
(hash-table-put! %s->m% "string-suffix-length-ci" 'srfi-13)
(hash-table-put! %s->m% "u8vector-ior" 'gauche.uvector)
(hash-table-put! %s->m% "SIOCDELMULTI" 'gauche.net)
(hash-table-put! %s->m% "cgi-main" 'www.cgi)
(hash-table-put! %s->m% "s16vector-copy" 'gauche.uvector)
(hash-table-put! %s->m% "sockaddr-port" 'gauche.net)
(hash-table-put! %s->m% "<date>" 'srfi-19)
(hash-table-put! %s->m% "stream-delete-duplicates" 'util.stream)
(hash-table-put! %s->m% "option-optional-arg?" 'srfi-37)
(hash-table-put! %s->m% "time-difference" 'srfi-19)
(hash-table-put! %s->m% "<user-time-counter>" 'gauche.time)
(hash-table-put! %s->m% "macro?" 'compat.stk)
(hash-table-put! %s->m% "posix-rename" 'compat.stk)
(hash-table-put! %s->m% "http-oport-receiver" 'rfc.http)
(hash-table-put! %s->m% "icmp-fill-header!" 'rfc.icmp)
(hash-table-put! %s->m% "decompose-path" 'file.util)
(hash-table-put! %s->m% "make-random-source" 'srfi-27)
(hash-table-put! %s->m% "sxml:attr->html" 'sxml.tools)
(hash-table-put! %s->m% "car-sxpath" 'sxml.sxpath)
(hash-table-put! %s->m% "s32vector-swap-bytes" 'gauche.uvector)
(hash-table-put! %s->m% "string-compare" 'srfi-13)
(hash-table-put! %s->m% "rbtree-get" 'util.rbtree)
(hash-table-put! %s->m% "sha384-digest" 'rfc.sha)
(hash-table-put! %s->m% "textdomain" 'text.gettext)
(hash-table-put! %s->m% "socket-getsockopt" 'gauche.net)
(hash-table-put! %s->m% "Z_RLE" 'rfc.zlib)
(hash-table-put! %s->m% "time-monotonic->time-tai!" 'srfi-19)
(hash-table-put! %s->m% "trie?" 'util.trie)
(hash-table-put! %s->m% "ip-version" 'rfc.ip)
(hash-table-put! %s->m% "time-tai" 'srfi-19)
(hash-table-put! %s->m% "html:pre" 'text.html-lite)
(hash-table-put! %s->m% "ICMP6_DEST_UNREACH" 'rfc.icmp)
(hash-table-put! %s->m% "sxml:change-name" 'sxml.tools)
(hash-table-put! %s->m% "partition$" 'gauche.procedure)
(hash-table-put! %s->m% "f64vector->list" 'gauche.uvector)
(hash-table-put! %s->m% "modifier" 'gauche.sequence)
(hash-table-put! %s->m% "sys-tcsendbreak" 'gauche.termios)
(hash-table-put! %s->m% "slib:report-locations" 'slib)
(hash-table-put! %s->m% "vector-every" 'srfi-43)
(hash-table-put! %s->m% "ucs4->utf8" 'text.unicode)
(hash-table-put! %s->m% "AF_INET" 'gauche.net)
(hash-table-put! %s->m% "<zlib-version-error>" 'rfc.zlib)
(hash-table-put! %s->m% "describe-fstruct-type" 'binary.ftype)
(hash-table-put! %s->m% "ec-:vector-filter" 'srfi-42)
(hash-table-put! %s->m% "stream=" 'util.stream)
(hash-table-put! %s->m% "ICMP4_REDIR_HOSTTOS" 'rfc.icmp)
(hash-table-put! %s->m% "sxml:aux-list-u" 'sxml.tools)
(hash-table-put! %s->m% "array-for-each-index-by-dimension" 'gauche.array)
(hash-table-put! %s->m% "<virtual-input-port>" 'gauche.vport)
(hash-table-put! %s->m% "u64vector-and!" 'gauche.uvector)
(hash-table-put! %s->m% "IPV6_JOIN_GROUP" 'gauche.net)
(hash-table-put! %s->m% "rtd-predicate" 'gauche.record)
(hash-table-put! %s->m% "record-accessor" 'util.record)
(hash-table-put! %s->m% "ftp-login" 'rfc.ftp)
(hash-table-put! %s->m% "f64vector-sub" 'gauche.uvector)
(hash-table-put! %s->m% "u32vector" 'gauche.uvector)
(hash-table-put! %s->m% "cgen-literal" 'gauche.cgen.literal)
(hash-table-put! %s->m% "sparse-vector-map" 'util.sparse)
(hash-table-put! %s->m% "BSDLY" 'gauche.termios)
(hash-table-put! %s->m% "vector-unfold" 'srfi-43)
(hash-table-put! %s->m% "copy-port" 'gauche.portutil)
(hash-table-put! %s->m% "queue-push-unique!" 'util.queue)
(hash-table-put! %s->m% "SO_ERROR" 'gauche.net)
(hash-table-put! %s->m% "ICMP4_HOST_UNREACH" 'rfc.icmp)
(hash-table-put! %s->m% "sxml:attr-as-list" 'sxml.tools)
(hash-table-put! %s->m% "make-array" 'gauche.array)
(hash-table-put! %s->m% "f64vector-dot" 'gauche.uvector)
(hash-table-put! %s->m% "TCOFLUSH" 'gauche.termios)
(hash-table-put! %s->m% "dbi-execute-using-connection" 'dbi)
(hash-table-put! %s->m% "getenv" 'compat.stk)
(hash-table-put! %s->m% "lcs-fold" 'util.lcs)
(hash-table-put! %s->m% "last-ec" 'srfi-42)
(hash-table-put! %s->m% "read-u32" 'binary.io)
(hash-table-put! %s->m% "delete-directory*" 'file.util)
(hash-table-put! %s->m% "http-blob-sender" 'rfc.http)
(hash-table-put! %s->m% "<s64vector-meta>" 'gauche.uvector)
(hash-table-put! %s->m% "LOG_FTP" 'gauche.syslog)
(hash-table-put! %s->m% "mt-random-real" 'math.mt-random)
(hash-table-put! %s->m% "s32vector-sub" 'gauche.uvector)
(hash-table-put! %s->m% "string->s8vector" 'gauche.uvector)
(hash-table-put! %s->m% "ICMP4_REDIRECT" 'rfc.icmp)
(hash-table-put! %s->m% "list->u64vector" 'gauche.uvector)
(hash-table-put! %s->m% "sys-fdset" 'gauche.auxsys)
(hash-table-put! %s->m% "test-error" 'gauche.test)
(hash-table-put! %s->m% "sparse-table-update!" 'util.sparse)
(hash-table-put! %s->m% "thread?" 'gauche.threads)
(hash-table-put! %s->m% "with-builder" 'gauche.collection)
(hash-table-put! %s->m% "s8vector-xor!" 'gauche.uvector)
(hash-table-put! %s->m% "<cgen-type>" 'gauche.cgen.type)
(hash-table-put! %s->m% "SIOCGIFMAP" 'gauche.net)
(hash-table-put! %s->m% "s16vector-length" 'gauche.uvector)
(hash-table-put! %s->m% "trie->hash-table" 'util.trie)
(hash-table-put! %s->m% "quoted-printable-decode" 'rfc.quoted-printable)
(hash-table-put! %s->m% "sys-getlogin" 'gauche.auxsys)
(hash-table-put! %s->m% "stream-cons" 'util.stream)
(hash-table-put! %s->m% "html:head" 'text.html-lite)
(hash-table-put! %s->m% "stream-cadaar" 'util.stream)
(hash-table-put! %s->m% "open-input-process-port" 'gauche.process)
(hash-table-put! %s->m% "environment?" 'compat.stk)
(hash-table-put! %s->m% "s16vector-swap-bytes!" 'gauche.uvector)
(hash-table-put! %s->m% "break!" 'srfi-1)
(hash-table-put! %s->m% "ces-equivalent?" 'gauche.charconv)
(hash-table-put! %s->m% "IGNBRK" 'gauche.termios)
(hash-table-put! %s->m% "array-concatenate" 'gauche.array)
(hash-table-put! %s->m% "job-touch!" 'control.job)
(hash-table-put! %s->m% "stream-cdddr" 'util.stream)
(hash-table-put! %s->m% "string-lower" 'compat.stk)
(hash-table-put! %s->m% "find-tail$" 'gauche.procedure)
(hash-table-put! %s->m% "f64vector-set!" 'gauche.uvector)
(hash-table-put! %s->m% "B38400" 'gauche.termios)
(hash-table-put! %s->m% "unfold-right" 'srfi-1)
(hash-table-put! %s->m% "get-u16" 'binary.io)
(hash-table-put! %s->m% "letter" 'parser.peg)
(hash-table-put! %s->m% "getpid" 'compat.stk)
(hash-table-put! %s->m% "html:abbr" 'text.html-lite)
(hash-table-put! %s->m% "cgi-test-environment-ref" 'www.cgi.test)
(hash-table-put! %s->m% "cgen-emit-c" 'gauche.cgen.unit)
(hash-table-put! %s->m% "s64vector-xor" 'gauche.uvector)
(hash-table-put! %s->m% "match:$-ref" 'util.match)
(hash-table-put! %s->m% "power-set-for-each" 'util.combinations)
(hash-table-put! %s->m% "ftype:uint32" 'binary.ftype)
(hash-table-put! %s->m% "IPV6_MULTICAST_IF" 'gauche.net)
(hash-table-put! %s->m% "<cgen-stub-unit>" 'gauche.cgen.stub)
(hash-table-put! %s->m% "uri-scheme&specific" 'rfc.uri)
(hash-table-put! %s->m% "vector->s32vector" 'gauche.uvector)
(hash-table-put! %s->m% "sixth" 'srfi-1)
(hash-table-put! %s->m% "write-u16" 'binary.io)
(hash-table-put! %s->m% "f16vector-sub!" 'gauche.uvector)
(hash-table-put! %s->m% "generator->list" 'gauche.generator)
(hash-table-put! %s->m% "sparse-vector-inc!" 'util.sparse)
(hash-table-put! %s->m% "$count" 'parser.peg)
(hash-table-put! %s->m% "CR1" 'gauche.termios)
(hash-table-put! %s->m% "port-for-each" 'gauche.portutil)
(hash-table-put! %s->m% "catalog:get" 'slib)
(hash-table-put! %s->m% "string->char-set!" 'srfi-14)
(hash-table-put! %s->m% "remove-files" 'file.util)
(hash-table-put! %s->m% "open-file" 'compat.stk)
(hash-table-put! %s->m% "rope->string" 'parser.peg)
(hash-table-put! %s->m% "tls-read" 'rfc.tls)
(hash-table-put! %s->m% "SO_BROADCAST" 'gauche.net)
(hash-table-put! %s->m% "string-unfold" 'srfi-13)
(hash-table-put! %s->m% "mime-encode-text" 'rfc.mime)
(hash-table-put! %s->m% "<f16array>" 'gauche.array)
(hash-table-put! %s->m% "u64vector-dot" 'gauche.uvector)
(hash-table-put! %s->m% "ftype:uchar" 'binary.ftype)
(hash-table-put! %s->m% "tls-write" 'rfc.tls)
(hash-table-put! %s->m% "bimap-right-get" 'gauche.dictionary)
(hash-table-put! %s->m% "char-set:upper-case" 'srfi-14)
(hash-table-put! %s->m% "<sparse-s64vector>" 'util.sparse)
(hash-table-put! %s->m% "peg-parser->generator" 'parser.peg)
(hash-table-put! %s->m% "file-mtime=?" 'file.util)
(hash-table-put! %s->m% "<u32vector>" 'gauche.uvector)
(hash-table-put! %s->m% "LOG_AUTHPRIV" 'gauche.syslog)
(hash-table-put! %s->m% "map" 'gauche.collection)
(hash-table-put! %s->m% "s16vector-sub!" 'gauche.uvector)
(hash-table-put! %s->m% "read-block!" 'gauche.uvector)
(hash-table-put! %s->m% "srfi-42-char-range" 'srfi-42)
(hash-table-put! %s->m% "string-contains" 'srfi-13)
(hash-table-put! %s->m% "VINTR" 'gauche.termios)
(hash-table-put! %s->m% "put-s8!" 'binary.io)
(hash-table-put! %s->m% "u64vector-copy" 'gauche.uvector)
(hash-table-put! %s->m% "dict-exists?" 'gauche.dictionary)
(hash-table-put! %s->m% "char-set-difference" 'srfi-14)
(hash-table-put! %s->m% "sys-getprotobynumber" 'gauche.net)
(hash-table-put! %s->m% "date-minute" 'srfi-19)
(hash-table-put! %s->m% "log2-binary-factors" 'srfi-60)
(hash-table-put! %s->m% "assoc" 'srfi-1)
(hash-table-put! %s->m% "shell-escape-string" 'gauche.process)
(hash-table-put! %s->m% "file-is-executable?" 'compat.stk)
(hash-table-put! %s->m% "sxml:id" 'sxml.sxpath)
(hash-table-put! %s->m% "string-ci<" 'srfi-13)
(hash-table-put! %s->m% "PENDIN" 'gauche.termios)
(hash-table-put! %s->m% "s8vector-ior" 'gauche.uvector)
(hash-table-put! %s->m% "select-tmodule" 'gauche.cgen.tmodule)
(hash-table-put! %s->m% "SIOCGIFHWADDR" 'gauche.net)
(hash-table-put! %s->m% "s16vector?" 'gauche.uvector)
(hash-table-put! %s->m% "socket-recvfrom" 'gauche.net)
(hash-table-put! %s->m% "time-tai->date" 'srfi-19)
(hash-table-put! %s->m% "stream-every" 'util.stream)
(hash-table-put! %s->m% "set-time-type!" 'srfi-19)
(hash-table-put! %s->m% "parse-json" 'rfc.json)
(hash-table-put! %s->m% "time-this" 'gauche.time)
(hash-table-put! %s->m% "posix-stat" 'compat.stk)
(hash-table-put! %s->m% "html:q" 'text.html-lite)
(hash-table-put! %s->m% "ICMP6_UNREACH_ADDR" 'rfc.icmp)
(hash-table-put! %s->m% "http-user-agent" 'rfc.http)
(hash-table-put! %s->m% "terminate-all!" 'control.thread-pool)
(hash-table-put! %s->m% "<simple-relation>" 'util.relation)
(hash-table-put! %s->m% "sxml:squeeze" 'sxml.tools)
(hash-table-put! %s->m% "permute" 'gauche.sequence)
(hash-table-put! %s->m% "f64vector-clamp" 'gauche.uvector)
(hash-table-put! %s->m% "node-reverse" 'sxml.sxpath)
(hash-table-put! %s->m% "string-take" 'srfi-13)
(hash-table-put! %s->m% "sha1-digest" 'rfc.sha)
(hash-table-put! %s->m% "rbtree-fold-right" 'util.rbtree)
(hash-table-put! %s->m% "html:option" 'text.html-lite)
(hash-table-put! %s->m% "get-f32" 'binary.io)
(hash-table-put! %s->m% "glet1" 'gauche.generator)
(hash-table-put! %s->m% "base64-decode-string" 'rfc.base64)
(hash-table-put! %s->m% "byte-ref" 'slib)
(hash-table-put! %s->m% "socket-output-port" 'gauche.net)
(hash-table-put! %s->m% "make-grapheme-cluster-breaker" 'text.unicode)
(hash-table-put! %s->m% "gzip-encode-string" 'rfc.zlib)
(hash-table-put! %s->m% "read-binary-double" 'binary.io)
(hash-table-put! %s->m% "julian-day->time-utc" 'srfi-19)
(hash-table-put! %s->m% "ntype??" 'sxml.sxpath)
(hash-table-put! %s->m% "any" 'srfi-1)
(hash-table-put! %s->m% "ICMP4_PARAM_BADLENGTH" 'rfc.icmp)
(hash-table-put! %s->m% "stream-caddr" 'util.stream)
(hash-table-put! %s->m% "copy-tree" 'compat.stk)
(hash-table-put! %s->m% "relation-accessor" 'util.relation)
(hash-table-put! %s->m% "sxml:ns-uri->id" 'sxml.tools)
(hash-table-put! %s->m% "delete$" 'gauche.procedure)
(hash-table-put! %s->m% "make-u8array" 'gauche.array)
(hash-table-put! %s->m% "f64vector" 'gauche.uvector)
(hash-table-put! %s->m% "B9600" 'gauche.termios)
(hash-table-put! %s->m% "program-vicinity" 'slib)
(hash-table-put! %s->m% "unpack-skip" 'binary.pack)
(hash-table-put! %s->m% "srl:sxml->html" 'sxml.serializer)
(hash-table-put! %s->m% "uncaught-exception?" 'gauche.threads)
(hash-table-put! %s->m% "program" 'srfi-7)
(hash-table-put! %s->m% "vector-map!" 'srfi-43)
(hash-table-put! %s->m% "open-deflating-port" 'rfc.zlib)
(hash-table-put! %s->m% "every-in-queue" 'util.queue)
(hash-table-put! %s->m% "scheme-implementation-version" 'slib)
(hash-table-put! %s->m% "LOG_WARNING" 'gauche.syslog)
(hash-table-put! %s->m% "hash-table->alist" 'util.list)
(hash-table-put! %s->m% "<dbi-driver>" 'dbi)
(hash-table-put! %s->m% "ICMP4_NET_UNR_TOS" 'rfc.icmp)
(hash-table-put! %s->m% "job-status" 'control.job)
(hash-table-put! %s->m% "list->stream" 'util.stream)
(hash-table-put! %s->m% "sxml:name" 'sxml.tools)
(hash-table-put! %s->m% "subarray" 'gauche.array)
(hash-table-put! %s->m% "record-rtd" 'gauche.record)
(hash-table-put! %s->m% "s64vector-and!" 'gauche.uvector)
(hash-table-put! %s->m% "html:tbody" 'text.html-lite)
(hash-table-put! %s->m% "PF_INET6" 'gauche.net)
(hash-table-put! %s->m% "list->s32vector" 'gauche.uvector)
(hash-table-put! %s->m% "u64vector-sub" 'gauche.uvector)
(hash-table-put! %s->m% "require" 'slib)
(hash-table-put! %s->m% "port->byte-generator" 'gauche.generator)
(hash-table-put! %s->m% "NL1" 'gauche.termios)
(hash-table-put! %s->m% "string-split" 'gauche.stringutil)
(hash-table-put! %s->m% "port-tell" 'gauche.portutil)
(hash-table-put! %s->m% "make-mtqueue" 'util.queue)
(hash-table-put! %s->m% "http-secure-connection-available?" 'rfc.http)
(hash-table-put! %s->m% "stream-concatenate" 'util.stream)
(hash-table-put! %s->m% "ftype:slot-position" 'binary.ftype)
(hash-table-put! %s->m% "mutex-name" 'gauche.threads)
(hash-table-put! %s->m% "ICMP4_ADDRESS" 'rfc.icmp)
(hash-table-put! %s->m% "F_GETLK" 'gauche.fcntl)
(hash-table-put! %s->m% "stream-iota" 'util.stream)
(hash-table-put! %s->m% "SOL_SOCKET" 'gauche.net)
(hash-table-put! %s->m% "s32vector-dot" 'gauche.uvector)
(hash-table-put! %s->m% "current-directory" 'file.util)
(hash-table-put! %s->m% "<u16vector-meta>" 'gauche.uvector)
(hash-table-put! %s->m% "u8vector-sub" 'gauche.uvector)
(hash-table-put! %s->m% "filter-to" 'gauche.collection)
(hash-table-put! %s->m% "sxml:descendant" 'sxml.sxpath)
(hash-table-put! %s->m% "ftp-stat" 'rfc.ftp)
(hash-table-put! %s->m% "define-cise-macro" 'gauche.cgen.cise)
(hash-table-put! %s->m% "<sys-flock>" 'gauche.fcntl)
(hash-table-put! %s->m% "uvector-swap-bytes" 'gauche.uvector)
(hash-table-put! %s->m% "u64vector-length" 'gauche.uvector)
(hash-table-put! %s->m% "char-set-union!" 'srfi-14)
(hash-table-put! %s->m% "reload-verbose" 'gauche.reload)
(hash-table-put! %s->m% "array-sub-elements!" 'gauche.array)
(hash-table-put! %s->m% "<sparse-table>" 'util.sparse)
(hash-table-put! %s->m% "ssax:read-QName" 'sxml.ssax)
(hash-table-put! %s->m% "stream-cdddar" 'util.stream)
(hash-table-put! %s->m% "module-symbols" 'compat.stk)
(hash-table-put! %s->m% "read-from-file-with-serializer" 'gauche.serializer)
(hash-table-put! %s->m% "ECHOCTL" 'gauche.termios)
(hash-table-put! %s->m% "lset-difference!" 'srfi-1)
(hash-table-put! %s->m% "get-s32be" 'binary.io)
(hash-table-put! %s->m% "f64vector-div!" 'gauche.uvector)
(hash-table-put! %s->m% "tmodule-cname" 'gauche.cgen.tmodule)
(hash-table-put! %s->m% "SIOCSIFMETRIC" 'gauche.net)
(hash-table-put! %s->m% "debug-print-pre" 'gauche.vm.debugger)
(hash-table-put! %s->m% "u8vector-fill!" 'gauche.uvector)
(hash-table-put! %s->m% "get-environment-variables" 'srfi-98)
(hash-table-put! %s->m% "ip-destination-address" 'rfc.ip)
(hash-table-put! %s->m% "identity-array" 'gauche.array)
(hash-table-put! %s->m% "assq-values" 'sxml.ssax)
(hash-table-put! %s->m% "autoload?" 'compat.stk)
(hash-table-put! %s->m% "F_SETOWN" 'gauche.fcntl)
(hash-table-put! %s->m% "process-error" 'gauche.process)
(hash-table-put! %s->m% "<dbm>" 'dbm)
(hash-table-put! %s->m% "sub-vicinity" 'slib)
(hash-table-put! %s->m% "sys-times" 'gauche.auxsys)
(hash-table-put! %s->m% "node-pos" 'sxml.sxpath)
(hash-table-put! %s->m% "f32vector-clamp" 'gauche.uvector)
(hash-table-put! %s->m% "remove" 'gauche.collection)
(hash-table-put! %s->m% "tree-map-min" 'gauche.treeutil)
(hash-table-put! %s->m% "srfi-42-while-1" 'srfi-42)
(hash-table-put! %s->m% "pi/4" 'math.const)
(hash-table-put! %s->m% "fold-right" 'gauche.sequence)
(hash-table-put! %s->m% "stream-cddr" 'util.stream)
(hash-table-put! %s->m% "any-pred" 'gauche.procedure)
(hash-table-put! %s->m% "read-binary-sint8" 'binary.io)
(hash-table-put! %s->m% "vector->f32vector" 'gauche.uvector)
(hash-table-put! %s->m% "B1800" 'gauche.termios)
(hash-table-put! %s->m% "hook?" 'gauche.hook)
(hash-table-put! %s->m% "hash-table" 'gauche.hashutil)
(hash-table-put! %s->m% "zip" 'srfi-1)
(hash-table-put! %s->m% "write-f16" 'binary.io)
(hash-table-put! %s->m% "$string" 'parser.peg)
(hash-table-put! %s->m% "html:frame" 'text.html-lite)
(hash-table-put! %s->m% "LOG_ALERT" 'gauche.syslog)
(hash-table-put! %s->m% "parse-options" 'gauche.parseopt)
(hash-table-put! %s->m% "alist->hash-table" 'util.list)
(hash-table-put! %s->m% "condition-variable-specific" 'gauche.threads)
(hash-table-put! %s->m% "ssax:make-elem-parser" 'sxml.ssax)
(hash-table-put! %s->m% "string-parse-start+end" 'srfi-13)
(hash-table-put! %s->m% "cgen-current-unit" 'gauche.cgen.unit)
(hash-table-put! %s->m% "array-end" 'gauche.array)
(hash-table-put! %s->m% "mime-compose-message-string" 'rfc.mime)
(hash-table-put! %s->m% "put-s32le!" 'binary.io)
(hash-table-put! %s->m% "u32vector-xor" 'gauche.uvector)
(hash-table-put! %s->m% "sys-getaddrinfo" 'gauche.net)
(hash-table-put! %s->m% "permutations*" 'util.combinations)
(hash-table-put! %s->m% "ftype:longlong" 'binary.ftype)
(hash-table-put! %s->m% "parameter-post-observers" 'gauche.parameter)
(hash-table-put! %s->m% "s32vector-copy" 'gauche.uvector)
(hash-table-put! %s->m% "ftp-current-directory" 'rfc.ftp)
(hash-table-put! %s->m% "declare-bundle!" 'srfi-29.bundle)
(hash-table-put! %s->m% "u32vector-sub!" 'gauche.uvector)
(hash-table-put! %s->m% "file->char-generator" 'gauche.generator)
(hash-table-put! %s->m% "OFDEL" 'gauche.termios)
(hash-table-put! %s->m% "$many" 'parser.peg)
(hash-table-put! %s->m% "file-ctime=?" 'file.util)
(hash-table-put! %s->m% "SOMAXCONN" 'gauche.net)
(hash-table-put! %s->m% "string-concatenate" 'srfi-13)
(hash-table-put! %s->m% "srfi-42-dispatched" 'srfi-42)
(hash-table-put! %s->m% "VSUSP" 'gauche.termios)
(hash-table-put! %s->m% "make-tls" 'rfc.tls)
(hash-table-put! %s->m% "char-set-ref" 'srfi-14)
(hash-table-put! %s->m% "<array>" 'gauche.array)
(hash-table-put! %s->m% "u8vector-dot" 'gauche.uvector)
(hash-table-put! %s->m% "inet-string->address!" 'gauche.net)
(hash-table-put! %s->m% "lfilter" 'gauche.lazy)
(hash-table-put! %s->m% "<sparse-vector>" 'util.sparse)
(hash-table-put! %s->m% "current-julian-day" 'srfi-19)
(hash-table-put! %s->m% "posix-domain-name" 'compat.stk)
(hash-table-put! %s->m% "<s16vector>" 'gauche.uvector)
(hash-table-put! %s->m% "assert" 'sxml.adaptor)
(hash-table-put! %s->m% "file-gid" 'file.util)
(hash-table-put! %s->m% "stream-take-safe" 'util.stream)
(hash-table-put! %s->m% "f64vector-add!" 'gauche.uvector)
(hash-table-put! %s->m% "serializer?" 'gauche.serializer)
(hash-table-put! %s->m% "cise-context-copy" 'gauche.cgen.cise)
(hash-table-put! %s->m% "string-prefix?" 'srfi-13)
(hash-table-put! %s->m% "&i/o-write-error" 'gauche.condutil)
(hash-table-put! %s->m% "u64vector?" 'gauche.uvector)
(hash-table-put! %s->m% "<cgi-error>" 'www.cgi)
(hash-table-put! %s->m% "make-client-socket" 'gauche.net)
(hash-table-put! %s->m% "char-set-delete" 'srfi-14)
(hash-table-put! %s->m% "option-processor" 'srfi-37)
(hash-table-put! %s->m% "stream-grep" 'util.stream)
(hash-table-put! %s->m% "time-difference!" 'srfi-19)
(hash-table-put! %s->m% "<system-time-counter>" 'gauche.time)
(hash-table-put! %s->m% "http-file-receiver" 'rfc.http)
(hash-table-put! %s->m% "icmp4-fill-checksum!" 'rfc.icmp)
(hash-table-put! %s->m% "absolute-path?" 'file.util)
(hash-table-put! %s->m% "random-source?" 'srfi-27)
(hash-table-put! %s->m% "sxml:string->html" 'sxml.tools)
(hash-table-put! %s->m% "sxml:id-alist" 'sxml.sxpath)
(hash-table-put! %s->m% "string-rindex" 'sxml.adaptor)
(hash-table-put! %s->m% "TOSTOP" 'gauche.termios)
(hash-table-put! %s->m% "string-compare-ci" 'srfi-13)
(hash-table-put! %s->m% "rbtree-put!" 'util.rbtree)
(hash-table-put! %s->m% "sha384-digest-string" 'rfc.sha)
(hash-table-put! %s->m% "f32vector-div" 'gauche.uvector)
(hash-table-put! %s->m% "dgettext" 'text.gettext)
(hash-table-put! %s->m% "SIOCGIFFLAGS" 'gauche.net)
(hash-table-put! %s->m% "u8vector-copy!" 'gauche.uvector)
(hash-table-put! %s->m% "socket-getsockname" 'gauche.net)
(hash-table-put! %s->m% "Z_DEFAULT_STRATEGY" 'rfc.zlib)
(hash-table-put! %s->m% "write-binary-uint64" 'binary.io)
(hash-table-put! %s->m% "time-monotonic->time-utc" 'srfi-19)
(hash-table-put! %s->m% "trie-num-entries" 'util.trie)
(hash-table-put! %s->m% "time-monotonic" 'srfi-19)
(hash-table-put! %s->m% "sys-setgid" 'gauche.auxsys)
(hash-table-put! %s->m% "ICMP6_PACKET_TOO_BIG" 'rfc.icmp)
(hash-table-put! %s->m% "sxml:add-attr" 'sxml.tools)
(hash-table-put! %s->m% "subseq" 'gauche.sequence)
(hash-table-put! %s->m% "f16vector-clamp" 'gauche.uvector)
(hash-table-put! %s->m% "tree-map-pop-max!" 'gauche.treeutil)
(hash-table-put! %s->m% "vector-copy!" 'srfi-43)
(hash-table-put! %s->m% "SOCK_STREAM" 'gauche.net)
(hash-table-put! %s->m% "char-set->list" 'srfi-14)
(hash-table-put! %s->m% "utf8-length" 'text.unicode)
(hash-table-put! %s->m% "<deflating-port>" 'rfc.zlib)
(hash-table-put! %s->m% "dequeue!" 'util.queue)
(hash-table-put! %s->m% "instance-pool:compute-pools" 'gauche.mop.instance-pool)
(hash-table-put! %s->m% "icmp4-router-code->string" 'rfc.icmp)
(hash-table-put! %s->m% "job-finish-time" 'control.job)
(hash-table-put! %s->m% "cgen-emit" 'gauche.cgen.unit)
(hash-table-put! %s->m% "<virtual-output-port>" 'gauche.vport)
(hash-table-put! %s->m% "list->f32vector" 'gauche.uvector)
(hash-table-put! %s->m% "sxml:aux-node" 'sxml.tools)
(hash-table-put! %s->m% "arity" 'gauche.procedure)
(hash-table-put! %s->m% "array-for-each" 'gauche.array)
(hash-table-put! %s->m% "B300" 'gauche.termios)
(hash-table-put! %s->m% "rtd-accessor" 'gauche.record)
(hash-table-put! %s->m% "record-modifier" 'util.record)
(hash-table-put! %s->m% "sys-openlog" 'gauche.syslog)
(hash-table-put! %s->m% "test" 'gauche.test)
(hash-table-put! %s->m% "cgen-allocate-static-datum" 'gauche.cgen.literal)
(hash-table-put! %s->m% "sparse-vector-for-each" 'util.sparse)
(hash-table-put! %s->m% "vector-unfold-right" 'srfi-43)
(hash-table-put! %s->m% "enqueue-unique!" 'util.queue)
(hash-table-put! %s->m% "filter" 'gauche.collection)
(hash-table-put! %s->m% "ICMP4_PROT_UNREACH" 'rfc.icmp)
(hash-table-put! %s->m% "u32vector-and!" 'gauche.uvector)
(hash-table-put! %s->m% "html:img" 'text.html-lite)
(hash-table-put! %s->m% "sxml:aux-list-node" 'sxml.tools)
(hash-table-put! %s->m% "shape" 'gauche.array)
(hash-table-put! %s->m% "dbi-make-query" 'dbi)
(hash-table-put! %s->m% "program-arguments" 'slib)
(hash-table-put! %s->m% "s32vector-length" 'gauche.uvector)
(hash-table-put! %s->m% "lcs-edit-list" 'util.lcs)
(hash-table-put! %s->m% "<sparse-f64vector>" 'util.sparse)
(hash-table-put! %s->m% "ONOCR" 'gauche.termios)
(hash-table-put! %s->m% "read-u64" 'binary.io)
(hash-table-put! %s->m% "copy-directory*" 'file.util)
(hash-table-put! %s->m% "html:dl" 'text.html-lite)
(hash-table-put! %s->m% "http-file-sender" 'rfc.http)
(hash-table-put! %s->m% "stream-intersperse" 'util.stream)
(hash-table-put! %s->m% "mt-random-real0" 'math.mt-random)
(hash-table-put! %s->m% "cons*" 'srfi-1)
(hash-table-put! %s->m% "IPPROTO_ICMPV6" 'gauche.net)
(hash-table-put! %s->m% "ICMP4_ECHO" 'rfc.icmp)
(hash-table-put! %s->m% "string-ec" 'srfi-42)
(hash-table-put! %s->m% "dict-for-each" 'gauche.dictionary)
(hash-table-put! %s->m% "u64vector-xor" 'gauche.uvector)
(hash-table-put! %s->m% "catalog:try-read" 'slib)
(hash-table-put! %s->m% "test-one-of" 'gauche.test)
(hash-table-put! %s->m% "lunfold" 'gauche.lazy)
(hash-table-put! %s->m% "char-set-diff+intersection" 'srfi-14)
(hash-table-put! %s->m% "format" 'srfi-29.format)
(hash-table-put! %s->m% "sparse-table-push!" 'util.sparse)
(hash-table-put! %s->m% "<s8vector-meta>" 'gauche.uvector)
(hash-table-put! %s->m% "f32vector-add" 'gauche.uvector)
(hash-table-put! %s->m% "fold2" 'gauche.collection)
(hash-table-put! %s->m% "cgen-define" 'gauche.cgen.unit)
(hash-table-put! %s->m% "trie-keys" 'util.trie)
(hash-table-put! %s->m% "stream-null?" 'util.stream)
(hash-table-put! %s->m% "html:title" 'text.html-lite)
(hash-table-put! %s->m% "stream-cadadr" 'util.stream)
(hash-table-put! %s->m% "the-environment" 'compat.stk)
(hash-table-put! %s->m% "open-output-process-port" 'gauche.process)
(hash-table-put! %s->m% "ICANON" 'gauche.termios)
(hash-table-put! %s->m% "sys-openpty" 'gauche.termios)
(hash-table-put! %s->m% "alist-cons" 'srfi-1)
(hash-table-put! %s->m% "library-map" 'gauche.libutil)
(hash-table-put! %s->m% "ces-upper-compatible?" 'gauche.charconv)
(hash-table-put! %s->m% "f64vector-mul!" 'gauche.uvector)
(hash-table-put! %s->m% "SIOCGIFNAME" 'gauche.net)
(hash-table-put! %s->m% "slib:require" 'slib)
(hash-table-put! %s->m% "u8vector-ref" 'gauche.uvector)
(hash-table-put! %s->m% "upper" 'parser.peg)
(hash-table-put! %s->m% "IP_RECVTOS" 'gauche.net)
(hash-table-put! %s->m% "stream-caaaar" 'util.stream)
(hash-table-put! %s->m% "string-upper" 'compat.stk)
(hash-table-put! %s->m% "<process>" 'gauche.process)
(hash-table-put! %s->m% "run" 'gauche.package.util)
(hash-table-put! %s->m% "u64vector-clamp" 'gauche.uvector)
(hash-table-put! %s->m% "pair-fold-right" 'srfi-1)
(hash-table-put! %s->m% "delete-file" 'slib)
(hash-table-put! %s->m% "tree-map-map" 'gauche.treeutil)
(hash-table-put! %s->m% "alphanum" 'parser.peg)
(hash-table-put! %s->m% "profiler-get-result" 'gauche.vm.profiler)
(hash-table-put! %s->m% "string->uninterned-symbol" 'compat.stk)
(hash-table-put! %s->m% "expand-file-name" 'compat.stk)
(hash-table-put! %s->m% "html:acronym" 'text.html-lite)
(hash-table-put! %s->m% "call-with-cgi-script" 'www.cgi.test)
(hash-table-put! %s->m% "arity-at-least?" 'gauche.procedure)
(hash-table-put! %s->m% "put-f32le!" 'binary.io)
(hash-table-put! %s->m% "f32vector-copy" 'gauche.uvector)
(hash-table-put! %s->m% "match:every" 'util.match)
(hash-table-put! %s->m% "power-set*" 'util.combinations)
(hash-table-put! %s->m% "B134" 'gauche.termios)
(hash-table-put! %s->m% "ftype:int64" 'binary.ftype)
(hash-table-put! %s->m% "<cgen-stub-error>" 'gauche.cgen.stub)
(hash-table-put! %s->m% "seventh" 'srfi-1)
(hash-table-put! %s->m% "uri-decompose-hierarchical" 'rfc.uri)
(hash-table-put! %s->m% "write-u32" 'binary.io)
(hash-table-put! %s->m% "sparse-vector-push!" 'util.sparse)
(hash-table-put! %s->m% "$between" 'parser.peg)
(hash-table-put! %s->m% "stream-find" 'util.stream)
(hash-table-put! %s->m% "delete-files" 'file.util)
(hash-table-put! %s->m% "provided?" 'slib)
(hash-table-put! %s->m% "fobject?" 'binary.ftype)
(hash-table-put! %s->m% "rope-finalize" 'parser.peg)
(hash-table-put! %s->m% "F_UNLCK" 'gauche.fcntl)
(hash-table-put! %s->m% "string-unfold-right" 'srfi-13)
(hash-table-put! %s->m% "mime-decode-word" 'rfc.mime)
(hash-table-put! %s->m% "s32vector-xor" 'gauche.uvector)
(hash-table-put! %s->m% "rxmatch-cond" 'gauche.regexp)
(hash-table-put! %s->m% "<f32array>" 'gauche.array)
(hash-table-put! %s->m% "bimap-right-exists?" 'gauche.dictionary)
(hash-table-put! %s->m% "<ftp-connection>" 'rfc.ftp)
(hash-table-put! %s->m% "s32vector?" 'gauche.uvector)
(hash-table-put! %s->m% "<sparse-u64vector>" 'util.sparse)
(hash-table-put! %s->m% "OLCUC" 'gauche.termios)
(hash-table-put! %s->m% "$return" 'parser.peg)
(hash-table-put! %s->m% "file-mtime<?" 'file.util)
(hash-table-put! %s->m% "sxml:namespace" 'sxml.sxpath)
(hash-table-put! %s->m% "sys-closelog" 'gauche.syslog)
(hash-table-put! %s->m% "F_DUPFD" 'gauche.fcntl)
(hash-table-put! %s->m% "MSG_WAITALL" 'gauche.net)
(hash-table-put! %s->m% "string-contains-ci" 'srfi-13)
(hash-table-put! %s->m% "put-s16!" 'binary.io)
(hash-table-put! %s->m% "dry-run" 'gauche.package.util)
(hash-table-put! %s->m% "<sys-servent>" 'gauche.net)
(hash-table-put! %s->m% "promise?" 'compat.stk)
(hash-table-put! %s->m% "condition" 'gauche.condutil)
(hash-table-put! %s->m% "date-hour" 'srfi-19)
(hash-table-put! %s->m% "PARMRK" 'gauche.termios)
(hash-table-put! %s->m% "first-set-bit" 'srfi-60)
(hash-table-put! %s->m% "<uvector>" 'gauche.uvector)
(hash-table-put! %s->m% "file-is-symlink?" 'file.util)
(hash-table-put! %s->m% "u64vector-add!" 'gauche.uvector)
(hash-table-put! %s->m% "sxml:equality-cmp" 'sxml.sxpath)
(hash-table-put! %s->m% "string-ci>" 'srfi-13)
(hash-table-put! %s->m% "merge!" 'gauche.sortutil)
(hash-table-put! %s->m% "with-tmodule" 'gauche.cgen.tmodule)
(hash-table-put! %s->m% "cgi-metavariables" 'www.cgi)
(hash-table-put! %s->m% "socket-recvfrom!" 'gauche.net)
(hash-table-put! %s->m% "time-tai->julian-day" 'srfi-19)
(hash-table-put! %s->m% "determinant!" 'gauche.array)
(hash-table-put! %s->m% "set-time-second!" 'srfi-19)
(hash-table-put! %s->m% "parse-json-string" 'rfc.json)
(hash-table-put! %s->m% "time-these" 'gauche.time)
(hash-table-put! %s->m% "sys-getgroups" 'gauche.auxsys)
(hash-table-put! %s->m% "posix-stat->vector" 'compat.stk)
(hash-table-put! %s->m% "make-http-connection" 'rfc.http)
(hash-table-put! %s->m% "ICMP6_UNREACH_NOPORT" 'rfc.icmp)
(hash-table-put! %s->m% "<object-set-relation>" 'util.relation)
(hash-table-put! %s->m% "dbm-close" 'dbm)
(hash-table-put! %s->m% "sxml:clean" 'sxml.tools)
(hash-table-put! %s->m% "assert-curr-char" 'text.parse)
(hash-table-put! %s->m% "permute!" 'gauche.sequence)
(hash-table-put! %s->m% "node-trace" 'sxml.sxpath)
(hash-table-put! %s->m% "sys-cfsetispeed" 'gauche.termios)
(hash-table-put! %s->m% "make-sys-addrinfo" 'gauche.net)
(hash-table-put! %s->m% "string-take-right" 'srfi-13)
(hash-table-put! %s->m% "ECHOE" 'gauche.termios)
(hash-table-put! %s->m% "library-has-module?" 'gauche.libutil)
(hash-table-put! %s->m% "sha1-digest-string" 'rfc.sha)
(hash-table-put! %s->m% "rbtree->alist" 'util.rbtree)
(hash-table-put! %s->m% "html:textarea" 'text.html-lite)
(hash-table-put! %s->m% "list->s64vector" 'gauche.uvector)
(hash-table-put! %s->m% "get-f64" 'binary.io)
(hash-table-put! %s->m% "f32vector-mul" 'gauche.uvector)
(hash-table-put! %s->m% "IP_ADD_MEMBERSHIP" 'gauche.net)
(hash-table-put! %s->m% "do-generator" 'gauche.generator)
(hash-table-put! %s->m% "CIBAUD" 'gauche.termios)
(hash-table-put! %s->m% "make-u8vector" 'gauche.uvector)
(hash-table-put! %s->m% "write-binary-uint" 'binary.io)
(hash-table-put! %s->m% "make-grapheme-cluster-reader" 'text.unicode)
(hash-table-put! %s->m% "socket-shutdown" 'gauche.net)
(hash-table-put! %s->m% "gzip-decode-string" 'rfc.zlib)
(hash-table-put! %s->m% "modified-julian-day->date" 'srfi-19)
(hash-table-put! %s->m% "sxml:filter" 'sxml.sxpath)
(hash-table-put! %s->m% "SOL_IP" 'gauche.net)
(hash-table-put! %s->m% "without-echoing" 'gauche.termios)
(hash-table-put! %s->m% "icmp4-security-code->string" 'rfc.icmp)
(hash-table-put! %s->m% "stream-cdaar" 'util.stream)
(hash-table-put! %s->m% "relation-modifier" 'util.relation)
(hash-table-put! %s->m% "sxml:ns-id" 'sxml.tools)
(hash-table-put! %s->m% "make-s8array" 'gauche.array)
(hash-table-put! %s->m% "make-packer" 'binary.pack)
(hash-table-put! %s->m% "s64vector-clamp" 'gauche.uvector)
(hash-table-put! %s->m% "srl:sxml->html-noindent" 'sxml.serializer)
(hash-table-put! %s->m% "tree-map-values" 'gauche.treeutil)
(hash-table-put! %s->m% "ftp-noop" 'rfc.ftp)
(hash-table-put! %s->m% "circular-generator" 'gauche.generator)
(hash-table-put! %s->m% "vector-for-each" 'srfi-43)
(hash-table-put! %s->m% "enqueue/wait!" 'util.queue)
(hash-table-put! %s->m% "open-inflating-port" 'rfc.zlib)
(hash-table-put! %s->m% "<info-file>" 'text.info)
(hash-table-put! %s->m% "join-timeout-exception?" 'gauche.threads)
(hash-table-put! %s->m% "<dbi-connection>" 'dbi)
(hash-table-put! %s->m% "ICMP4_HOST_UNR_TOS" 'rfc.icmp)
(hash-table-put! %s->m% "job-result" 'control.job)
(hash-table-put! %s->m% "string->stream" 'util.stream)
(hash-table-put! %s->m% "html:colgroup" 'text.html-lite)
(hash-table-put! %s->m% "sxml:element-name" 'sxml.tools)
(hash-table-put! %s->m% "~" 'gauche.procedure)
(hash-table-put! %s->m% "array-equal?" 'gauche.array)
(hash-table-put! %s->m% "f32vector-length" 'gauche.uvector)
(hash-table-put! %s->m% "rtd-name" 'gauche.record)
(hash-table-put! %s->m% "B50" 'gauche.termios)
(hash-table-put! %s->m% "ftype:int16" 'binary.ftype)
(hash-table-put! %s->m% "sys-stat->file-type" 'gauche.fileutil)
(hash-table-put! %s->m% "char-set:ascii" 'srfi-14)
(hash-table-put! %s->m% "x->generator" 'gauche.generator)
(hash-table-put! %s->m% "sparse-vector-delete!" 'util.sparse)
(hash-table-put! %s->m% "queue?" 'util.queue)
(hash-table-put! %s->m% "stream-reverse" 'util.stream)
(hash-table-put! %s->m% "ICMP4_ADDRESSREPLY" 'rfc.icmp)
(hash-table-put! %s->m% "F_SETLK" 'gauche.fcntl)
(hash-table-put! %s->m% "stream-format" 'util.stream)
(hash-table-put! %s->m% "char-set-unfold" 'srfi-14)
(hash-table-put! %s->m% "<message-digest-algorithm-meta>" 'util.digest)
(hash-table-put! %s->m% "s32vector-and!" 'gauche.uvector)
(hash-table-put! %s->m% "<sys-addrinfo>" 'gauche.net)
(hash-table-put! %s->m% "u16vector-fill!" 'gauche.uvector)
(hash-table-put! %s->m% "lfilter-map" 'gauche.lazy)
(hash-table-put! %s->m% "<sparse-u16vector>" 'util.sparse)
(hash-table-put! %s->m% "IUCLC" 'gauche.termios)
(hash-table-put! %s->m% "directory-list" 'file.util)
(hash-table-put! %s->m% "<sparse-vector-base>" 'util.sparse)
(hash-table-put! %s->m% "LOG_PERROR" 'gauche.syslog)
(hash-table-put! %s->m% "thread-sleep!" 'gauche.threads)
(hash-table-put! %s->m% "remove-to" 'gauche.collection)
(hash-table-put! %s->m% "define-cise-stmt" 'gauche.cgen.cise)
(hash-table-put! %s->m% "srfi-42-real-range" 'srfi-42)
(hash-table-put! %s->m% "VEOL" 'gauche.termios)
(hash-table-put! %s->m% "ftp-system" 'rfc.ftp)
(hash-table-put! %s->m% "MSG_OOB" 'gauche.net)
(hash-table-put! %s->m% "dict-get" 'gauche.dictionary)
(hash-table-put! %s->m% "reset" 'gauche.partcont)
(hash-table-put! %s->m% "char-set-intersection" 'srfi-14)
(hash-table-put! %s->m% "&serious" 'gauche.condutil)
(hash-table-put! %s->m% "array-mul-elements" 'gauche.array)
(hash-table-put! %s->m% "hmac-digest" 'rfc.hmac)
(hash-table-put! %s->m% "make-sparse-table" 'util.sparse)
(hash-table-put! %s->m% "version<?" 'gauche.version)
(hash-table-put! %s->m% "macro-expand" 'compat.stk)
(hash-table-put! %s->m% "s64vector-add" 'gauche.uvector)
(hash-table-put! %s->m% "get-serializable-slots" 'gauche.serializer)
(hash-table-put! %s->m% "stable-sort!" 'gauche.sortutil)
(hash-table-put! %s->m% "lset-xor" 'srfi-1)
(hash-table-put! %s->m% "logcount" 'srfi-60)
(hash-table-put! %s->m% "current-tmodule-cname" 'gauche.cgen.tmodule)
(hash-table-put! %s->m% "cgen-emit-init" 'gauche.cgen.unit)
(hash-table-put! %s->m% "info" 'gauche.interactive.info)
(hash-table-put! %s->m% "sys-getpgrp" 'gauche.auxsys)
(hash-table-put! %s->m% "<f64vector-meta>" 'gauche.uvector)
(hash-table-put! %s->m% "add-job!" 'control.thread-pool)
(hash-table-put! %s->m% "process-wait" 'gauche.process)
(hash-table-put! %s->m% "when-port-readable" 'compat.stk)
(hash-table-put! %s->m% "<dbm-meta>" 'dbm)
(hash-table-put! %s->m% "<validator-meta>" 'gauche.mop.validator)
(hash-table-put! %s->m% "s64vector-copy" 'gauche.uvector)
(hash-table-put! %s->m% "partition!" 'srfi-1)
(hash-table-put! %s->m% "u64vector-mul!" 'gauche.uvector)
(hash-table-put! %s->m% "IP_ROUTER_ALERT" 'gauche.net)
(hash-table-put! %s->m% "<singleton-meta>" 'gauche.mop.singleton)
(hash-table-put! %s->m% "s8vector->vector" 'gauche.uvector)
(hash-table-put! %s->m% "HUPCL" 'gauche.termios)
(hash-table-put! %s->m% "instance-pool:->list" 'gauche.mop.instance-pool)
(hash-table-put! %s->m% "let-values" 'srfi-11)
(hash-table-put! %s->m% "pi/180" 'math.const)
(hash-table-put! %s->m% "TCP_NODELAY" 'gauche.net)
(hash-table-put! %s->m% "read-binary-sint16" 'binary.io)
(hash-table-put! %s->m% "u32vector-clamp" 'gauche.uvector)
(hash-table-put! %s->m% "hook-empty?" 'gauche.hook)
(hash-table-put! %s->m% "unzip1" 'srfi-1)
(hash-table-put! %s->m% "write-f32" 'binary.io)
(hash-table-put! %s->m% "-1+" 'slib)
(hash-table-put! %s->m% "make-vicinity" 'slib)
(hash-table-put! %s->m% "$string-ci" 'parser.peg)
(hash-table-put! %s->m% "html:noframes" 'text.html-lite)
(hash-table-put! %s->m% "let-args" 'gauche.parseopt)
(hash-table-put! %s->m% "condition-variable-specific-set!" 'gauche.threads)
(hash-table-put! %s->m% "fobject-copy!" 'binary.ftype)
(hash-table-put! %s->m% "string-parse-final-start+end" 'srfi-13)
(hash-table-put! %s->m% "html:em" 'text.html-lite)
(hash-table-put! %s->m% "cgen-unit-c-file" 'gauche.cgen.unit)
(hash-table-put! %s->m% "generator-fold-right" 'gauche.procedure)
(hash-table-put! %s->m% "array-ref" 'gauche.array)
(hash-table-put! %s->m% "put-s64be!" 'binary.io)
(hash-table-put! %s->m% "f32vector?" 'gauche.uvector)
(hash-table-put! %s->m% "match" 'util.match)
(hash-table-put! %s->m% "permutations-for-each" 'util.combinations)
(hash-table-put! %s->m% "ftype:ulonglong" 'binary.ftype)
(hash-table-put! %s->m% "parameter-observer-add!" 'gauche.parameter)
(hash-table-put! %s->m% "sys-stat->dev" 'gauche.fileutil)
(hash-table-put! %s->m% "xcons" 'srfi-1)
(hash-table-put! %s->m% "localized-template" 'srfi-29.bundle)
(hash-table-put! %s->m% "file->line-generator" 'gauche.generator)
(hash-table-put! %s->m% "$many1" 'parser.peg)
(hash-table-put! %s->m% "file-ctime<?" 'file.util)
(hash-table-put! %s->m% "iota" 'srfi-1)
(hash-table-put! %s->m% "string-append/shared" 'srfi-13)
(hash-table-put! %s->m% "char-set-cursor-next" 'srfi-14)
(hash-table-put! %s->m% "<u8array>" 'gauche.array)
(hash-table-put! %s->m% "u16vector-xor" 'gauche.uvector)
(hash-table-put! %s->m% "sys-clearenv" 'gauche.auxsys)
(hash-table-put! %s->m% "IFF_PORTSEL" 'gauche.net)
(hash-table-put! %s->m% "u16vector-copy!" 'gauche.uvector)
(hash-table-put! %s->m% "inet-address->string" 'gauche.net)
(hash-table-put! %s->m% "make-condition-type" 'gauche.condutil)
(hash-table-put! %s->m% "current-modified-julian-day" 'srfi-19)
(hash-table-put! %s->m% "IXON" 'gauche.termios)
(hash-table-put! %s->m% "file-size" 'file.util)
(hash-table-put! %s->m% "stream-take" 'util.stream)
(hash-table-put! %s->m% "thread-state" 'gauche.threads)
(hash-table-put! %s->m% "LOG_NDELAY" 'gauche.syslog)
(hash-table-put! %s->m% "ftp-rename" 'rfc.ftp)
(hash-table-put! %s->m% "uvector-alias" 'gauche.uvector)
(hash-table-put! %s->m% "sxml:parent" 'sxml.sxpath)
(hash-table-put! %s->m% "cise-register-macro!" 'gauche.cgen.cise)
(hash-table-put! %s->m% "MSG_CTRUNC" 'gauche.net)
(hash-table-put! %s->m% "string-suffix?" 'srfi-13)
(hash-table-put! %s->m% "<cgi-request-size-error>" 'www.cgi)
(hash-table-put! %s->m% "cute" 'srfi-26)
(hash-table-put! %s->m% "make-server-socket" 'gauche.net)
(hash-table-put! %s->m% "&i/o-port-error" 'gauche.condutil)
(hash-table-put! %s->m% "product-ec" 'srfi-42)
(hash-table-put! %s->m% "->stream-char" 'util.stream)
(hash-table-put! %s->m% "option?" 'srfi-37)
(hash-table-put! %s->m% "add-duration" 'srfi-19)
(hash-table-put! %s->m% "<process-time-counter>" 'gauche.time)
(hash-table-put! %s->m% "bitwise-and" 'srfi-60)
(hash-table-put! %s->m% "html:blockquote" 'text.html-lite)
(hash-table-put! %s->m% "relnum-compare" 'gauche.version)
(hash-table-put! %s->m% "icmp4-fill-echo!" 'rfc.icmp)
(hash-table-put! %s->m% "http-cond-receiver" 'rfc.http)
(hash-table-put! %s->m% "relative-path?" 'file.util)
(hash-table-put! %s->m% "sxml:string->xml" 'sxml.tools)
(hash-table-put! %s->m% "random-source-state-ref" 'srfi-27)
(hash-table-put! %s->m% "s32vector-add!" 'gauche.uvector)
(hash-table-put! %s->m% "string=" 'srfi-13)
(hash-table-put! %s->m% "<sha512>" 'rfc.sha)
(hash-table-put! %s->m% "stable-sort-by" 'gauche.sortutil)
(hash-table-put! %s->m% "logand" 'srfi-60)
(hash-table-put! %s->m% "dcgettext" 'text.gettext)
(hash-table-put! %s->m% "socket-getpeername" 'gauche.net)
(hash-table-put! %s->m% "time-monotonic->time-utc!" 'srfi-19)
(hash-table-put! %s->m% "Z_BINARY" 'rfc.zlib)
(hash-table-put! %s->m% "trie-exists?" 'util.trie)
(hash-table-put! %s->m% "time-thread" 'srfi-19)
(hash-table-put! %s->m% "array-rotate-90" 'gauche.array)
(hash-table-put! %s->m% "drop-right" 'srfi-1)
(hash-table-put! %s->m% "<f32vector>" 'gauche.uvector)
(hash-table-put! %s->m% "ICMP6_TIME_EXCEEDED" 'rfc.icmp)
(hash-table-put! %s->m% "sxml:add-attr!" 'sxml.tools)
(hash-table-put! %s->m% "fold-with-index" 'gauche.sequence)
(hash-table-put! %s->m% "xmac" 'gauche.macroutil)
(hash-table-put! %s->m% "NI_DGRAM" 'gauche.net)
(hash-table-put! %s->m% "s64vector-length" 'gauche.uvector)
(hash-table-put! %s->m% "s64vector-mul" 'gauche.uvector)
(hash-table-put! %s->m% "IP_HDRINCL" 'gauche.net)
(hash-table-put! %s->m% "s8vector->list" 'gauche.uvector)
(hash-table-put! %s->m% "rassv-ref" 'util.list)
(hash-table-put! %s->m% "CS7" 'gauche.termios)
(hash-table-put! %s->m% "vector-swap!" 'srfi-43)
(hash-table-put! %s->m% "SOCK_DGRAM" 'gauche.net)
(hash-table-put! %s->m% "utf8->ucs4" 'text.unicode)
(hash-table-put! %s->m% "logbit?" 'srfi-60)
(hash-table-put! %s->m% "<inflating-port>" 'rfc.zlib)
(hash-table-put! %s->m% "foldts" 'sxml.tree-trans)
(hash-table-put! %s->m% "slib:pathnameize-load" 'slib)
(hash-table-put! %s->m% "<sys-termios>" 'gauche.termios)
(hash-table-put! %s->m% "fold" 'gauche.collection)
(hash-table-put! %s->m% "ssax:warn" 'sxml.ssax)
(hash-table-put! %s->m% "B230400" 'gauche.termios)
(hash-table-put! %s->m% "ICMP4_ROUTER_NORMAL" 'rfc.icmp)
(hash-table-put! %s->m% "SO_TIMESTAMP" 'gauche.net)
(hash-table-put! %s->m% "array-every" 'gauche.array)
(hash-table-put! %s->m% "<buffered-input-port>" 'gauche.vport)
(hash-table-put! %s->m% "sxml:aux-nodes" 'sxml.tools)
(hash-table-put! %s->m% "rtd-mutator" 'gauche.record)
(hash-table-put! %s->m% "record-type-descriptor" 'util.record)
(hash-table-put! %s->m% "s32vector-clamp" 'gauche.uvector)
(hash-table-put! %s->m% "ftp-ls" 'rfc.ftp)
(hash-table-put! %s->m% "eof" 'parser.peg)
(hash-table-put! %s->m% "sparse-vector-keys" 'util.sparse)
(hash-table-put! %s->m% "vector-reverse-copy" 'srfi-43)
(hash-table-put! %s->m% "queue-pop!" 'util.queue)
(hash-table-put! %s->m% "let" 'srfi-5)
(hash-table-put! %s->m% "fobject-copy" 'binary.ftype)
(hash-table-put! %s->m% "ICMP4_PORT_UNREACH" 'rfc.icmp)
(hash-table-put! %s->m% "O_APPEND" 'gauche.fcntl)
(hash-table-put! %s->m% "sxml:aux-as-list" 'sxml.tools)
(hash-table-put! %s->m% "f16vector-fill!" 'gauche.uvector)
(hash-table-put! %s->m% "ftype:uint" 'binary.ftype)
(hash-table-put! %s->m% "dbi-execute-query" 'dbi)
(hash-table-put! %s->m% "tls-output-port" 'rfc.tls)
(hash-table-put! %s->m% "sys-stat->size" 'gauche.fileutil)
(hash-table-put! %s->m% "ltake" 'gauche.lazy)
(hash-table-put! %s->m% "sparse-vector-max-index-bits" 'util.sparse)
(hash-table-put! %s->m% "rassoc-ref" 'util.list)
(hash-table-put! %s->m% "create-directory-tree" 'file.util)
(hash-table-put! %s->m% "read-sint" 'binary.io)
(hash-table-put! %s->m% "html:dt" 'text.html-lite)
(hash-table-put! %s->m% "http-multipart-sender" 'rfc.http)
(hash-table-put! %s->m% "stream-split" 'util.stream)
(hash-table-put! %s->m% "mt-random-integer" 'math.mt-random)
(hash-table-put! %s->m% "srfi-42-generator" 'srfi-42)
(hash-table-put! %s->m% "ICMP4_ROUTER_ADVERT" 'rfc.icmp)
(hash-table-put! %s->m% "put-s32!" 'binary.io)
(hash-table-put! %s->m% "u16vector-and!" 'gauche.uvector)
(hash-table-put! %s->m% "IFF_MASTER" 'gauche.net)
(hash-table-put! %s->m% "sys-environ" 'gauche.auxsys)
(hash-table-put! %s->m% "dict-map" 'gauche.dictionary)
(hash-table-put! %s->m% "slib:features" 'slib)
(hash-table-put! %s->m% "u16vector-ref" 'gauche.uvector)
(hash-table-put! %s->m% "test-check" 'gauche.test)
(hash-table-put! %s->m% "lmap" 'gauche.lazy)
(hash-table-put! %s->m% "char-set-diff+intersection!" 'srfi-14)
(hash-table-put! %s->m% "condition-ref" 'gauche.condutil)
(hash-table-put! %s->m% "INLCR" 'gauche.termios)
(hash-table-put! %s->m% "sparse-table-pop!" 'util.sparse)
(hash-table-put! %s->m% "ssax:largest-unres-name" 'sxml.ssax)
(hash-table-put! %s->m% "ftp-put-unique" 'rfc.ftp)
(hash-table-put! %s->m% "fold3" 'gauche.collection)
(hash-table-put! %s->m% "f32vector-swap-bytes!" 'gauche.uvector)
(hash-table-put! %s->m% "cgen-safe-name" 'gauche.cgen.unit)
(hash-table-put! %s->m% "reload" 'gauche.reload)
(hash-table-put! %s->m% "trie-values" 'util.trie)
(hash-table-put! %s->m% "take*" 'util.list)
(hash-table-put! %s->m% "stream-pair?" 'util.stream)
(hash-table-put! %s->m% "html:base" 'text.html-lite)
(hash-table-put! %s->m% "stream-caddar" 'util.stream)
(hash-table-put! %s->m% "parent-environment" 'compat.stk)
(hash-table-put! %s->m% "complement" 'gauche.procedure)
(hash-table-put! %s->m% "call-with-input-process" 'gauche.process)
(hash-table-put! %s->m% "u16vector-add" 'gauche.uvector)
(hash-table-put! %s->m% "make-rbtree" 'util.rbtree)
(hash-table-put! %s->m% "ces-convert" 'gauche.charconv)
(hash-table-put! %s->m% "lset<=" 'srfi-1)
(hash-table-put! %s->m% "srfi-42-while-2" 'srfi-42)
(hash-table-put! %s->m% "gauche-package-clean" 'gauche.package.compile)
(hash-table-put! %s->m% "temporary-file-name" 'compat.stk)
(hash-table-put! %s->m% "make-thread-pool" 'control.thread-pool)
(hash-table-put! %s->m% "stream-caaadr" 'util.stream)
(hash-table-put! %s->m% "split-string" 'compat.stk)
(hash-table-put! %s->m% "<process-abnormal-exit>" 'gauche.process)
(hash-table-put! %s->m% "NI_NUMERICHOST" 'gauche.net)
(hash-table-put! %s->m% "reduce-right" 'srfi-1)
(hash-table-put! %s->m% "s64vector?" 'gauche.uvector)
(hash-table-put! %s->m% "s32vector-mul!" 'gauche.uvector)
(hash-table-put! %s->m% "IP_RECVOPTS" 'gauche.net)
(hash-table-put! %s->m% "s8vector-set!" 'gauche.uvector)
(hash-table-put! %s->m% "CSIZE" 'gauche.termios)
(hash-table-put! %s->m% "digit" 'parser.peg)
(hash-table-put! %s->m% "copy-bit-field" 'srfi-60)
(hash-table-put! %s->m% "sys-forkpty" 'gauche.termios)
(hash-table-put! %s->m% "fobject-ref/uv" 'binary.ftype)
(hash-table-put! %s->m% "canonical-path" 'compat.stk)
(hash-table-put! %s->m% "SO_SNDBUF" 'gauche.net)
(hash-table-put! %s->m% "<cgen-node>" 'gauche.cgen.unit)
(hash-table-put! %s->m% "run-cgi-script->header&body" 'www.cgi.test)
(hash-table-put! %s->m% "put-f64be!" 'binary.io)
(hash-table-put! %s->m% "power-set*-for-each" 'util.combinations)
(hash-table-put! %s->m% "u16vector-clamp" 'gauche.uvector)
(hash-table-put! %s->m% "ftype:uint64" 'binary.ftype)
(hash-table-put! %s->m% "cgen-genstub" 'gauche.cgen.stub)
(hash-table-put! %s->m% "eighth" 'srfi-1)
(hash-table-put! %s->m% "uri-decompose-authority" 'rfc.uri)
(hash-table-put! %s->m% "write-u64" 'binary.io)
(hash-table-put! %s->m% "$not" 'parser.peg)
(hash-table-put! %s->m% "read-ber-integer" 'binary.io)
(hash-table-put! %s->m% "stream-find-tail" 'util.stream)
(hash-table-put! %s->m% "null-device" 'file.util)
(hash-table-put! %s->m% "scheme-implementation-type" 'slib)
(hash-table-put! %s->m% "LOG_MAIL" 'gauche.syslog)
(hash-table-put! %s->m% "fobject-type" 'binary.ftype)
(hash-table-put! %s->m% "ssax:read-char-data" 'sxml.ssax)
(hash-table-put! %s->m% "string-for-each" 'srfi-13)
(hash-table-put! %s->m% "O_RDONLY" 'gauche.fcntl)
(hash-table-put! %s->m% "mime-decode-text" 'rfc.mime)
(hash-table-put! %s->m% "f16vector-copy!" 'gauche.uvector)
(hash-table-put! %s->m% "ftype:short" 'binary.ftype)
(hash-table-put! %s->m% "bimap-right-delete!" 'gauche.dictionary)
(hash-table-put! %s->m% "sys-stat->atime" 'gauche.fileutil)
(hash-table-put! %s->m% "frexp" 'gauche.auxsys)
(hash-table-put! %s->m% "$fail" 'parser.peg)
(hash-table-put! %s->m% "<propagate-meta>" 'gauche.mop.propagate)
(hash-table-put! %s->m% "assoc-ref" 'util.list)
(hash-table-put! %s->m% "file-mtime<=?" 'file.util)
(hash-table-put! %s->m% "sxml:preceding" 'sxml.sxpath)
(hash-table-put! %s->m% "F_GETFD" 'gauche.fcntl)
(hash-table-put! %s->m% "string-titlecase" 'text.unicode)
(hash-table-put! %s->m% "<hmac>" 'rfc.hmac)
(hash-table-put! %s->m% "verbose-run" 'gauche.package.util)
(hash-table-put! %s->m% "s16vector-xor" 'gauche.uvector)
(hash-table-put! %s->m% "IFF_PROMISC" 'gauche.net)
(hash-table-put! %s->m% "make-u16vector" 'gauche.uvector)
(hash-table-put! %s->m% "char-set-difference!" 'srfi-14)
(hash-table-put! %s->m% "sys-getservbyname" 'gauche.net)
(hash-table-put! %s->m% "date-day" 'srfi-19)
(hash-table-put! %s->m% "bit-set?" 'srfi-60)
(hash-table-put! %s->m% "file-type" 'file.util)
(hash-table-put! %s->m% "f16vector-swap-bytes" 'gauche.uvector)
(hash-table-put! %s->m% "string-ci<=" 'srfi-13)
(hash-table-put! %s->m% "with-tmodule-recording" 'gauche.cgen.tmodule)
(hash-table-put! %s->m% "cgi-get-metavariable" 'www.cgi)
(hash-table-put! %s->m% "profiler-show-load-stats" 'gauche.vm.profiler)
(hash-table-put! %s->m% "<sockaddr>" 'gauche.net)
(hash-table-put! %s->m% "write-binary-sint8" 'binary.io)
(hash-table-put! %s->m% "time-tai->modified-julian-day" 'srfi-19)
(hash-table-put! %s->m% "tab" 'parser.peg)
(hash-table-put! %s->m% "array-mul" 'gauche.array)
(hash-table-put! %s->m% "set-time-nanosecond!" 'srfi-19)
(hash-table-put! %s->m% "construct-json" 'rfc.json)
(hash-table-put! %s->m% "report-time-results" 'gauche.time)
(hash-table-put! %s->m% "posix-access" 'compat.stk)
(hash-table-put! %s->m% "reset-http-connection" 'rfc.http)
(hash-table-put! %s->m% "icmp6-exceeded-code->string" 'rfc.icmp)
(hash-table-put! %s->m% "u8vector-add!" 'gauche.uvector)
(hash-table-put! %s->m% "select-first-kid" 'sxml.tools)
(hash-table-put! %s->m% "skip-until" 'text.parse)
(hash-table-put! %s->m% "for-each$" 'gauche.collection)
(hash-table-put! %s->m% "shuffle-to" 'gauche.sequence)
(hash-table-put! %s->m% "node-self" 'sxml.sxpath)
(hash-table-put! %s->m% "string-drop" 'srfi-13)
(hash-table-put! %s->m% "<sha224>" 'rfc.sha)
(hash-table-put! %s->m% "get-u16be" 'binary.io)
(hash-table-put! %s->m% "alist->rbtree" 'util.rbtree)
(hash-table-put! %s->m% "html:fieldset" 'text.html-lite)
(hash-table-put! %s->m% "char-set-every" 'srfi-14)
(hash-table-put! %s->m% "base64-decode" 'rfc.base64)
(hash-table-put! %s->m% "inflate-sync" 'rfc.zlib)
(hash-table-put! %s->m% "string->grapheme-clusters" 'text.unicode)
(hash-table-put! %s->m% "socket-close" 'gauche.net)
(hash-table-put! %s->m% "modified-julian-day->time-monotonic" 'srfi-19)
(hash-table-put! %s->m% "stream-any" 'util.stream)
(hash-table-put! %s->m% "select-kids" 'sxml.sxpath)
(hash-table-put! %s->m% "split-at" 'srfi-1)
(hash-table-put! %s->m% "ICMP4_SEC_BADSPI" 'rfc.icmp)
(hash-table-put! %s->m% "make-job" 'control.job)
(hash-table-put! %s->m% "relation-ref" 'util.relation)
(hash-table-put! %s->m% "sxml:ns-uri" 'sxml.tools)
(hash-table-put! %s->m% "slib:error" 'slib)
(hash-table-put! %s->m% "make-u16array" 'gauche.array)
(hash-table-put! %s->m% "AI_ALL" 'gauche.net)
(hash-table-put! %s->m% "B19200" 'gauche.termios)
(hash-table-put! %s->m% "<sql-parse-error>" 'text.sql)
(hash-table-put! %s->m% "LOG_USER" 'gauche.syslog)
(hash-table-put! %s->m% "u16vector-mul" 'gauche.uvector)
(hash-table-put! %s->m% "u32vector-fill!" 'gauche.uvector)
(hash-table-put! %s->m% "ftp-passive?" 'rfc.ftp)
(hash-table-put! %s->m% "get-u8" 'binary.io)
(hash-table-put! %s->m% "gunfold" 'gauche.generator)
(hash-table-put! %s->m% "FF1" 'gauche.termios)
(hash-table-put! %s->m% "vector-count" 'srfi-43)
(hash-table-put! %s->m% "log-default-drain" 'gauche.logger)
(hash-table-put! %s->m% "char-set-size" 'srfi-14)
(hash-table-put! %s->m% "<socket>" 'gauche.net)
(hash-table-put! %s->m% "queue-push/wait!" 'util.queue)
(hash-table-put! %s->m% "deflate-string" 'rfc.zlib)
(hash-table-put! %s->m% "<info-node>" 'text.info)
(hash-table-put! %s->m% "<dbi-query>" 'dbi)
(hash-table-put! %s->m% "SO_RCVLOWAT" 'gauche.net)
(hash-table-put! %s->m% "ICMP4_PKT_FILTERED" 'rfc.icmp)
(hash-table-put! %s->m% "job-wait" 'control.job)
(hash-table-put! %s->m% "stream->string" 'util.stream)
(hash-table-put! %s->m% "html:object" 'text.html-lite)
(hash-table-put! %s->m% "cgen-add!" 'gauche.cgen.unit)
(hash-table-put! %s->m% "html:col" 'text.html-lite)
(hash-table-put! %s->m% "sxml:node-name" 'sxml.tools)
(hash-table-put! %s->m% "array-valid-index?" 'gauche.array)
(hash-table-put! %s->m% "rtd-parent" 'gauche.record)
(hash-table-put! %s->m% "s16vector-clamp" 'gauche.uvector)
(hash-table-put! %s->m% "ftype:uint16" 'binary.ftype)
(hash-table-put! %s->m% "output-port-width" 'slib)
(hash-table-put! %s->m% "char-set:empty" 'srfi-14)
(hash-table-put! %s->m% "sparse-vector-copy" 'util.sparse)
(hash-table-put! %s->m% "mtqueue?" 'util.queue)
(hash-table-put! %s->m% "stream-count" 'util.stream)
(hash-table-put! %s->m% "LOG_LOCAL6" 'gauche.syslog)
(hash-table-put! %s->m% "s32vector->string" 'gauche.uvector)
(hash-table-put! %s->m% "ICMP4_TRACEROUTE" 'rfc.icmp)
(hash-table-put! %s->m% "F_SETLKW" 'gauche.fcntl)
(hash-table-put! %s->m% "stream-lines" 'util.stream)
(hash-table-put! %s->m% "char-set-unfold!" 'srfi-14)
(hash-table-put! %s->m% "digest-update!" 'util.digest)
(hash-table-put! %s->m% "f16vector-ref" 'gauche.uvector)
(hash-table-put! %s->m% "bimap-left-delete!" 'gauche.dictionary)
(hash-table-put! %s->m% "dbi-open?" 'dbi)
(hash-table-put! %s->m% "sys-stat->type" 'gauche.fileutil)
(hash-table-put! %s->m% "<sparse-s32vector>" 'util.sparse)
(hash-table-put! %s->m% "directory-list2" 'file.util)
(hash-table-put! %s->m% "thread-join!" 'gauche.threads)
(hash-table-put! %s->m% "partition-to" 'gauche.collection)
(hash-table-put! %s->m% "define-cise-expr" 'gauche.cgen.cise)
(hash-table-put! %s->m% "ftp-transfer-type" 'rfc.ftp)
(hash-table-put! %s->m% "html-escape" 'text.html-lite)
(hash-table-put! %s->m% "make-s8vector" 'gauche.uvector)
(hash-table-put! %s->m% "s16vector-and!" 'gauche.uvector)
(hash-table-put! %s->m% "IFF_LOOPBACK" 'gauche.net)
(hash-table-put! %s->m% "dict-put!" 'gauche.dictionary)
(hash-table-put! %s->m% "s16vector->vector" 'gauche.uvector)
(hash-table-put! %s->m% "shift" 'gauche.partcont)
(hash-table-put! %s->m% "array-mul-elements!" 'gauche.array)
(hash-table-put! %s->m% "intersperse" 'util.list)
(hash-table-put! %s->m% "srfi-42--dispatch-ref" 'srfi-42)
(hash-table-put! %s->m% "sparse-table-num-entries" 'util.sparse)
(hash-table-put! %s->m% "version<=?" 'gauche.version)
(hash-table-put! %s->m% "macro-expand-1" 'compat.stk)
(hash-table-put! %s->m% "s64vector-swap-bytes!" 'gauche.uvector)
(hash-table-put! %s->m% "lset-xor!" 'srfi-1)
(hash-table-put! %s->m% "char-set-any" 'srfi-14)
(hash-table-put! %s->m% "slib:provide" 'slib)
(hash-table-put! %s->m% "process-wait-any" 'gauche.process)
(hash-table-put! %s->m% "when-port-writable" 'compat.stk)
(hash-table-put! %s->m% "fold$" 'gauche.collection)
(hash-table-put! %s->m% "s8vector-add" 'gauche.uvector)
(hash-table-put! %s->m% "<validator-mixin>" 'gauche.mop.validator)
(hash-table-put! %s->m% "sys-tcsetpgrp" 'gauche.termios)
(hash-table-put! %s->m% "remove!" 'srfi-1)
(hash-table-put! %s->m% "<singleton-mixin>" 'gauche.mop.singleton)
(hash-table-put! %s->m% "assv-set!" 'util.list)
(hash-table-put! %s->m% "instance-pool:fold" 'gauche.mop.instance-pool)
(hash-table-put! %s->m% "let*-values" 'srfi-11)
(hash-table-put! %s->m% "library-vicinity" 'slib)
(hash-table-put! %s->m% "2pi" 'math.const)
(hash-table-put! %s->m% "make-xml-token" 'sxml.ssax)
(hash-table-put! %s->m% "read-binary-sint32" 'binary.io)
(hash-table-put! %s->m% "AI_NUMERICHOST" 'gauche.net)
(hash-table-put! %s->m% "add-hook!" 'gauche.hook)
(hash-table-put! %s->m% "unzip2" 'srfi-1)
(hash-table-put! %s->m% "u8vector-mul!" 'gauche.uvector)
(hash-table-put! %s->m% "u32vector-copy!" 'gauche.uvector)
(hash-table-put! %s->m% "ssax:read-char-ref" 'sxml.ssax)
(hash-table-put! %s->m% "VT1" 'gauche.termios)
(hash-table-put! %s->m% "$char" 'parser.peg)
(hash-table-put! %s->m% "log-format" 'gauche.logger)
(hash-table-put! %s->m% "html:iframe" 'text.html-lite)
(hash-table-put! %s->m% "<parseopt-error>" 'gauche.parseopt)
(hash-table-put! %s->m% "get-fobject" 'binary.ftype)
(hash-table-put! %s->m% "condition-variable-signal!" 'gauche.threads)
(hash-table-put! %s->m% "SO_PEERCRED" 'gauche.net)
(hash-table-put! %s->m% "let-string-start+end" 'srfi-13)
(hash-table-put! %s->m% "html:strong" 'text.html-lite)
(hash-table-put! %s->m% "put-s64le!" 'binary.io)
(hash-table-put! %s->m% "match-lambda" 'util.match)
(hash-table-put! %s->m% "permutations*-for-each" 'util.combinations)
(hash-table-put! %s->m% "parameter-observer-delete!" 'gauche.parameter)
(hash-table-put! %s->m% "u8vector-clamp" 'gauche.uvector)
(hash-table-put! %s->m% "slib:warn" 'slib)
(hash-table-put! %s->m% "list-tabulate" 'srfi-1)
(hash-table-put! %s->m% "rfc822-atom" 'rfc.822)
(hash-table-put! %s->m% "$skip-many" 'parser.peg)
(hash-table-put! %s->m% "rec" 'srfi-31)
(hash-table-put! %s->m% "read-s32" 'binary.io)
(hash-table-put! %s->m% "file-ctime<=?" 'file.util)
(hash-table-put! %s->m% "LOG_LOCAL3" 'gauche.syslog)
(hash-table-put! %s->m% "u8vector->string" 'gauche.uvector)
(hash-table-put! %s->m% "make-initial-:-dispatch" 'srfi-42)
(hash-table-put! %s->m% "VTIME" 'gauche.termios)
(hash-table-put! %s->m% "end-of-char-set?" 'srfi-14)
(hash-table-put! %s->m% "string-concatenate/shared" 'srfi-13)
(hash-table-put! %s->m% "make-f16vector" 'gauche.uvector)
(hash-table-put! %s->m% "<s8array>" 'gauche.array)
(hash-table-put! %s->m% "bimap-put!" 'gauche.dictionary)
(hash-table-put! %s->m% "date->julian-day" 'srfi-19)
(hash-table-put! %s->m% "file-mtime" 'file.util)
(hash-table-put! %s->m% "^." 'gauche.experimental.lamb)
(hash-table-put! %s->m% "sxml:ancestor" 'sxml.sxpath)
(hash-table-put! %s->m% "cise-lookup-macro" 'gauche.cgen.cise)
(hash-table-put! %s->m% "string-prefix-ci?" 'srfi-13)
(hash-table-put! %s->m% "srfi-42-range" 'srfi-42)
(hash-table-put! %s->m% "u8vector-xor" 'gauche.uvector)
(hash-table-put! %s->m% "IFF_UP" 'gauche.net)
(hash-table-put! %s->m% "<cgi-content-type-error>" 'www.cgi)
(hash-table-put! %s->m% "s16vector->list" 'gauche.uvector)
(hash-table-put! %s->m% "make-server-sockets" 'gauche.net)
(hash-table-put! %s->m% "write-binary-long" 'binary.io)
(hash-table-put! %s->m% "stream-replace" 'util.stream)
(hash-table-put! %s->m% "args-fold" 'srfi-37)
(hash-table-put! %s->m% "add-duration!" 'srfi-19)
(hash-table-put! %s->m% "drop-right*" 'util.list)
(hash-table-put! %s->m% "time-counter-start!" 'gauche.time)
(hash-table-put! %s->m% "bitwise-ior" 'srfi-60)
(hash-table-put! %s->m% "version-compare" 'gauche.version)
(hash-table-put! %s->m% "icmp6-fill-echo!" 'rfc.icmp)
(hash-table-put! %s->m% "http-null-sender" 'rfc.http)
(hash-table-put! %s->m% "find-file-in-paths" 'file.util)
(hash-table-put! %s->m% "sxml:non-terminated-html-tag?" 'sxml.tools)
(hash-table-put! %s->m% "time" 'gauche.time)
(hash-table-put! %s->m% "random-source-state-set!" 'srfi-27)
(hash-table-put! %s->m% "u32vector-swap-bytes" 'gauche.uvector)
(hash-table-put! %s->m% "string<>" 'srfi-13)
(hash-table-put! %s->m% "sha512-digest" 'rfc.sha)
(hash-table-put! %s->m% "make-empty-attlist" 'sxml.ssax)
(hash-table-put! %s->m% "get-s16le" 'binary.io)
(hash-table-put! %s->m% "<selector>" 'gauche.selector)
(hash-table-put! %s->m% "bindtextdomain" 'text.gettext)
(hash-table-put! %s->m% "socket-ioctl" 'gauche.net)
(hash-table-put! %s->m% "time-utc->date" 'srfi-19)
(hash-table-put! %s->m% "Z_ASCII" 'rfc.zlib)
(hash-table-put! %s->m% "trie-get" 'util.trie)
(hash-table-put! %s->m% "array-flip" 'gauche.array)
(hash-table-put! %s->m% "time-process" 'srfi-19)
(hash-table-put! %s->m% "machine-type" 'compat.stk)
(hash-table-put! %s->m% "ICMP6_PARAMETERPROB" 'rfc.icmp)
(hash-table-put! %s->m% "sxml:change-attr" 'sxml.tools)
(hash-table-put! %s->m% "reduce-right$" 'gauche.procedure)
(hash-table-put! %s->m% "map-with-index" 'gauche.sequence)
(hash-table-put! %s->m% "f64vector-fill!" 'gauche.uvector)
(hash-table-put! %s->m% "xmac1" 'gauche.macroutil)
(hash-table-put! %s->m% "sys-tcflush" 'gauche.termios)
(hash-table-put! %s->m% "rbtree-copy" 'util.rbtree)
(hash-table-put! %s->m% "fold-ec" 'srfi-42)
(hash-table-put! %s->m% "vector-reverse!" 'srfi-43)
(hash-table-put! %s->m% "SOCK_RAW" 'gauche.net)
(hash-table-put! %s->m% "replace-range" 'sxml.tree-trans)
(hash-table-put! %s->m% "span" 'srfi-1)
(hash-table-put! %s->m% "ucs4->utf16" 'text.unicode)
(hash-table-put! %s->m% "deflating-port-full-flush" 'rfc.zlib)
(hash-table-put! %s->m% "keyword->string" 'compat.stk)
(hash-table-put! %s->m% "ICMP4_ROUTER_NOCOMMON" 'rfc.icmp)
(hash-table-put! %s->m% "sxml:attr" 'sxml.tools)
(hash-table-put! %s->m% "array-any" 'gauche.array)
(hash-table-put! %s->m% "<buffered-output-port>" 'gauche.vport)
(hash-table-put! %s->m% "u64vector-ior!" 'gauche.uvector)
(hash-table-put! %s->m% "define-record-type" 'gauche.record)
(hash-table-put! %s->m% "record-type-name" 'util.record)
(hash-table-put! %s->m% "IPV6_V6ONLY" 'gauche.net)
(hash-table-put! %s->m% "u32vector-ref" 'gauche.uvector)
(hash-table-put! %s->m% "s8vector-mul" 'gauche.uvector)
(hash-table-put! %s->m% "sparse-vector-values" 'util.sparse)
(hash-table-put! %s->m% "BS1" 'gauche.termios)
(hash-table-put! %s->m% "vector-append" 'srfi-43)
(hash-table-put! %s->m% "port->string-list" 'gauche.portutil)
(hash-table-put! %s->m% "sxpath" 'sxml.sxpath)
(hash-table-put! %s->m% "dequeue-all!" 'util.queue)
(hash-table-put! %s->m% "make-condition-variable" 'gauche.threads)
(hash-table-put! %s->m% "ICMP4_FRAG_NEEDED" 'rfc.icmp)
(hash-table-put! %s->m% "O_CREAT" 'gauche.fcntl)
(hash-table-put! %s->m% "SO_LINGER" 'gauche.net)
(hash-table-put! %s->m% "sxml:find-name-separator" 'sxml.tools)
(hash-table-put! %s->m% "TCOOFF" 'gauche.termios)
(hash-table-put! %s->m% "s8vector-clamp" 'gauche.uvector)
(hash-table-put! %s->m% "dbi-get-value" 'dbi)
(hash-table-put! %s->m% "ftype:long" 'binary.ftype)
(hash-table-put! %s->m% "browse-url" 'slib)
(hash-table-put! %s->m% "read-s8" 'binary.io)
(hash-table-put! %s->m% "check-directory-tree" 'file.util)
(hash-table-put! %s->m% "html:dd" 'text.html-lite)
(hash-table-put! %s->m% "http-get" 'rfc.http)
(hash-table-put! %s->m% "stream-last" 'util.stream)
(hash-table-put! %s->m% "<u64vector-meta>" 'gauche.uvector)
(hash-table-put! %s->m% "u32vector-sub" 'gauche.uvector)
(hash-table-put! %s->m% "LOG_LOCAL0" 'gauche.syslog)
(hash-table-put! %s->m% "last" 'srfi-1)
(hash-table-put! %s->m% "mt-random-fill-u32vector!" 'math.mt-random)
(hash-table-put! %s->m% "string->s8vector!" 'gauche.uvector)
(hash-table-put! %s->m% "ICMP4_ROUTER_SOLICIT" 'rfc.icmp)
(hash-table-put! %s->m% "stream-map" 'util.stream)
(hash-table-put! %s->m% "char-set-hash" 'srfi-14)
(hash-table-put! %s->m% "put-s64!" 'binary.io)
(hash-table-put! %s->m% "ssax:complete-start-tag" 'sxml.ssax)
(hash-table-put! %s->m% "u64vector->vector" 'gauche.uvector)
(hash-table-put! %s->m% "dict-keys" 'gauche.dictionary)
(hash-table-put! %s->m% "test-record-file" 'gauche.test)
(hash-table-put! %s->m% "lmap-accum" 'gauche.lazy)
(hash-table-put! %s->m% "sparse-table-fold" 'util.sparse)
(hash-table-put! %s->m% "make-trie" 'util.trie)
(hash-table-put! %s->m% "thread-name" 'gauche.threads)
(hash-table-put! %s->m% "map-to" 'gauche.collection)
(hash-table-put! %s->m% "sxml:relational-cmp" 'sxml.sxpath)
(hash-table-put! %s->m% "html:tt" 'text.html-lite)
(hash-table-put! %s->m% "u8vector-and!" 'gauche.uvector)
(hash-table-put! %s->m% "ssax:read-attributes" 'sxml.ssax)
(hash-table-put! %s->m% "SIOCADDMULTI" 'gauche.net)
(hash-table-put! %s->m% "cgen-safe-name-friendly" 'gauche.cgen.unit)
(hash-table-put! %s->m% "s16vector-set!" 'gauche.uvector)
(hash-table-put! %s->m% "trie-fold" 'util.trie)
(hash-table-put! %s->m% "stream-car" 'util.stream)
(hash-table-put! %s->m% "posix-chmod" 'compat.stk)
(hash-table-put! %s->m% "default-random-source" 'srfi-27)
(hash-table-put! %s->m% "html:meta" 'text.html-lite)
(hash-table-put! %s->m% "O_NONBLOCK" 'gauche.fcntl)
(hash-table-put! %s->m% "stream-cadddr" 'util.stream)
(hash-table-put! %s->m% "global-environment" 'compat.stk)
(hash-table-put! %s->m% "call-with-output-process" 'gauche.process)
(hash-table-put! %s->m% "dbm-put!" 'dbm)
(hash-table-put! %s->m% "u16vector-swap-bytes!" 'gauche.uvector)
(hash-table-put! %s->m% "wrap-with-input-conversion" 'gauche.charconv)
(hash-table-put! %s->m% "lset=" 'srfi-1)
(hash-table-put! %s->m% "ssax:predefined-parsed-entities" 'sxml.ssax)
(hash-table-put! %s->m% "xml-token-kind" 'sxml.ssax)
(hash-table-put! %s->m% "gc-stats" 'compat.stk)
(hash-table-put! %s->m% "run-process" 'gauche.process)
(hash-table-put! %s->m% "vector-resize" 'compat.stk)
(hash-table-put! %s->m% "remove$" 'gauche.procedure)
(hash-table-put! %s->m% "f64vector-copy!" 'gauche.uvector)
(hash-table-put! %s->m% "sys-mkfifo" 'gauche.auxsys)
(hash-table-put! %s->m% "sys-tcsetattr" 'gauche.termios)
(hash-table-put! %s->m% "append-map" 'srfi-1)
(hash-table-put! %s->m% "rbtree-max" 'util.rbtree)
(hash-table-put! %s->m% "gmap" 'gauche.generator)
(hash-table-put! %s->m% "hexdigit" 'parser.peg)
(hash-table-put! %s->m% "enqueue!" 'util.queue)
(hash-table-put! %s->m% "instance-pool:create-pool" 'gauche.mop.instance-pool)
(hash-table-put! %s->m% "fobject-set!/uv" 'binary.ftype)
(hash-table-put! %s->m% "setenv!" 'compat.stk)
(hash-table-put! %s->m% "<regexp-invalid-ast>" 'gauche.regexp)
(hash-table-put! %s->m% "cgen-with-cpp-condition" 'gauche.cgen.unit)
(hash-table-put! %s->m% "run-cgi-script->sxml" 'www.cgi.test)
(hash-table-put! %s->m% "put-f64le!" 'binary.io)
(hash-table-put! %s->m% "ssax:read-external-id" 'sxml.ssax)
(hash-table-put! %s->m% "u64vector-and" 'gauche.uvector)
(hash-table-put! %s->m% "cartesian-product" 'util.combinations)
(hash-table-put! %s->m% "IPV6_MULTICAST_LOOP" 'gauche.net)
(hash-table-put! %s->m% "ftype:float" 'binary.ftype)
(hash-table-put! %s->m% "cgen-stub-parser" 'gauche.cgen.stub)
(hash-table-put! %s->m% "uri-parse" 'rfc.uri)
(hash-table-put! %s->m% "ninth" 'srfi-1)
(hash-table-put! %s->m% "output-port-height" 'slib)
(hash-table-put! %s->m% "make-u32vector" 'gauche.uvector)
(hash-table-put! %s->m% "write-sint" 'binary.io)
(hash-table-put! %s->m% "f32vector-sub!" 'gauche.uvector)
(hash-table-put! %s->m% "macro:eval" 'slib)
(hash-table-put! %s->m% "gcons*" 'gauche.generator)
(hash-table-put! %s->m% "CR3" 'gauche.termios)
(hash-table-put! %s->m% "char-set-filter!" 'srfi-14)
(hash-table-put! %s->m% "$many-till" 'parser.peg)
(hash-table-put! %s->m% "read-f16" 'binary.io)
(hash-table-put! %s->m% "port-fold" 'gauche.portutil)
(hash-table-put! %s->m% "console-device" 'file.util)
(hash-table-put! %s->m% "stream-take-while" 'util.stream)
(hash-table-put! %s->m% "fobject-storage" 'binary.ftype)
(hash-table-put! %s->m% "html:h1" 'text.html-lite)
(hash-table-put! %s->m% "SO_DONTROUTE" 'gauche.net)
(hash-table-put! %s->m% "string-for-each-index" 'srfi-13)
(hash-table-put! %s->m% "rxmatch-if" 'gauche.regexp)
(hash-table-put! %s->m% "<mime-part>" 'rfc.mime)
(hash-table-put! %s->m% "TCIFLUSH" 'gauche.termios)
(hash-table-put! %s->m% "f32vector-dot" 'gauche.uvector)
(hash-table-put! %s->m% "<rfc822-parse-error>" 'rfc.822)
(hash-table-put! %s->m% "$expect" 'parser.peg)
(hash-table-put! %s->m% "<propagate-mixin>" 'gauche.mop.propagate)
(hash-table-put! %s->m% "<s64vector>" 'gauche.uvector)
(hash-table-put! %s->m% "file-mtime>?" 'file.util)
(hash-table-put! %s->m% "u16vector-sub!" 'gauche.uvector)
(hash-table-put! %s->m% "LOG_DAEMON" 'gauche.syslog)
(hash-table-put! %s->m% "sxml:preceding-sibling" 'sxml.sxpath)
(hash-table-put! %s->m% "string-titlecase!" 'srfi-13)
(hash-table-put! %s->m% "srfi-42-port" 'srfi-42)
(hash-table-put! %s->m% "uvector-copy!" 'gauche.uvector)
(hash-table-put! %s->m% "get-password" 'gauche.package.util)
(hash-table-put! %s->m% "u64vector->list" 'gauche.uvector)
(hash-table-put! %s->m% "list->sys-fdset" 'gauche.auxsys)
(hash-table-put! %s->m% "char-set-xor" 'srfi-14)
(hash-table-put! %s->m% "sys-getservbyport" 'gauche.net)
(hash-table-put! %s->m% "define-condition-type" 'gauche.condutil)
(hash-table-put! %s->m% "date-month" 'srfi-19)
(hash-table-put! %s->m% "INPCK" 'gauche.termios)
(hash-table-put! %s->m% "arithmetic-shift" 'srfi-60)
(hash-table-put! %s->m% "file-perm" 'file.util)
(hash-table-put! %s->m% "software-type" 'slib)
(hash-table-put! %s->m% "string-ci>=" 'srfi-13)
(hash-table-put! %s->m% "html:a" 'text.html-lite)
(hash-table-put! %s->m% "get-s64le" 'binary.io)
(hash-table-put! %s->m% "s8vector-xor" 'gauche.uvector)
(hash-table-put! %s->m% "SIOCSIFHWBROADCAST" 'gauche.net)
(hash-table-put! %s->m% "cgi-output-character-encoding" 'www.cgi)
(hash-table-put! %s->m% "s16vector" 'gauche.uvector)
(hash-table-put! %s->m% "<sockaddr-in>" 'gauche.net)
(hash-table-put! %s->m% "write-binary-sint16" 'binary.io)
(hash-table-put! %s->m% "apropos" 'gauche.interactive)
(hash-table-put! %s->m% "stream-member" 'util.stream)
(hash-table-put! %s->m% "time-tai->time-monotonic" 'srfi-19)
(hash-table-put! %s->m% "construct-json-string" 'rfc.json)
(hash-table-put! %s->m% "time-these/report" 'gauche.time)
(hash-table-put! %s->m% "copy-time" 'srfi-19)
(hash-table-put! %s->m% "ICMP6_EXC_TRANSIT" 'rfc.icmp)
(hash-table-put! %s->m% "stream-caaddr" 'util.stream)
(hash-table-put! %s->m% "http-compose-query" 'rfc.http)
(hash-table-put! %s->m% "complete-sexp?" 'gauche.listener)
(hash-table-put! %s->m% "dbm-closed?" 'dbm)
(hash-table-put! %s->m% "sxml:node-parent" 'sxml.tools)
(hash-table-put! %s->m% "skip-while" 'text.parse)
(hash-table-put! %s->m% "shuffle" 'gauche.sequence)
(hash-table-put! %s->m% "node-join" 'sxml.sxpath)
(hash-table-put! %s->m% "char-newline" 'sxml.adaptor)
(hash-table-put! %s->m% "s16vector-swap-bytes" 'gauche.uvector)
(hash-table-put! %s->m% "string-drop-right" 'srfi-13)
(hash-table-put! %s->m% "sha224-digest" 'rfc.sha)
(hash-table-put! %s->m% "get-u16le" 'binary.io)
(hash-table-put! %s->m% "html:legend" 'text.html-lite)
(hash-table-put! %s->m% "base64-encode-string" 'rfc.base64)
(hash-table-put! %s->m% "socket-bind" 'gauche.net)
(hash-table-put! %s->m% "codepoints->grapheme-clusters" 'text.unicode)
(hash-table-put! %s->m% "Z_NO_COMPRESSION" 'rfc.zlib)
(hash-table-put! %s->m% "modified-julian-day->time-tai" 'srfi-19)
(hash-table-put! %s->m% "sxml:element?" 'sxml.sxpath)
(hash-table-put! %s->m% "ICMP4_SEC_AUTHFAILED" 'rfc.icmp)
(hash-table-put! %s->m% "relation-set!" 'util.relation)
(hash-table-put! %s->m% "sxml:ns-prefix" 'sxml.tools)
(hash-table-put! %s->m% "any$" 'gauche.procedure)
(hash-table-put! %s->m% "f64vector-ref" 'gauche.uvector)
(hash-table-put! %s->m% "make-s16array" 'gauche.array)
(hash-table-put! %s->m% "ftype:struct-slots" 'binary.ftype)
(hash-table-put! %s->m% "sql-tokenize" 'text.sql)
(hash-table-put! %s->m% "ftp-put" 'rfc.ftp)
(hash-table-put! %s->m% "with-load-pathname" 'slib)
(hash-table-put! %s->m% "vector-index" 'srfi-43)
(hash-table-put! %s->m% "make-socket" 'gauche.net)
(hash-table-put! %s->m% "inflate-string" 'rfc.zlib)
(hash-table-put! %s->m% "dequeue/wait!" 'util.queue)
(hash-table-put! %s->m% "open-info-file" 'text.info)
(hash-table-put! %s->m% "ssax:warn-handler" 'sxml.ssax)
(hash-table-put! %s->m% "dbi-connect" 'dbi)
(hash-table-put! %s->m% "number->stream" 'util.stream)
(hash-table-put! %s->m% "ICMP4_PREC_VIOLATION" 'rfc.icmp)
(hash-table-put! %s->m% "html:param" 'text.html-lite)
(hash-table-put! %s->m% "s64vector-ior!" 'gauche.uvector)
(hash-table-put! %s->m% "html:tr" 'text.html-lite)
(hash-table-put! %s->m% "sxml:ncname" 'sxml.tools)
(hash-table-put! %s->m% "shape-valid-index?" 'gauche.array)
(hash-table-put! %s->m% "put-f32be!" 'binary.io)
(hash-table-put! %s->m% "IPV6_UNICAST_HOPS" 'gauche.net)
(hash-table-put! %s->m% "rtd-field-names" 'gauche.record)
(hash-table-put! %s->m% "html:sub" 'text.html-lite)
(hash-table-put! %s->m% "s32vector->vector" 'gauche.uvector)
(hash-table-put! %s->m% "f16vector-sub" 'gauche.uvector)
(hash-table-put! %s->m% "<cgen-literal>" 'gauche.cgen.literal)
(hash-table-put! %s->m% "generate" 'gauche.generator)
(hash-table-put! %s->m% "CR0" 'gauche.termios)
(hash-table-put! %s->m% "port-map" 'gauche.portutil)
(hash-table-put! %s->m% "queue-length" 'util.queue)
(hash-table-put! %s->m% "stream-remove" 'util.stream)
(hash-table-put! %s->m% "SO_BINDTODEVICE" 'gauche.net)
(hash-table-put! %s->m% "ICMP4_DGRAMCONVERROR" 'rfc.icmp)
(hash-table-put! %s->m% "F_RDLCK" 'gauche.fcntl)
(hash-table-put! %s->m% "char-set-for-each" 'srfi-14)
(hash-table-put! %s->m% "gauche-package-build" 'gauche.package.build)
(hash-table-put! %s->m% "put-u32be!" 'binary.io)
(hash-table-put! %s->m% "s64vector-dot" 'gauche.uvector)
(hash-table-put! %s->m% "bimap-right" 'gauche.dictionary)
(hash-table-put! %s->m% "dbi-parse-dsn" 'dbi)
(hash-table-put! %s->m% "char-set:lower-case" 'srfi-14)
(hash-table-put! %s->m% "<sparse-u32vector>" 'util.sparse)
(hash-table-put! %s->m% "directory-fold" 'file.util)
(hash-table-put! %s->m% "<s32vector-meta>" 'gauche.uvector)
(hash-table-put! %s->m% "LOG_AUTH" 'gauche.syslog)
(hash-table-put! %s->m% "ec-simplify" 'srfi-42)
(hash-table-put! %s->m% "size-of" 'util.trie)
(hash-table-put! %s->m% "s16vector-sub" 'gauche.uvector)
(hash-table-put! %s->m% "uvector-size" 'gauche.uvector)
(hash-table-put! %s->m% "define-cise-toplevel" 'gauche.cgen.cise)
(hash-table-put! %s->m% "html-escape-string" 'text.html-lite)
(hash-table-put! %s->m% "u64vector-set!" 'gauche.uvector)
(hash-table-put! %s->m% "call/pc" 'gauche.partcont)
(hash-table-put! %s->m% "sparse-table-ref" 'util.sparse)
(hash-table-put! %s->m% "version>?" 'gauche.version)
(hash-table-put! %s->m% "macro-body" 'compat.stk)
(hash-table-put! %s->m% "slib:provided?" 'slib)
(hash-table-put! %s->m% "ECHOKE" 'gauche.termios)
(hash-table-put! %s->m% "lset-diff+intersection" 'srfi-1)
(hash-table-put! %s->m% "attlist-remove-top" 'sxml.ssax)
(hash-table-put! %s->m% "s8vector-and!" 'gauche.uvector)
(hash-table-put! %s->m% "SIOCSIFMTU" 'gauche.net)
(hash-table-put! %s->m% "cgen-extern" 'gauche.cgen.unit)
(hash-table-put! %s->m% "debug-print-width" 'gauche.vm.debugger)
(hash-table-put! %s->m% "vector->u8vector" 'gauche.uvector)
(hash-table-put! %s->m% "O_NOCTTY" 'gauche.fcntl)
(hash-table-put! %s->m% "wait-all" 'control.thread-pool)
(hash-table-put! %s->m% "input-string-port?" 'compat.stk)
(hash-table-put! %s->m% "process-exit-status" 'gauche.process)
(hash-table-put! %s->m% "ascii->char" 'sxml.adaptor)
(hash-table-put! %s->m% "f64vector-range-check" 'gauche.uvector)
(hash-table-put! %s->m% "list-index" 'srfi-1)
(hash-table-put! %s->m% "make-tree-map" 'gauche.treeutil)
(hash-table-put! %s->m% "instance-of" 'gauche.mop.singleton)
(hash-table-put! %s->m% "char-set->string" 'srfi-14)
(hash-table-put! %s->m% "instance-pool:for-each" 'gauche.mop.instance-pool)
(hash-table-put! %s->m% "make-s32array" 'gauche.array)
(hash-table-put! %s->m% "digest-string" 'util.digest)
(hash-table-put! %s->m% "member$" 'gauche.procedure)
(hash-table-put! %s->m% "read-binary-sint64" 'binary.io)
(hash-table-put! %s->m% "make-f64vector" 'gauche.uvector)
(hash-table-put! %s->m% "B4800" 'gauche.termios)
(hash-table-put! %s->m% "remove-hook!" 'gauche.hook)
(hash-table-put! %s->m% "unzip3" 'srfi-1)
(hash-table-put! %s->m% "require-if" 'slib)
(hash-table-put! %s->m% "ftp-mkdir" 'rfc.ftp)
(hash-table-put! %s->m% "write-f64" 'binary.io)
(hash-table-put! %s->m% "get-signal-handlers" 'compat.stk)
(hash-table-put! %s->m% "date->rfc822-date" 'rfc.822)
(hash-table-put! %s->m% "$one-of" 'parser.peg)
(hash-table-put! %s->m% "vector-copy" 'compat.stk)
(hash-table-put! %s->m% "hash-table-map" 'gauche.hashutil)
(hash-table-put! %s->m% "LOG_ERR" 'gauche.syslog)
(hash-table-put! %s->m% "put-fobject!" 'binary.ftype)
(hash-table-put! %s->m% "<vm-insn-info>" 'gauche.vm.insn-core)
(hash-table-put! %s->m% "html:dfn" 'text.html-lite)
(hash-table-put! %s->m% "check-substring-spec" 'srfi-13)
(hash-table-put! %s->m% "stream->list" 'util.stream)
(hash-table-put! %s->m% "put-f16be!" 'binary.io)
(hash-table-put! %s->m% "s64vector-and" 'gauche.uvector)
(hash-table-put! %s->m% "match-lambda*" 'util.match)
(hash-table-put! %s->m% "combinations" 'util.combinations)
(hash-table-put! %s->m% "AF_INET6" 'gauche.net)
(hash-table-put! %s->m% "circular-list" 'srfi-1)
(hash-table-put! %s->m% "s64vector-sub!" 'gauche.uvector)
(hash-table-put! %s->m% "s32vector->list" 'gauche.uvector)
(hash-table-put! %s->m% "slib:eval" 'slib)
(hash-table-put! %s->m% "char-set:hex-digit" 'srfi-14)
(hash-table-put! %s->m% "rfc822-dot-atom" 'rfc.822)
(hash-table-put! %s->m% "$repeat" 'parser.peg)
(hash-table-put! %s->m% "NL0" 'gauche.termios)
(hash-table-put! %s->m% "file-ctime>?" 'file.util)
(hash-table-put! %s->m% "ftype:slot-type" 'binary.ftype)
(hash-table-put! %s->m% "F_SETFL" 'gauche.fcntl)
(hash-table-put! %s->m% "string-concatenate-reverse" 'srfi-13)
(hash-table-put! %s->m% "mime-parse-version" 'rfc.mime)
(hash-table-put! %s->m% "<u16array>" 'gauche.array)
(hash-table-put! %s->m% "sys-environ->alist" 'gauche.auxsys)
(hash-table-put! %s->m% "bimap-left" 'gauche.dictionary)
(hash-table-put! %s->m% "u16vector-dot" 'gauche.uvector)
(hash-table-put! %s->m% "max-ec" 'srfi-42)
(hash-table-put! %s->m% "<sparse-u8vector>" 'util.sparse)
(hash-table-put! %s->m% "date->modified-julian-day" 'srfi-19)
(hash-table-put! %s->m% "<parse-error>" 'parser.peg)
(hash-table-put! %s->m% "stream-drop-safe" 'util.stream)
(hash-table-put! %s->m% "file-atime" 'file.util)
(hash-table-put! %s->m% "<u16vector>" 'gauche.uvector)
(hash-table-put! %s->m% "^*" 'gauche.experimental.lamb)
(hash-table-put! %s->m% "s8vector-sub!" 'gauche.uvector)
(hash-table-put! %s->m% "cise-emit-source-line" 'gauche.cgen.cise)
(hash-table-put! %s->m% "string-suffix-ci?" 'srfi-13)
(hash-table-put! %s->m% "u64vector" 'gauche.uvector)
(hash-table-put! %s->m% "call-with-client-socket" 'gauche.net)
(hash-table-put! %s->m% "write-binary-ulong" 'binary.io)
(hash-table-put! %s->m% "stream-translate" 'util.stream)
(hash-table-put! %s->m% "array-sub-elements" 'gauche.array)
(hash-table-put! %s->m% "subtract-duration" 'srfi-19)
(hash-table-put! %s->m% "time-counter-stop!" 'gauche.time)
(hash-table-put! %s->m% "bitwise-xor" 'srfi-60)
(hash-table-put! %s->m% "hmac-final!" 'rfc.hmac)
(hash-table-put! %s->m% "version=?" 'gauche.version)
(hash-table-put! %s->m% "icmp-packet-type" 'rfc.icmp)
(hash-table-put! %s->m% "path-separator" 'file.util)
(hash-table-put! %s->m% "sxml:sxml->html" 'sxml.tools)
(hash-table-put! %s->m% "random-source-randomize!" 'srfi-27)
(hash-table-put! %s->m% "XCASE" 'gauche.termios)
(hash-table-put! %s->m% "string<" 'srfi-13)
(hash-table-put! %s->m% "sha512-digest-string" 'rfc.sha)
(hash-table-put! %s->m% "f64vector-div" 'gauche.uvector)
(hash-table-put! %s->m% "SIOCGIFMETRIC" 'gauche.net)
(hash-table-put! %s->m% "selector-add!" 'gauche.selector)
(hash-table-put! %s->m% "ngettext" 'text.gettext)
(hash-table-put! %s->m% "debug-print-post" 'gauche.vm.debugger)
(hash-table-put! %s->m% "list->u8vector" 'gauche.uvector)
(hash-table-put! %s->m% "<gauche-package-description>" 'gauche.package)
(hash-table-put! %s->m% "socket-send" 'gauche.net)
(hash-table-put! %s->m% "time-utc->julian-day" 'srfi-19)
(hash-table-put! %s->m% "Z_UNKNOWN" 'rfc.zlib)
(hash-table-put! %s->m% "trie-put!" 'util.trie)
(hash-table-put! %s->m% "ip-source-address" 'rfc.ip)
(hash-table-put! %s->m% "array-flip!" 'gauche.array)
(hash-table-put! %s->m% "time-duration" 'srfi-19)
(hash-table-put! %s->m% "sys-getpgid" 'gauche.auxsys)
(hash-table-put! %s->m% "string-whitespace?" 'sxml.ssax)
(hash-table-put! %s->m% "ICMP6_ECHO" 'rfc.icmp)
(hash-table-put! %s->m% "F_GETOWN" 'gauche.fcntl)
(hash-table-put! %s->m% "relation-insertable?" 'util.relation)
(hash-table-put! %s->m% "sxml:change-attr!" 'sxml.tools)
(hash-table-put! %s->m% "map-to-with-index" 'gauche.sequence)
(hash-table-put! %s->m% "sys-utime" 'gauche.auxsys)
(hash-table-put! %s->m% "f32vector-range-check" 'gauche.uvector)
(hash-table-put! %s->m% "port-closed?" 'compat.stk)
(hash-table-put! %s->m% "tree-map-max" 'gauche.treeutil)
(hash-table-put! %s->m% "get-u64" 'binary.io)
(hash-table-put! %s->m% "vector-reverse-copy!" 'srfi-43)
(hash-table-put! %s->m% "utf16-length" 'text.unicode)
(hash-table-put! %s->m% "SHUT_RD" 'gauche.net)
(hash-table-put! %s->m% "zstream-total-in" 'rfc.zlib)
(hash-table-put! %s->m% "instance-pool:add" 'gauche.mop.instance-pool)
(hash-table-put! %s->m% "icmp4-exceeded-code->string" 'rfc.icmp)
(hash-table-put! %s->m% "<relation>" 'util.relation)
(hash-table-put! %s->m% "sxml:num-attr" 'sxml.tools)
(hash-table-put! %s->m% "every-pred" 'gauche.procedure)
(hash-table-put! %s->m% "tabulate-array" 'gauche.array)
(hash-table-put! %s->m% "open-input-uvector" 'gauche.vport)
(hash-table-put! %s->m% "f32vector->vector" 'gauche.uvector)
(hash-table-put! %s->m% "record-type-fields" 'util.record)
(hash-table-put! %s->m% "B1200" 'gauche.termios)
(hash-table-put! %s->m% "LOG_PID" 'gauche.syslog)
(hash-table-put! %s->m% "tmpnam" 'slib)
(hash-table-put! %s->m% "hash-table-fold" 'gauche.hashutil)
(hash-table-put! %s->m% "ssax:read-cdata-body" 'sxml.ssax)
(hash-table-put! %s->m% "set-signal-handler!" 'compat.stk)
(hash-table-put! %s->m% "vector-concatenate" 'srfi-43)
(hash-table-put! %s->m% "<log-drain>" 'gauche.logger)
(hash-table-put! %s->m% "->char-set" 'srfi-14)
(hash-table-put! %s->m% "count" 'srfi-1)
(hash-table-put! %s->m% "as-nodeset" 'sxml.sxpath)
(hash-table-put! %s->m% "queue-front" 'util.queue)
(hash-table-put! %s->m% "make-option-parser" 'gauche.parseopt)
(hash-table-put! %s->m% "LOG_EMERG" 'gauche.syslog)
(hash-table-put! %s->m% "condition-variable-name" 'gauche.threads)
(hash-table-put! %s->m% "srfi-42-until" 'srfi-42)
(hash-table-put! %s->m% "ICMP4_SR_FAILED" 'rfc.icmp)
(hash-table-put! %s->m% "O_EXCL" 'gauche.fcntl)
(hash-table-put! %s->m% "sxml:error" 'sxml.tools)
(hash-table-put! %s->m% "u32vector-ior!" 'gauche.uvector)
(hash-table-put! %s->m% "<dbi-exception>" 'dbi)
(hash-table-put! %s->m% "s32vector-set!" 'gauche.uvector)
(hash-table-put! %s->m% "rfc822-skip-cfws" 'rfc.822)
(hash-table-put! %s->m% "OFILL" 'gauche.termios)
(hash-table-put! %s->m% "build-path" 'file.util)
(hash-table-put! %s->m% "http-head" 'rfc.http)
(hash-table-put! %s->m% "stream-last-n" 'util.stream)
(hash-table-put! %s->m% "mt-random-fill-f32vector!" 'math.mt-random)
(hash-table-put! %s->m% "VSTOP" 'gauche.termios)
(hash-table-put! %s->m% "ICMP4_TIME_EXCEEDED" 'rfc.icmp)
(hash-table-put! %s->m% "<tls>" 'rfc.tls)
(hash-table-put! %s->m% "stream-for-each" 'util.stream)
(hash-table-put! %s->m% "IPPROTO_UDP" 'gauche.net)
(hash-table-put! %s->m% "char-set-cursor" 'srfi-14)
(hash-table-put! %s->m% "s8vector-length" 'gauche.uvector)
(hash-table-put! %s->m% "put-f16!" 'binary.io)
(hash-table-put! %s->m% "catalog/require-version-match?" 'slib)
(hash-table-put! %s->m% "s8vector-dot" 'gauche.uvector)
(hash-table-put! %s->m% "vicinity:suffix?" 'slib)
(hash-table-put! %s->m% "dict-values" 'gauche.dictionary)
(hash-table-put! %s->m% "set!-values" 'gauche.defvalues)
(hash-table-put! %s->m% "test-summary-check" 'gauche.test)
(hash-table-put! %s->m% "newline" 'parser.peg)
(hash-table-put! %s->m% "sparse-table-map" 'util.sparse)
(hash-table-put! %s->m% "<u8vector-meta>" 'gauche.uvector)
(hash-table-put! %s->m% "name-compare" 'sxml.ssax)
(hash-table-put! %s->m% "trie" 'util.trie)
(hash-table-put! %s->m% "thread-specific-set!" 'gauche.threads)
(hash-table-put! %s->m% "map-accum" 'gauche.collection)
(hash-table-put! %s->m% "f64vector-add" 'gauche.uvector)
(hash-table-put! %s->m% "srfi-42-integers" 'srfi-42)
(hash-table-put! %s->m% "sxml:attribute" 'sxml.sxpath)
(hash-table-put! %s->m% "html:i" 'text.html-lite)
(hash-table-put! %s->m% "&i/o-closed-error" 'gauche.condutil)
(hash-table-put! %s->m% "vector->s64vector" 'gauche.uvector)
(hash-table-put! %s->m% "cgen-safe-comment" 'gauche.cgen.unit)
(hash-table-put! %s->m% "trie-map" 'util.trie)
(hash-table-put! %s->m% "array-div-right" 'gauche.array)
(hash-table-put! %s->m% "stream-cdr" 'util.stream)
(hash-table-put! %s->m% "hmac-update!" 'rfc.hmac)
(hash-table-put! %s->m% "random-source-make-integers" 'srfi-27)
(hash-table-put! %s->m% "html:style" 'text.html-lite)
(hash-table-put! %s->m% "stream-cdaaar" 'util.stream)
(hash-table-put! %s->m% "environment->list" 'compat.stk)
(hash-table-put! %s->m% "with-input-from-process" 'gauche.process)
(hash-table-put! %s->m% "dbm-delete!" 'dbm)
(hash-table-put! %s->m% "input-serializer?" 'gauche.serializer)
(hash-table-put! %s->m% "NOFLSH" 'gauche.termios)
(hash-table-put! %s->m% "wrap-with-output-conversion" 'gauche.charconv)
(hash-table-put! %s->m% "lset-adjoin" 'srfi-1)
(hash-table-put! %s->m% "get-s16be" 'binary.io)
(hash-table-put! %s->m% "f16vector-div!" 'gauche.uvector)
(hash-table-put! %s->m% "SIOCGIFINDEX" 'gauche.net)
(hash-table-put! %s->m% "u8vector-copy" 'gauche.uvector)
(hash-table-put! %s->m% "write-binary-uint32" 'binary.io)
(hash-table-put! %s->m% "take-right" 'srfi-1)
(hash-table-put! %s->m% "cv-file" 'compat.jfilter)
(hash-table-put! %s->m% "stream-caadar" 'util.stream)
(hash-table-put! %s->m% "process?" 'gauche.process)
(hash-table-put! %s->m% "continuation?" 'compat.stk)
(hash-table-put! %s->m% "thread-pool-results" 'control.thread-pool)
(hash-table-put! %s->m% "f16vector-range-check" 'gauche.uvector)
(hash-table-put! %s->m% "tree-map-fold" 'gauche.treeutil)
(hash-table-put! %s->m% "append-map!" 'srfi-1)
(hash-table-put! %s->m% "rbtree-extract-min!" 'util.rbtree)
(hash-table-put! %s->m% "t" 'slib)
(hash-table-put! %s->m% "gmap-accum" 'gauche.generator)
(hash-table-put! %s->m% "sys-forkpty-and-exec" 'gauche.termios)
(hash-table-put! %s->m% "cgen-cpp-conditions" 'gauche.cgen.unit)
(hash-table-put! %s->m% "run-cgi-script->string" 'www.cgi.test)
(hash-table-put! %s->m% "read-binary-uint" 'binary.io)
(hash-table-put! %s->m% "procedure-arity-includes?" 'gauche.procedure)
(hash-table-put! %s->m% "f32vector->list" 'gauche.uvector)
(hash-table-put! %s->m% "B200" 'gauche.termios)
(hash-table-put! %s->m% "cartesian-product-for-each" 'util.combinations)
(hash-table-put! %s->m% "ftype:double" 'binary.ftype)
(hash-table-put! %s->m% "glob" 'gauche.fileutil)
(hash-table-put! %s->m% "uri-merge" 'rfc.uri)
(hash-table-put! %s->m% "tenth" 'srfi-1)
(hash-table-put! %s->m% "cgen-stub-parse-form" 'gauche.cgen.stub)
(hash-table-put! %s->m% "/" 'compat.norational)
(hash-table-put! %s->m% "write-s8" 'binary.io)
(hash-table-put! %s->m% "ucs-range->char-set" 'srfi-14)
(hash-table-put! %s->m% "$chain-left" 'parser.peg)
(hash-table-put! %s->m% "read-f32" 'binary.io)
(hash-table-put! %s->m% "file->string" 'file.util)
(hash-table-put! %s->m% "stream-drop-while" 'util.stream)
(hash-table-put! %s->m% "fobject-offset" 'binary.ftype)
(hash-table-put! %s->m% "html:h2" 'text.html-lite)
(hash-table-put! %s->m% "xsubstring" 'srfi-13)
(hash-table-put! %s->m% "mime-parse-message" 'rfc.mime)
(hash-table-put! %s->m% "u32vector-and" 'gauche.uvector)
(hash-table-put! %s->m% "sys-putenv" 'gauche.auxsys)
(hash-table-put! %s->m% "ftype:ushort" 'binary.ftype)
(hash-table-put! %s->m% "html:ol" 'text.html-lite)
(hash-table-put! %s->m% "s32vector" 'gauche.uvector)
(hash-table-put! %s->m% "call-with-ftp-connection" 'rfc.ftp)
(hash-table-put! %s->m% "char-set:digit" 'srfi-14)
(hash-table-put! %s->m% "rfc822-parse-errorf" 'rfc.822)
(hash-table-put! %s->m% "OCRNL" 'gauche.termios)
(hash-table-put! %s->m% "$do" 'parser.peg)
(hash-table-put! %s->m% "stream-drop" 'util.stream)
(hash-table-put! %s->m% "file-mtime>=?" 'file.util)
(hash-table-put! %s->m% "sxml:child-nodes" 'sxml.sxpath)
(hash-table-put! %s->m% "IPPROTO_ICMP" 'gauche.net)
(hash-table-put! %s->m% "string-upcase" 'text.unicode)
(hash-table-put! %s->m% "dict-fold-right" 'gauche.dictionary)
(hash-table-put! %s->m% "char-set-xor!" 'srfi-14)
(hash-table-put! %s->m% "sys-htonl" 'gauche.net)
(hash-table-put! %s->m% "x->lseq" 'gauche.lazy)
(hash-table-put! %s->m% "date-year" 'srfi-19)
(hash-table-put! %s->m% "rotate-bit-field" 'srfi-60)
(hash-table-put! %s->m% "vector->posix-tm" 'compat.stk)
(hash-table-put! %s->m% "html:ins" 'text.html-lite)
(hash-table-put! %s->m% "file-mode" 'file.util)
(hash-table-put! %s->m% "<s8vector>" 'gauche.uvector)
(hash-table-put! %s->m% "f16vector-add!" 'gauche.uvector)
(hash-table-put! %s->m% "sxml:equal?" 'sxml.sxpath)
(hash-table-put! %s->m% "<sockaddr-in6>" 'gauche.net)
(hash-table-put! %s->m% "string-hash" 'srfi-13)
(hash-table-put! %s->m% "<serializer>" 'gauche.serializer)
(hash-table-put! %s->m% "sort!" 'gauche.sortutil)
(hash-table-put! %s->m% "get-f16be" 'binary.io)
(hash-table-put! %s->m% "cgi-parse-parameters" 'www.cgi)
(hash-table-put! %s->m% "<sockaddr-un>" 'gauche.net)
(hash-table-put! %s->m% "char-set-adjoin!" 'srfi-14)
(hash-table-put! %s->m% "write-binary-sint32" 'binary.io)
(hash-table-put! %s->m% "time-tai->time-monotonic!" 'srfi-19)
(hash-table-put! %s->m% "stream-memq" 'util.stream)
(hash-table-put! %s->m% "time=?" 'srfi-19)
(hash-table-put! %s->m% "json-parser" 'rfc.json)
(hash-table-put! %s->m% "<time-result>" 'gauche.time)
(hash-table-put! %s->m% "ICMP6_EXC_REASSEMBLY" 'rfc.icmp)
(hash-table-put! %s->m% "http-compose-form-data" 'rfc.http)
(hash-table-put! %s->m% "sxml:add-parents" 'sxml.tools)
(hash-table-put! %s->m% "peek-next-char" 'text.parse)
(hash-table-put! %s->m% "sys-logmask" 'gauche.syslog)
(hash-table-put! %s->m% "dbm-get" 'dbm)
(hash-table-put! %s->m% "shuffle!" 'gauche.sequence)
(hash-table-put! %s->m% "node-reduce" 'sxml.sxpath)
(hash-table-put! %s->m% "sys-cfsetospeed" 'gauche.termios)
(hash-table-put! %s->m% "string-pad" 'srfi-13)
(hash-table-put! %s->m% "ECHONL" 'gauche.termios)
(hash-table-put! %s->m% "make-char-quotator" 'sxml.adaptor)
(hash-table-put! %s->m% "s64vector->vector" 'gauche.uvector)
(hash-table-put! %s->m% "sha224-digest-string" 'rfc.sha)
(hash-table-put! %s->m% "get-u32be" 'binary.io)
(hash-table-put! %s->m% "library-for-each" 'gauche.libutil)
(hash-table-put! %s->m% "f64vector-mul" 'gauche.uvector)
(hash-table-put! %s->m% "html:button" 'text.html-lite)
(hash-table-put! %s->m% "IP_MULTICAST_IF" 'gauche.net)
(hash-table-put! %s->m% "u8vector-length" 'gauche.uvector)
(hash-table-put! %s->m% "gauche-package-compile" 'gauche.package.compile)
(hash-table-put! %s->m% "string-foldcase" 'text.unicode)
(hash-table-put! %s->m% "socket-connect" 'gauche.net)
(hash-table-put! %s->m% "Z_BEST_SPEED" 'rfc.zlib)
(hash-table-put! %s->m% "modified-julian-day->time-utc" 'srfi-19)
(hash-table-put! %s->m% "ICMP4_SEC_DECOMPFAILED" 'rfc.icmp)
(hash-table-put! %s->m% "IP_PKTINFO" 'gauche.net)
(hash-table-put! %s->m% "<thread-pool>" 'control.thread-pool)
(hash-table-put! %s->m% "relation-coercer" 'util.relation)
(hash-table-put! %s->m% "sxml:change-content!" 'sxml.tools)
(hash-table-put! %s->m% "make-u32array" 'gauche.array)
(hash-table-put! %s->m% "u64vector-range-check" 'gauche.uvector)
(hash-table-put! %s->m% "ftype:slot" 'binary.ftype)
(hash-table-put! %s->m% "tree-map-for-each" 'gauche.treeutil)
(hash-table-put! %s->m% "rbtree-update!" 'util.rbtree)
(hash-table-put! %s->m% "vector-index-right" 'srfi-43)
(hash-table-put! %s->m% "PF_UNSPEC" 'gauche.net)
(hash-table-put! %s->m% "<zlib-error>" 'rfc.zlib)
(hash-table-put! %s->m% "queue-pop/wait!" 'util.queue)
(hash-table-put! %s->m% "fobject-ref" 'binary.ftype)
(hash-table-put! %s->m% "dbi-close" 'dbi)
(hash-table-put! %s->m% "ICMP4_PREC_CUTOFF" 'rfc.icmp)
(hash-table-put! %s->m% "stream->number" 'util.stream)
(hash-table-put! %s->m% "vector-of-length-ec" 'srfi-42)
(hash-table-put! %s->m% "f32vector-set!" 'gauche.uvector)
(hash-table-put! %s->m% "html:th" 'text.html-lite)
(hash-table-put! %s->m% "sxml:name->ns-id" 'sxml.tools)
(hash-table-put! %s->m% "arity-at-least-value" 'gauche.procedure)
(hash-table-put! %s->m% "array-shape" 'gauche.array)
(hash-table-put! %s->m% "B110" 'gauche.termios)
(hash-table-put! %s->m% "rtd-all-field-names" 'gauche.record)
(hash-table-put! %s->m% "nl" 'sxml.adaptor)
(hash-table-put! %s->m% "glob-component->regexp" 'gauche.fileutil)
(hash-table-put! %s->m% "html:sup" 'text.html-lite)
(hash-table-put! %s->m% "ssax:skip-internal-dtd" 'sxml.ssax)
(hash-table-put! %s->m% "cgen-c-name" 'gauche.cgen.literal)
(hash-table-put! %s->m% "mtqueue-max-length" 'util.queue)
(hash-table-put! %s->m% "stream-partition" 'util.stream)
(hash-table-put! %s->m% "provide" 'slib)
(hash-table-put! %s->m% "fobject" 'binary.ftype)
(hash-table-put! %s->m% "ICMP4_DOMAIN_REQUEST" 'rfc.icmp)
(hash-table-put! %s->m% "F_WRLCK" 'gauche.fcntl)
(hash-table-put! %s->m% "put-u32le!" 'binary.io)
(hash-table-put! %s->m% "s32vector-ior!" 'gauche.uvector)
(hash-table-put! %s->m% "job-run!" 'control.job)
(hash-table-put! %s->m% "TCSADRAIN" 'gauche.termios)
(hash-table-put! %s->m% "dbi-make-driver" 'dbi)
(hash-table-put! %s->m% "defmacro" 'slib)
(hash-table-put! %s->m% "vector->u16vector" 'gauche.uvector)
(hash-table-put! %s->m% "Z_FIXED" 'rfc.zlib)
(hash-table-put! %s->m% "OPOST" 'gauche.termios)
(hash-table-put! %s->m% "home-directory" 'file.util)
(hash-table-put! %s->m% "lazy-size-of" 'util.trie)
(hash-table-put! %s->m% "MSG_TRUNC" 'gauche.net)
(hash-table-put! %s->m% "sys-fcntl" 'gauche.fcntl)
(hash-table-put! %s->m% "html-doctype" 'text.html-lite)
(hash-table-put! %s->m% "test*" 'gauche.test)
(hash-table-put! %s->m% "&condition" 'gauche.condutil)
(hash-table-put! %s->m% "call-with-open-ports" 'slib)
(hash-table-put! %s->m% "IGNPAR" 'gauche.termios)
(hash-table-put! %s->m% "sparse-table-set!" 'util.sparse)
(hash-table-put! %s->m% "version>=?" 'gauche.version)
(hash-table-put! %s->m% "posix-mktime" 'compat.stk)
(hash-table-put! %s->m% "stream-first" 'util.stream)
(hash-table-put! %s->m% "address-of" 'compat.stk)
(hash-table-put! %s->m% "dbm-db-rename" 'dbm)
(hash-table-put! %s->m% "u64vector-add" 'gauche.uvector)
(hash-table-put! %s->m% "second" 'srfi-1)
(hash-table-put! %s->m% "lset-diff+intersection!" 'srfi-1)
(hash-table-put! %s->m% "sorted?" 'gauche.sortutil)
(hash-table-put! %s->m% "cgen-decl" 'gauche.cgen.unit)
(hash-table-put! %s->m% "write-binary-sint" 'binary.io)
(hash-table-put! %s->m% "trie-common-prefix-values" 'util.trie)
(hash-table-put! %s->m% "determinant" 'gauche.array)
(hash-table-put! %s->m% "sys-setuid" 'gauche.auxsys)
(hash-table-put! %s->m% "instance-pool:find" 'gauche.mop.instance-pool)
(hash-table-put! %s->m% "output-string-port?" 'compat.stk)
(hash-table-put! %s->m% "dbm-open" 'dbm)
(hash-table-put! %s->m% "process-send-signal" 'gauche.process)
(hash-table-put! %s->m% "ucscode->char" 'sxml.adaptor)
(hash-table-put! %s->m% "ECHO" 'gauche.termios)
(hash-table-put! %s->m% "take-while" 'srfi-1)
(hash-table-put! %s->m% "s64vector->list" 'gauche.uvector)
(hash-table-put! %s->m% "f16vector-mul!" 'gauche.uvector)
(hash-table-put! %s->m% "IP_MULTICAST_LOOP" 'gauche.net)
(hash-table-put! %s->m% "u8vector?" 'gauche.uvector)
(hash-table-put! %s->m% "PARODD" 'gauche.termios)
(hash-table-put! %s->m% "instance-pool:map" 'gauche.mop.instance-pool)
(hash-table-put! %s->m% "make-u64array" 'gauche.array)
(hash-table-put! %s->m% "find" 'gauche.collection)
(hash-table-put! %s->m% "xml-token?" 'sxml.ssax)
(hash-table-put! %s->m% "TCP_CORK" 'gauche.net)
(hash-table-put! %s->m% "digest-hexify" 'util.digest)
(hash-table-put! %s->m% "read-binary-short" 'binary.io)
(hash-table-put! %s->m% "s64vector-range-check" 'gauche.uvector)
(hash-table-put! %s->m% "delete-hook!" 'gauche.hook)
(hash-table-put! %s->m% "unzip4" 'srfi-1)
(hash-table-put! %s->m% "ftp-name-list" 'rfc.ftp)
(hash-table-put! %s->m% "tree-map->alist" 'gauche.treeutil)
(hash-table-put! %s->m% "rfc822-invalid-header-field" 'rfc.822)
(hash-table-put! %s->m% "gappend" 'gauche.generator)
(hash-table-put! %s->m% "$none-of" 'parser.peg)
(hash-table-put! %s->m% "member" 'srfi-1)
(hash-table-put! %s->m% "condition-variable-broadcast!" 'gauche.threads)
(hash-table-put! %s->m% "instance-pool->list" 'gauche.mop.instance-pool)
(hash-table-put! %s->m% "read-fobject!/uv" 'binary.ftype)
(hash-table-put! %s->m% "address?" 'compat.stk)
(hash-table-put! %s->m% "html:code" 'text.html-lite)
(hash-table-put! %s->m% "substring-spec-ok?" 'srfi-13)
(hash-table-put! %s->m% "ref*" 'gauche.procedure)
(hash-table-put! %s->m% "put-f16le!" 'binary.io)
(hash-table-put! %s->m% "f32vector" 'gauche.uvector)
(hash-table-put! %s->m% "combinations*" 'util.combinations)
(hash-table-put! %s->m% "B0" 'gauche.termios)
(hash-table-put! %s->m% "ftype:uint8" 'binary.ftype)
(hash-table-put! %s->m% "match-let" 'util.match)
(hash-table-put! %s->m% "not-pair?" 'srfi-1)
(hash-table-put! %s->m% "sys-stat->mode" 'gauche.fileutil)
(hash-table-put! %s->m% "ssax:skip-pi" 'sxml.ssax)
(hash-table-put! %s->m% "char-set:blank" 'srfi-14)
(hash-table-put! %s->m% "rfc822-quoted-string" 'rfc.822)
(hash-table-put! %s->m% "sparse-vector-clear!" 'util.sparse)
(hash-table-put! %s->m% "$optional" 'parser.peg)
(hash-table-put! %s->m% "cgen-precompile" 'gauche.cgen.precomp)
(hash-table-put! %s->m% "file-ctime>=?" 'file.util)
(hash-table-put! %s->m% "string-concatenate-reverse/shared" 'srfi-13)
(hash-table-put! %s->m% "<s16array>" 'gauche.array)
(hash-table-put! %s->m% "mime-parse-content-type" 'rfc.mime)
(hash-table-put! %s->m% "s32vector-and" 'gauche.uvector)
(hash-table-put! %s->m% "IFF_DYNAMIC" 'gauche.net)
(hash-table-put! %s->m% "bimap-left-get" 'gauche.dictionary)
(hash-table-put! %s->m% "list->u16vector" 'gauche.uvector)
(hash-table-put! %s->m% "date->time-monotonic" 'srfi-19)
(hash-table-put! %s->m% "<sparse-s16vector>" 'util.sparse)
(hash-table-put! %s->m% "make-peg-parse-error" 'parser.peg)
(hash-table-put! %s->m% "IXANY" 'gauche.termios)
(hash-table-put! %s->m% "rassoc" 'util.list)
(hash-table-put! %s->m% "file-ctime" 'file.util)
(hash-table-put! %s->m% "LOG_ODELAY" 'gauche.syslog)
(hash-table-put! %s->m% "VEOF" 'gauche.termios)
(hash-table-put! %s->m% "html:hr" 'text.html-lite)
(hash-table-put! %s->m% "MSG_EOR" 'gauche.net)
(hash-table-put! %s->m% "string-index" 'compat.stk)
(hash-table-put! %s->m% "html:map" 'text.html-lite)
(hash-table-put! %s->m% "report:print" 'slib)
(hash-table-put! %s->m% "<cgi-request-method-error>" 'www.cgi)
(hash-table-put! %s->m% "<sys-hostent>" 'gauche.net)
(hash-table-put! %s->m% "&error" 'gauche.condutil)
(hash-table-put! %s->m% "write-binary-float" 'binary.io)
(hash-table-put! %s->m% "write-stream" 'util.stream)
(hash-table-put! %s->m% "subtract-duration!" 'srfi-19)
(hash-table-put! %s->m% "time-counter-reset!" 'gauche.time)
(hash-table-put! %s->m% "bitwise-not" 'srfi-60)
(hash-table-put! %s->m% "file-filter" 'file.filter)
(hash-table-put! %s->m% "posix-time" 'compat.stk)
(hash-table-put! %s->m% "icmp-packet-code" 'rfc.icmp)
(hash-table-put! %s->m% "path-extension" 'file.util)
(hash-table-put! %s->m% "diff" 'text.diff)
(hash-table-put! %s->m% "dbm-db-exists?" 'dbm)
(hash-table-put! %s->m% "random-source-pseudo-randomize!" 'srfi-27)
(hash-table-put! %s->m% "u32vector-add!" 'gauche.uvector)
(hash-table-put! %s->m% "bcrypt-hashpw" 'crypt.bcrypt)
(hash-table-put! %s->m% "string>" 'srfi-13)
(hash-table-put! %s->m% "sort-by" 'gauche.sortutil)
(hash-table-put! %s->m% "logxor" 'srfi-60)
(hash-table-put! %s->m% "make-gettext" 'text.gettext)
(hash-table-put! %s->m% "selector-delete!" 'gauche.selector)
(hash-table-put! %s->m% "path->gauche-package-description" 'gauche.package)
(hash-table-put! %s->m% "socket-sendto" 'gauche.net)
(hash-table-put! %s->m% "trie-update!" 'util.trie)
(hash-table-put! %s->m% "time-utc->modified-julian-day" 'srfi-19)
(hash-table-put! %s->m% "time-resolution" 'srfi-19)
(hash-table-put! %s->m% "random" 'compat.stk)
(hash-table-put! %s->m% "drop-right!" 'srfi-1)
(hash-table-put! %s->m% "<f64vector>" 'gauche.uvector)
(hash-table-put! %s->m% "ICMP6_ECHOREPLY" 'rfc.icmp)
(hash-table-put! %s->m% "sxml:set-attr" 'sxml.tools)
(hash-table-put! %s->m% "for-each-with-index" 'gauche.sequence)
(hash-table-put! %s->m% "string-any" 'srfi-13)
(hash-table-put! %s->m% "s64vector-set!" 'gauche.uvector)
(hash-table-put! %s->m% "get-s8" 'binary.io)
(hash-table-put! %s->m% "html:form" 'text.html-lite)
(hash-table-put! %s->m% "u64vector-mul" 'gauche.uvector)
(hash-table-put! %s->m% "IP_MTU_DISCOVER" 'gauche.net)
(hash-table-put! %s->m% "gentemp" 'slib)
(hash-table-put! %s->m% "gdrop" 'gauche.generator)
(hash-table-put! %s->m% "s8vector-fill!" 'gauche.uvector)
(hash-table-put! %s->m% "CSTOPB" 'gauche.termios)
(hash-table-put! %s->m% "reverse-vector->list" 'srfi-43)
(hash-table-put! %s->m% "cond-list" 'util.list)
(hash-table-put! %s->m% "utf16->ucs4" 'text.unicode)
(hash-table-put! %s->m% "SHUT_WR" 'gauche.net)
(hash-table-put! %s->m% "zstream-total-out" 'rfc.zlib)
(hash-table-put! %s->m% "instance-pool:remove!" 'gauche.mop.instance-pool)
(hash-table-put! %s->m% "ssax:S-chars" 'sxml.ssax)
(hash-table-put! %s->m% "SOL_TCP" 'gauche.net)
(hash-table-put! %s->m% "ICMP4_EXC_TTL" 'rfc.icmp)
(hash-table-put! %s->m% "cgen-emit-decl" 'gauche.cgen.unit)
(hash-table-put! %s->m% "relation-column-names" 'util.relation)
(hash-table-put! %s->m% "sxml:attr-u" 'sxml.tools)
(hash-table-put! %s->m% "array-retabulate!" 'gauche.array)
(hash-table-put! %s->m% "open-output-uvector" 'gauche.vport)
(hash-table-put! %s->m% "u32vector-range-check" 'gauche.uvector)
(hash-table-put! %s->m% "LOG_INFO" 'gauche.syslog)
(hash-table-put! %s->m% "srl:sxml->string" 'sxml.serializer)
(hash-table-put! %s->m% "vector-empty?" 'srfi-43)
(hash-table-put! %s->m% "log-open" 'gauche.logger)
(hash-table-put! %s->m% "ntype-namespace-id??" 'sxml.sxpath)
(hash-table-put! %s->m% "queue-rear" 'util.queue)
(hash-table-put! %s->m% "srfi-42-generator-proc" 'srfi-42)
(hash-table-put! %s->m% "fobject-copy!/uv" 'binary.ftype)
(hash-table-put! %s->m% "ICMP4_NET_UNKNOWN" 'rfc.icmp)
(hash-table-put! %s->m% "O_ACCMODE" 'gauche.fcntl)
(hash-table-put! %s->m% "sxml:empty-element?" 'sxml.tools)
(hash-table-put! %s->m% "generator-for-each" 'gauche.procedure)
(hash-table-put! %s->m% "vector->f16vector" 'gauche.uvector)
(hash-table-put! %s->m% "<record-meta>" 'gauche.record)
(hash-table-put! %s->m% "<dbi-result-set>" 'dbi)
(hash-table-put! %s->m% "sys-stat->rdev" 'gauche.fileutil)
(hash-table-put! %s->m% "char-set:iso-control" 'srfi-14)
(hash-table-put! %s->m% "use-version" 'gauche.modutil)
(hash-table-put! %s->m% "http-post" 'rfc.http)
(hash-table-put! %s->m% "resolve-path" 'file.util)
(hash-table-put! %s->m% "stream-butlast" 'util.stream)
(hash-table-put! %s->m% "mt-random-fill-f64vector!" 'math.mt-random)
(hash-table-put! %s->m% "ICMP4_PARAMETERPROB" 'rfc.icmp)
(hash-table-put! %s->m% "stream-filter" 'util.stream)
(hash-table-put! %s->m% "put-f32!" 'binary.io)
(hash-table-put! %s->m% "u16vector-ior!" 'gauche.uvector)
(hash-table-put! %s->m% "IFF_MULTICAST" 'gauche.net)
(hash-table-put! %s->m% "sys-unsetenv" 'gauche.auxsys)
(hash-table-put! %s->m% "<bimap>" 'gauche.dictionary)
(hash-table-put! %s->m% "u16vector-copy" 'gauche.uvector)
(hash-table-put! %s->m% "condition-type?" 'gauche.condutil)
(hash-table-put! %s->m% "ICRNL" 'gauche.termios)
(hash-table-put! %s->m% "array-div-elements!" 'gauche.array)
(hash-table-put! %s->m% "sparse-table-for-each" 'util.sparse)
(hash-table-put! %s->m% "sort" 'gauche.sortutil)
(hash-table-put! %s->m% "trie-with-keys" 'util.trie)
(hash-table-put! %s->m% "LOG_CONS" 'gauche.syslog)
(hash-table-put! %s->m% "thread-specific" 'gauche.threads)
(hash-table-put! %s->m% "fold2$" 'gauche.collection)
(hash-table-put! %s->m% "sxml:child" 'sxml.sxpath)
(hash-table-put! %s->m% "html:b" 'text.html-lite)
(hash-table-put! %s->m% "ftp-remove" 'rfc.ftp)
(hash-table-put! %s->m% "f64vector-swap-bytes!" 'gauche.uvector)
(hash-table-put! %s->m% "cgen-unbox-expr" 'gauche.cgen.type)
(hash-table-put! %s->m% "cgen-emit-static-data" 'gauche.cgen.unit)
(hash-table-put! %s->m% "user-vicinity" 'slib)
(hash-table-put! %s->m% "slib:tab" 'slib)
(hash-table-put! %s->m% "quoted-printable-encode" 'rfc.quoted-printable)
(hash-table-put! %s->m% "&i/o-read-error" 'gauche.condutil)
(hash-table-put! %s->m% "reload-modified-modules" 'gauche.reload)
(hash-table-put! %s->m% "make-text-progress-bar" 'text.progress)
(hash-table-put! %s->m% "array-add-elements" 'gauche.array)
(hash-table-put! %s->m% "stream-delay" 'util.stream)
(hash-table-put! %s->m% "html:script" 'text.html-lite)
(hash-table-put! %s->m% "stream-cdaadr" 'util.stream)
(hash-table-put! %s->m% "procedure-environment" 'compat.stk)
(hash-table-put! %s->m% "SRV:send-reply" 'sxml.tree-trans)
(hash-table-put! %s->m% "with-output-to-process" 'gauche.process)
(hash-table-put! %s->m% "dbm-exists?" 'dbm)
(hash-table-put! %s->m% "s32vector-add" 'gauche.uvector)
(hash-table-put! %s->m% "output-serializer?" 'gauche.serializer)
(hash-table-put! %s->m% "compose" 'gauche.procedure)
(hash-table-put! %s->m% "stable-sort-by!" 'gauche.sortutil)
(hash-table-put! %s->m% "call-with-input-conversion" 'gauche.charconv)
(hash-table-put! %s->m% "lset-union" 'srfi-1)
(hash-table-put! %s->m% "lognot" 'srfi-60)
(hash-table-put! %s->m% "array-transpose" 'gauche.array)
(hash-table-put! %s->m% "expand-heap" 'compat.stk)
(hash-table-put! %s->m% "cv-string" 'compat.jfilter)
(hash-table-put! %s->m% "<f16vector-meta>" 'gauche.uvector)
(hash-table-put! %s->m% "catch" 'compat.stk)
(hash-table-put! %s->m% "process-alive?" 'gauche.process)
(hash-table-put! %s->m% "NI_NUMERICSERV" 'gauche.net)
(hash-table-put! %s->m% "map!" 'srfi-1)
(hash-table-put! %s->m% "rbtree-extract-max!" 'util.rbtree)
(hash-table-put! %s->m% "u32vector-mul!" 'gauche.uvector)
(hash-table-put! %s->m% "s64vector" 'gauche.uvector)
(hash-table-put! %s->m% "IP_TTL" 'gauche.net)
(hash-table-put! %s->m% "diff-report" 'text.diff)
(hash-table-put! %s->m% "gfilter" 'gauche.generator)
(hash-table-put! %s->m% "s8vector-copy!" 'gauche.uvector)
(hash-table-put! %s->m% "CS6" 'gauche.termios)
(hash-table-put! %s->m% "copy-bit" 'srfi-60)
(hash-table-put! %s->m% "B115200" 'gauche.termios)
(hash-table-put! %s->m% "SO_SNDTIMEO" 'gauche.net)
(hash-table-put! %s->m% "run-cgi-script->string-list" 'www.cgi.test)
(hash-table-put! %s->m% "read-binary-uint8" 'binary.io)
(hash-table-put! %s->m% "cartesian-product-right" 'util.combinations)
(hash-table-put! %s->m% "ftype" 'binary.ftype)
(hash-table-put! %s->m% "s32vector-range-check" 'gauche.uvector)
(hash-table-put! %s->m% "uri-compose" 'rfc.uri)
(hash-table-put! %s->m% "car+cdr" 'srfi-1)
(hash-table-put! %s->m% "write-s16" 'binary.io)
(hash-table-put! %s->m% "slib:load-source" 'slib)
(hash-table-put! %s->m% "$chain-right" 'parser.peg)
(hash-table-put! %s->m% "ucs-range->char-set!" 'srfi-14)
(hash-table-put! %s->m% "read-f64" 'binary.io)
(hash-table-put! %s->m% "file->string-list" 'file.util)
(hash-table-put! %s->m% "stream-span" 'util.stream)
(hash-table-put! %s->m% "LOG_SYSLOG" 'gauche.syslog)
(hash-table-put! %s->m% "mutex-unlocker" 'gauche.threads)
(hash-table-put! %s->m% "make-fobject" 'binary.ftype)
(hash-table-put! %s->m% "html:h3" 'text.html-lite)
(hash-table-put! %s->m% "string-xcopy!" 'srfi-13)
(hash-table-put! %s->m% "ssax:assert-token" 'sxml.ssax)
(hash-table-put! %s->m% "srfi-42-while" 'srfi-42)
(hash-table-put! %s->m% "O_RDWR" 'gauche.fcntl)
(hash-table-put! %s->m% "rxmatch-let" 'gauche.regexp)
(hash-table-put! %s->m% "list->f16vector" 'gauche.uvector)
(hash-table-put! %s->m% "mime-retrieve-body" 'rfc.mime)
(hash-table-put! %s->m% "ftype:int" 'binary.ftype)
(hash-table-put! %s->m% "tls-input-port" 'rfc.tls)
(hash-table-put! %s->m% "sys-stat->uid" 'gauche.fileutil)
(hash-table-put! %s->m% "html:ul" 'text.html-lite)
(hash-table-put! %s->m% "char-set:letter+digit" 'srfi-14)
(hash-table-put! %s->m% "current-language" 'srfi-29.bundle)
(hash-table-put! %s->m% "ldexp" 'gauche.auxsys)
(hash-table-put! %s->m% "rfc822-read-headers" 'rfc.822)
(hash-table-put! %s->m% "string->generator" 'gauche.generator)
(hash-table-put! %s->m% "$<<" 'parser.peg)
(hash-table-put! %s->m% "assv-ref" 'util.list)
(hash-table-put! %s->m% "string-interpolate" 'gauche.interpolate)
(hash-table-put! %s->m% "file-atime=?" 'file.util)
(hash-table-put! %s->m% "sxml:child-elements" 'sxml.sxpath)
(hash-table-put! %s->m% "VQUIT" 'gauche.termios)
(hash-table-put! %s->m% "char-set=" 'srfi-14)
(hash-table-put! %s->m% "string-upcase!" 'srfi-13)
(hash-table-put! %s->m% "F_GETFL" 'gauche.fcntl)
(hash-table-put! %s->m% "u16vector-and" 'gauche.uvector)
(hash-table-put! %s->m% "IFF_ALLMULTI" 'gauche.net)
(hash-table-put! %s->m% "u16vector-length" 'gauche.uvector)
(hash-table-put! %s->m% "sys-htons" 'gauche.net)
(hash-table-put! %s->m% "extract-condition" 'gauche.condutil)
(hash-table-put! %s->m% "slib:eval-load" 'slib)
(hash-table-put! %s->m% "date-zone-offset" 'srfi-19)
(hash-table-put! %s->m% "ISTRIP" 'gauche.termios)
(hash-table-put! %s->m% "reverse-bit-field" 'srfi-60)
(hash-table-put! %s->m% "alist-delete" 'srfi-1)
(hash-table-put! %s->m% "posix-strftime" 'compat.stk)
(hash-table-put! %s->m% "ssax:reverse-collect-str-drop-ws" 'sxml.ssax)
(hash-table-put! %s->m% "html:del" 'text.html-lite)
(hash-table-put! %s->m% "file-ino" 'file.util)
(hash-table-put! %s->m% "stream-sixth" 'util.stream)
(hash-table-put! %s->m% "cise-render" 'gauche.cgen.cise)
(hash-table-put! %s->m% "f32vector-swap-bytes" 'gauche.uvector)
(hash-table-put! %s->m% "string-hash-ci" 'srfi-13)
(hash-table-put! %s->m% "srfi-42-vector" 'srfi-42)
(hash-table-put! %s->m% "write-to-serializer" 'gauche.serializer)
(hash-table-put! %s->m% "get-f16le" 'binary.io)
(hash-table-put! %s->m% "in-vicinity" 'slib)
(hash-table-put! %s->m% "cgi-get-parameter" 'www.cgi)
(hash-table-put! %s->m% "base64-encode" 'rfc.base64)
(hash-table-put! %s->m% "make-sockaddrs" 'gauche.net)
(hash-table-put! %s->m% "write-binary-sint64" 'binary.io)
(hash-table-put! %s->m% "describe" 'gauche.interactive)
(hash-table-put! %s->m% "time-tai->time-utc" 'srfi-19)
(hash-table-put! %s->m% "stream-memv" 'util.stream)
(hash-table-put! %s->m% "time<?" 'srfi-19)
(hash-table-put! %s->m% "split-at*" 'util.list)
(hash-table-put! %s->m% "time-result+" 'gauche.time)
(hash-table-put! %s->m% "posix-unlink" 'compat.stk)
(hash-table-put! %s->m% "icmp6-parameter-code->string" 'rfc.icmp)
(hash-table-put! %s->m% "http-proxy" 'rfc.http)
(hash-table-put! %s->m% "ssax:ncname-starting-char?" 'sxml.ssax)
(hash-table-put! %s->m% "sxml:lookup" 'sxml.tools)
(hash-table-put! %s->m% "next-token" 'text.parse)
(hash-table-put! %s->m% "pa$" 'gauche.procedure)
(hash-table-put! %s->m% "sys-setlogmask" 'gauche.syslog)
(hash-table-put! %s->m% "s16vector-add!" 'gauche.uvector)
(hash-table-put! %s->m% "node-or" 'sxml.sxpath)
(hash-table-put! %s->m% "--" 'sxml.adaptor)
(hash-table-put! %s->m% "<rbtree>" 'util.rbtree)
(hash-table-put! %s->m% "string-pad-right" 'srfi-13)
(hash-table-put! %s->m% "<sha256>" 'rfc.sha)
(hash-table-put! %s->m% "get-u32le" 'binary.io)
(hash-table-put! %s->m% "codepoints-upcase" 'text.unicode)
(hash-table-put! %s->m% "socket-fd" 'gauche.net)
(hash-table-put! %s->m% "gauche-package-link" 'gauche.package.compile)
(hash-table-put! %s->m% "time-monotonic->date" 'srfi-19)
(hash-table-put! %s->m% "Z_BEST_COMPRESSION" 'rfc.zlib)
(hash-table-put! %s->m% "take" 'srfi-1)
(hash-table-put! %s->m% "rename-file" 'compat.stk)
(hash-table-put! %s->m% "<thread-pool-shut-down>" 'control.thread-pool)
(hash-table-put! %s->m% "ICMP4_SEC_DECRYPTFAILED" 'rfc.icmp)
(hash-table-put! %s->m% "relation-column-getters" 'util.relation)
(hash-table-put! %s->m% "sxml:change-content" 'sxml.tools)
(hash-table-put! %s->m% "NI_NOFQDN" 'gauche.net)
(hash-table-put! %s->m% "rbtree-min" 'util.rbtree)
(hash-table-put! %s->m% "vector->u32vector" 'gauche.uvector)
(hash-table-put! %s->m% "version" 'compat.stk)
(hash-table-put! %s->m% "s32vector-mul" 'gauche.uvector)
(hash-table-put! %s->m% "IP_RECVTTL" 'gauche.net)
(hash-table-put! %s->m% "atom-ref" 'gauche.threads)
(hash-table-put! %s->m% "slib:load" 'slib)
(hash-table-put! %s->m% "CREAD" 'gauche.termios)
(hash-table-put! %s->m% "vector-skip" 'srfi-43)
(hash-table-put! %s->m% "giota" 'gauche.generator)
(hash-table-put! %s->m% "PF_UNIX" 'gauche.net)
(hash-table-put! %s->m% "<zlib-need-dict-error>" 'rfc.zlib)
(hash-table-put! %s->m% "make-queue" 'util.queue)
(hash-table-put! %s->m% "<instance-pool-meta>" 'gauche.mop.instance-pool)
(hash-table-put! %s->m% "fobject-set!" 'binary.ftype)
(hash-table-put! %s->m% "instance-pool-for-each" 'gauche.mop.instance-pool)
(hash-table-put! %s->m% "dbi-prepare" 'dbi)
(hash-table-put! %s->m% "icmp4-redirect-code->string" 'rfc.icmp)
(hash-table-put! %s->m% "symbol->stream" 'util.stream)
(hash-table-put! %s->m% "SO_REUSEADDR" 'gauche.net)
(hash-table-put! %s->m% "array-length" 'gauche.array)
(hash-table-put! %s->m% "html:td" 'text.html-lite)
(hash-table-put! %s->m% "sxml:content" 'sxml.tools)
(hash-table-put! %s->m% "rtd-field-mutable?" 'gauche.record)
(hash-table-put! %s->m% "u16vector-range-check" 'gauche.uvector)
(hash-table-put! %s->m% "html:span" 'text.html-lite)
(hash-table-put! %s->m% "ftp-size" 'rfc.ftp)
(hash-table-put! %s->m% "cgen-cexpr" 'gauche.cgen.literal)
(hash-table-put! %s->m% "isomorphic?" 'util.isomorph)
(hash-table-put! %s->m% "mtqueue-room" 'util.queue)
(hash-table-put! %s->m% "LOG_LPR" 'gauche.syslog)
(hash-table-put! %s->m% "with-locking-mutex" 'gauche.threads)
(hash-table-put! %s->m% "ssax:scan-Misc" 'sxml.ssax)
(hash-table-put! %s->m% "ICMP4_DOMAIN_REPLY" 'rfc.icmp)
(hash-table-put! %s->m% "char-set-map" 'srfi-14)
(hash-table-put! %s->m% "digest-final!" 'util.digest)
(hash-table-put! %s->m% "put-u64be!" 'binary.io)
(hash-table-put! %s->m% "f16vector-copy" 'gauche.uvector)
(hash-table-put! %s->m% "job-mark-killed!" 'control.job)
(hash-table-put! %s->m% "dbi-prepare-sql" 'dbi)
(hash-table-put! %s->m% "sys-stat->mtime" 'gauche.fileutil)
(hash-table-put! %s->m% "fmod" 'gauche.auxsys)
(hash-table-put! %s->m% "trie-for-each" 'util.trie)
(hash-table-put! %s->m% "temporary-directory" 'file.util)
(hash-table-put! %s->m% "thread-stop!" 'gauche.threads)
(hash-table-put! %s->m% "coerce-to" 'gauche.collection)
(hash-table-put! %s->m% "<mersenne-twister>" 'math.mt-random)
(hash-table-put! %s->m% "icmp4-message-type->string" 'rfc.icmp)
(hash-table-put! %s->m% "s16vector-ior!" 'gauche.uvector)
(hash-table-put! %s->m% "IFF_NOARP" 'gauche.net)
(hash-table-put! %s->m% "u16vector?" 'gauche.uvector)
(hash-table-put! %s->m% "test-start" 'gauche.test)
(hash-table-put! %s->m% "for-each" 'gauche.collection)
(hash-table-put! %s->m% "posix-tm->vector" 'compat.stk)
(hash-table-put! %s->m% "sparse-table-exists?" 'util.sparse)
(hash-table-put! %s->m% "stream-second" 'util.stream)
(hash-table-put! %s->m% "dbm-type->class" 'dbm)
(hash-table-put! %s->m% "call-with-iterator" 'util.trie)
(hash-table-put! %s->m% "u64vector-swap-bytes!" 'gauche.uvector)
(hash-table-put! %s->m% "attlist->alist" 'sxml.ssax)
(hash-table-put! %s->m% "get-s64be" 'binary.io)
(hash-table-put! %s->m% "cgen-body" 'gauche.cgen.unit)
(hash-table-put! %s->m% "char-set-adjoin" 'srfi-14)
(hash-table-put! %s->m% "sum-ec" 'srfi-42)
(hash-table-put! %s->m% "trie-common-prefix-fold" 'util.trie)
(hash-table-put! %s->m% "listener-show-prompt" 'gauche.listener)
(hash-table-put! %s->m% "open-input-virtual" 'compat.stk)
(hash-table-put! %s->m% "process-kill" 'gauche.process)
(hash-table-put! %s->m% "apply$" 'gauche.procedure)
(hash-table-put! %s->m% "u8vector-add" 'gauche.uvector)
(hash-table-put! %s->m% "char-return" 'sxml.adaptor)
(hash-table-put! %s->m% "match:error" 'util.match)
(hash-table-put! %s->m% "open-input-conversion-port" 'gauche.charconv)
(hash-table-put! %s->m% "drop-while" 'srfi-1)
(hash-table-put! %s->m% "html:body" 'text.html-lite)
(hash-table-put! %s->m% "tree-walk" 'util.tree)
(hash-table-put! %s->m% "make-s64array" 'gauche.array)
(hash-table-put! %s->m% "read-binary-ushort" 'binary.io)
(hash-table-put! %s->m% "ftype-putter" 'binary.ftype)
(hash-table-put! %s->m% "reset-hook!" 'gauche.hook)
(hash-table-put! %s->m% "AI_V4MAPPED" 'gauche.net)
(hash-table-put! %s->m% "list->u32vector" 'gauche.uvector)
(hash-table-put! %s->m% "unzip5" 'srfi-1)
(hash-table-put! %s->m% "s16vector-mul!" 'gauche.uvector)
(hash-table-put! %s->m% "rfc822-write-headers" 'rfc.822)
(hash-table-put! %s->m% "slib:load-compiled" 'slib)
(hash-table-put! %s->m% "FF0" 'gauche.termios)
(hash-table-put! %s->m% "$many-chars" 'parser.peg)
(hash-table-put! %s->m% "instance-pool-find" 'gauche.mop.instance-pool)
(hash-table-put! %s->m% "read-fobject" 'binary.ftype)
(hash-table-put! %s->m% "add-signal-handler!" 'compat.stk)
(hash-table-put! %s->m% "vm-find-insn-info" 'gauche.vm.insn-core)
(hash-table-put! %s->m% "SO_RCVBUF" 'gauche.net)
(hash-table-put! %s->m% "make-kmp-restart-vector" 'srfi-13)
(hash-table-put! %s->m% "html:samp" 'text.html-lite)
(hash-table-put! %s->m% "cgen-unit-toplevel-nodes" 'gauche.cgen.unit)
(hash-table-put! %s->m% "s16vector-range-check" 'gauche.uvector)
(hash-table-put! %s->m% "match-let*" 'util.match)
(hash-table-put! %s->m% "combinations-for-each" 'util.combinations)
(hash-table-put! %s->m% "list=" 'srfi-1)
(hash-table-put! %s->m% "rfc822-next-token" 'rfc.822)
(hash-table-put! %s->m% "$alternate" 'parser.peg)
(hash-table-put! %s->m% "cgen-precompile-multi" 'gauche.cgen.precomp)
(hash-table-put! %s->m% "html:html" 'text.html-lite)
(hash-table-put! %s->m% "touch-file" 'file.util)
(hash-table-put! %s->m% "$seq" 'parser.peg)
(hash-table-put! %s->m% "LOG_LOCAL5" 'gauche.syslog)
(hash-table-put! %s->m% "tls-connect" 'rfc.tls)
(hash-table-put! %s->m% "string->u32vector" 'gauche.uvector)
(hash-table-put! %s->m% "string-map" 'srfi-13)
(hash-table-put! %s->m% "VREPRINT" 'gauche.termios)
(hash-table-put! %s->m% "<u32array>" 'gauche.array)
(hash-table-put! %s->m% "mime-parse-content-disposition" 'rfc.mime)
(hash-table-put! %s->m% "put-u16le!" 'binary.io)
(hash-table-put! %s->m% "f16vector-length" 'gauche.uvector)
(hash-table-put! %s->m% "bimap-left-exists?" 'gauche.dictionary)
(hash-table-put! %s->m% "sys-tm->alist" 'gauche.fileutil)
(hash-table-put! %s->m% "date->time-tai" 'srfi-19)
(hash-table-put! %s->m% "write-tree" 'text.tree)
(hash-table-put! %s->m% "peg-run-parser" 'parser.peg)
(hash-table-put! %s->m% "sys-getdomainname" 'gauche.auxsys)
(hash-table-put! %s->m% "space" 'parser.peg)
(hash-table-put! %s->m% "file-eq?" 'file.util)
(hash-table-put! %s->m% "string-index-right" 'srfi-13)
(hash-table-put! %s->m% "put-u8!" 'binary.io)
(hash-table-put! %s->m% "html:area" 'text.html-lite)
(hash-table-put! %s->m% "s16vector-and" 'gauche.uvector)
(hash-table-put! %s->m% "IFF_DEBUG" 'gauche.net)
(hash-table-put! %s->m% "s16vector-fill!" 'gauche.uvector)
(hash-table-put! %s->m% "sys-gethostbyname" 'gauche.net)
(hash-table-put! %s->m% "case-lambda" 'gauche.procedure)
(hash-table-put! %s->m% "write-binary-double" 'binary.io)
(hash-table-put! %s->m% "make-date" 'srfi-19)
(hash-table-put! %s->m% "slices" 'util.list)
(hash-table-put! %s->m% "time-counter-value" 'gauche.time)
(hash-table-put! %s->m% "bitwise-if" 'srfi-60)
(hash-table-put! %s->m% "posix-ctime" 'compat.stk)
(hash-table-put! %s->m% "icmp-echo-ident" 'rfc.icmp)
(hash-table-put! %s->m% "path-sans-extension" 'file.util)
(hash-table-put! %s->m% "dbm-db-remove" 'dbm)
(hash-table-put! %s->m% "random-source-make-reals" 'srfi-27)
(hash-table-put! %s->m% "s64vector-swap-bytes" 'gauche.uvector)
(hash-table-put! %s->m% "string<=" 'srfi-13)
(hash-table-put! %s->m% "bcrypt-gensalt" 'crypt.bcrypt)
(hash-table-put! %s->m% "<fsdbm>" 'dbm.fsdbm)
(hash-table-put! %s->m% "selector-select" 'gauche.selector)
(hash-table-put! %s->m% "gauche-package-description-paths" 'gauche.package)
(hash-table-put! %s->m% "socket-sendmsg" 'gauche.net)
(hash-table-put! %s->m% "trie-delete!" 'util.trie)
(hash-table-put! %s->m% "time-utc->time-monotonic" 'srfi-19)
(hash-table-put! %s->m% "make-time" 'srfi-19)
(hash-table-put! %s->m% "set-random-seed!" 'compat.stk)
(hash-table-put! %s->m% "icmp6-unreach-code->string" 'rfc.icmp)
(hash-table-put! %s->m% "relation-insert!" 'util.relation)
(hash-table-put! %s->m% "vector->f64vector" 'gauche.uvector)
(hash-table-put! %s->m% "sxml:set-attr!" 'sxml.tools)
(hash-table-put! %s->m% "fold-right$" 'gauche.procedure)
(hash-table-put! %s->m% "find-index" 'gauche.sequence)
(hash-table-put! %s->m% "sys-tcgetpgrp" 'gauche.termios)
(hash-table-put! %s->m% "string-tabulate" 'srfi-13)
(hash-table-put! %s->m% "get-s16" 'binary.io)
(hash-table-put! %s->m% "rbtree-num-entries" 'util.rbtree)
(hash-table-put! %s->m% "html:label" 'text.html-lite)
(hash-table-put! %s->m% "gtake-while" 'gauche.generator)
(hash-table-put! %s->m% "assq-set!" 'util.list)
(hash-table-put! %s->m% "reverse-list->vector" 'srfi-43)
(hash-table-put! %s->m% "make-word-breaker" 'text.unicode)
(hash-table-put! %s->m% "SHUT_RDWR" 'gauche.net)
(hash-table-put! %s->m% "zstream-params-set!" 'rfc.zlib)
(hash-table-put! %s->m% "ICMP4_EXC_FRAGTIME" 'rfc.icmp)
(hash-table-put! %s->m% "relation-column-name?" 'util.relation)
(hash-table-put! %s->m% "sxml:ns-list" 'sxml.tools)
(hash-table-put! %s->m% "array-map" 'gauche.array)
(hash-table-put! %s->m% "open-input-limited-length-port" 'gauche.vport)
(hash-table-put! %s->m% "AI_CANONNAME" 'gauche.net)
(hash-table-put! %s->m% "ftype-endian" 'binary.ftype)
(hash-table-put! %s->m% "u8vector-mul" 'gauche.uvector)
(hash-table-put! %s->m% "u32vector-copy" 'gauche.uvector)
(hash-table-put! %s->m% "srl:display-sxml" 'sxml.serializer)
(hash-table-put! %s->m% "VT0" 'gauche.termios)
(hash-table-put! %s->m% "vector=" 'srfi-43)
(hash-table-put! %s->m% "sxml:invert" 'sxml.sxpath)
(hash-table-put! %s->m% "port->string" 'gauche.portutil)
(hash-table-put! %s->m% "list->queue" 'util.queue)
(hash-table-put! %s->m% "delete!" 'srfi-1)
(hash-table-put! %s->m% "<dbi-error>" 'dbi)
(hash-table-put! %s->m% "SO_PASSCRED" 'gauche.net)
(hash-table-put! %s->m% "VSWTC" 'gauche.termios)
(hash-table-put! %s->m% "ICMP4_HOST_UNKNOWN" 'rfc.icmp)
(hash-table-put! %s->m% "html:table" 'text.html-lite)
(hash-table-put! %s->m% "sxml:shallow-normalized?" 'sxml.tools)
(hash-table-put! %s->m% "<record>" 'gauche.record)
(hash-table-put! %s->m% "TCIOFF" 'gauche.termios)
(hash-table-put! %s->m% "srfi-42-until-1" 'srfi-42)
(hash-table-put! %s->m% "u8vector-range-check" 'gauche.uvector)
(hash-table-put! %s->m% "char-set:punctuation" 'srfi-14)
(hash-table-put! %s->m% "sparse-vector-ref" 'util.sparse)
(hash-table-put! %s->m% "http-put" 'rfc.http)
(hash-table-put! %s->m% "stream-butlast-n" 'util.stream)
(hash-table-put! %s->m% "LOG_LOCAL2" 'gauche.syslog)
(hash-table-put! %s->m% "s8vector->string" 'gauche.uvector)
(hash-table-put! %s->m% "ICMP4_TIMESTAMP" 'rfc.icmp)
(hash-table-put! %s->m% "stream-xcons" 'util.stream)
(hash-table-put! %s->m% "put-f64!" 'binary.io)
(hash-table-put! %s->m% "f16vector?" 'gauche.uvector)
(hash-table-put! %s->m% "<md5>" 'rfc.md5)
(hash-table-put! %s->m% "make-bimap" 'gauche.dictionary)
(hash-table-put! %s->m% "define-values" 'gauche.defvalues)
(hash-table-put! %s->m% "most-positive-fixnum" 'slib)
(hash-table-put! %s->m% "pretty-print-array" 'gauche.array)
(hash-table-put! %s->m% "sparse-table-keys" 'util.sparse)
(hash-table-put! %s->m% "fold3$" 'gauche.collection)
(hash-table-put! %s->m% "find-string-from-port?" 'text.parse)
(hash-table-put! %s->m% "html:big" 'text.html-lite)
(hash-table-put! %s->m% "cgen-pred-expr" 'gauche.cgen.type)
(hash-table-put! %s->m% "u8vector-ior!" 'gauche.uvector)
(hash-table-put! %s->m% "ssax:resolve-name" 'sxml.ssax)
(hash-table-put! %s->m% "SIOCGIFCONF" 'gauche.net)
(hash-table-put! %s->m% "s16vector-copy!" 'gauche.uvector)
(hash-table-put! %s->m% "module-reload-rules" 'gauche.reload)
(hash-table-put! %s->m% "stream" 'util.stream)
(hash-table-put! %s->m% "take-right*" 'util.list)
(hash-table-put! %s->m% "posix-getlogin" 'compat.stk)
(hash-table-put! %s->m% "html:noscript" 'text.html-lite)
(hash-table-put! %s->m% "post-order" 'sxml.tree-trans)
(hash-table-put! %s->m% "stream-cdadar" 'util.stream)
(hash-table-put! %s->m% "eval-hook" 'compat.stk)
(hash-table-put! %s->m% "call-with-process-io" 'gauche.process)
(hash-table-put! %s->m% "dbm-fold" 'dbm)
(hash-table-put! %s->m% "s32vector-swap-bytes!" 'gauche.uvector)
(hash-table-put! %s->m% "lset-union!" 'srfi-1)
(hash-table-put! %s->m% "call-with-output-conversion" 'gauche.charconv)
(hash-table-put! %s->m% "ssax:handle-parsed-entity" 'sxml.ssax)
(hash-table-put! %s->m% "read-from-string" 'compat.stk)
(hash-table-put! %s->m% "ip-header-length" 'rfc.ip)
(hash-table-put! %s->m% "judge-file" 'compat.jfilter)
(hash-table-put! %s->m% "xml-token-head" 'sxml.ssax)
(hash-table-put! %s->m% "procedure-body" 'compat.stk)
(hash-table-put! %s->m% "process-pid" 'gauche.process)
(hash-table-put! %s->m% "filter$" 'gauche.procedure)
(hash-table-put! %s->m% "list->f64vector" 'gauche.uvector)
(hash-table-put! %s->m% "sys-tcdrain" 'gauche.termios)
(hash-table-put! %s->m% "pair-for-each" 'srfi-1)
(hash-table-put! %s->m% "gfilter-map" 'gauche.generator)
(hash-table-put! %s->m% "pi" 'math.const)
(hash-table-put! %s->m% "stream-prefix=" 'util.stream)
(hash-table-put! %s->m% "read-binary-uint16" 'binary.io)
(hash-table-put! %s->m% "u64vector-ior" 'gauche.uvector)
(hash-table-put! %s->m% "IPV6_LEAVE_GROUP" 'gauche.net)
(hash-table-put! %s->m% "cartesian-product-right-for-each" 'util.combinations)
(hash-table-put! %s->m% "ftype-name" 'binary.ftype)
(hash-table-put! %s->m% "slib:report-version" 'slib)
(hash-table-put! %s->m% "uri-decode" 'rfc.uri)
(hash-table-put! %s->m% "concatenate" 'srfi-1)
(hash-table-put! %s->m% "write-s32" 'binary.io)
(hash-table-put! %s->m% "u32vector-length" 'gauche.uvector)
(hash-table-put! %s->m% "rbtree-empty?" 'util.rbtree)
(hash-table-put! %s->m% "f64vector-sub!" 'gauche.uvector)
(hash-table-put! %s->m% "$lazy" 'parser.peg)
(hash-table-put! %s->m% "integer-range->char-set" 'srfi-14)
(hash-table-put! %s->m% "BS0" 'gauche.termios)
(hash-table-put! %s->m% "port->sexp-list" 'gauche.portutil)
(hash-table-put! %s->m% "stream-break" 'util.stream)
(hash-table-put! %s->m% "file->list" 'file.util)
(hash-table-put! %s->m% "condition-variable?" 'gauche.threads)
(hash-table-put! %s->m% "html:h4" 'text.html-lite)
(hash-table-put! %s->m% "SO_KEEPALIVE" 'gauche.net)
(hash-table-put! %s->m% "string-replace" 'srfi-13)
(hash-table-put! %s->m% "tr" 'text.tr)
(hash-table-put! %s->m% "mime-body->string" 'rfc.mime)
(hash-table-put! %s->m% "TCIOFLUSH" 'gauche.termios)
(hash-table-put! %s->m% "<parameter>" 'gauche.parameter)
(hash-table-put! %s->m% "s8vector-range-check" 'gauche.uvector)
(hash-table-put! %s->m% "ftp-chdir" 'rfc.ftp)
(hash-table-put! %s->m% "html:li" 'text.html-lite)
(hash-table-put! %s->m% "char-set:graphic" 'srfi-14)
(hash-table-put! %s->m% "current-country" 'srfi-29.bundle)
(hash-table-put! %s->m% "rfc822-header->list" 'rfc.822)
(hash-table-put! %s->m% "bits->generator" 'gauche.generator)
(hash-table-put! %s->m% "$try" 'parser.peg)
(hash-table-put! %s->m% "<u64vector>" 'gauche.uvector)
(hash-table-put! %s->m% "file-atime<?" 'file.util)
(hash-table-put! %s->m% "LOG_KERN" 'gauche.syslog)
(hash-table-put! %s->m% "s32vector-sub!" 'gauche.uvector)
(hash-table-put! %s->m% "html:p" 'text.html-lite)
(hash-table-put! %s->m% "string->u8vector" 'gauche.uvector)
(hash-table-put! %s->m% "char-set<=" 'srfi-14)
(hash-table-put! %s->m% "string-downcase" 'text.unicode)
(hash-table-put! %s->m% "u64vector-fill!" 'gauche.uvector)
(hash-table-put! %s->m% "nil" 'slib)
(hash-table-put! %s->m% "sys-realpath" 'gauche.auxsys)
(hash-table-put! %s->m% "bignum?" 'compat.stk)
(hash-table-put! %s->m% "sys-ntohl" 'gauche.net)
(hash-table-put! %s->m% "date-year-day" 'srfi-19)
(hash-table-put! %s->m% "integer->list" 'srfi-60)
(hash-table-put! %s->m% "posix-fork" 'compat.stk)
(hash-table-put! %s->m% "file-dev" 'file.util)
(hash-table-put! %s->m% "stream-seventh" 'util.stream)
(hash-table-put! %s->m% "<trie>" 'util.trie)
(hash-table-put! %s->m% "make-thread" 'gauche.threads)
(hash-table-put! %s->m% "sxml:not-equal?" 'sxml.sxpath)
(hash-table-put! %s->m% "cise-render-to-string" 'gauche.cgen.cise)
(hash-table-put! %s->m% "read-from-serializer" 'gauche.serializer)
(hash-table-put! %s->m% "string-prefix-length" 'srfi-13)
(hash-table-put! %s->m% "get-f32be" 'binary.io)
(hash-table-put! %s->m% "cgen-type-from-name" 'gauche.cgen.type)
(hash-table-put! %s->m% "u8vector-and" 'gauche.uvector)
(hash-table-put! %s->m% "SIOCSIFMAP" 'gauche.net)
(hash-table-put! %s->m% "cond-expand" 'srfi-0)
(hash-table-put! %s->m% "cgi-header" 'www.cgi)
(hash-table-put! %s->m% "s16vector-ref" 'gauche.uvector)
(hash-table-put! %s->m% "make-bytes" 'slib)
(hash-table-put! %s->m% "<csv>" 'text.csv)
(hash-table-put! %s->m% "sockaddr-name" 'gauche.net)
(hash-table-put! %s->m% "time-tai->time-utc!" 'srfi-19)
(hash-table-put! %s->m% "option" 'srfi-37)
(hash-table-put! %s->m% "write-binary-short" 'binary.io)
(hash-table-put! %s->m% "time<=?" 'srfi-19)
(hash-table-put! %s->m% "time-result-" 'gauche.time)
(hash-table-put! %s->m% "posix-symlink" 'compat.stk)
(hash-table-put! %s->m% "ICMP6_PARAM_HEADER" 'rfc.icmp)
(hash-table-put! %s->m% "http-request" 'rfc.http)
(hash-table-put! %s->m% "sxml:clean-feed" 'sxml.tools)
(hash-table-put! %s->m% "next-token-of" 'text.parse)
(hash-table-put! %s->m% "parser-error" 'sxml.adaptor)
(hash-table-put! %s->m% "u16vector-swap-bytes" 'gauche.uvector)
(hash-table-put! %s->m% "node-closure" 'sxml.sxpath)
(hash-table-put! %s->m% "string-trim" 'srfi-13)
(hash-table-put! %s->m% "sha256-digest" 'rfc.sha)
(hash-table-put! %s->m% "get-u64be" 'binary.io)
(hash-table-put! %s->m% "codepoints-downcase" 'text.unicode)
(hash-table-put! %s->m% "socket-listen" 'gauche.net)
(hash-table-put! %s->m% "time-monotonic->julian-day" 'srfi-19)
(hash-table-put! %s->m% "Z_DEFAULT_COMPRESSION" 'rfc.zlib)
(hash-table-put! %s->m% "cut" 'srfi-26)
(hash-table-put! %s->m% "write-binary-uint16" 'binary.io)
(hash-table-put! %s->m% "ICMP4_SEC_NEEDAUTHENTICATION" 'rfc.icmp)
(hash-table-put! %s->m% "job-acknowledge!" 'control.job)
(hash-table-put! %s->m% "relation-column-setters" 'util.relation)
(hash-table-put! %s->m% "sxml:change-attrlist" 'sxml.tools)
(hash-table-put! %s->m% "find$" 'gauche.procedure)
(hash-table-put! %s->m% "f64vector-copy" 'gauche.uvector)
(hash-table-put! %s->m% "sys-tcgetattr" 'gauche.termios)
(hash-table-put! %s->m% "first" 'srfi-1)
(hash-table-put! %s->m% "get-u32" 'binary.io)
(hash-table-put! %s->m% "1-" 'slib)
(hash-table-put! %s->m% "grange" 'gauche.generator)
(hash-table-put! %s->m% "vector-skip-right" 'srfi-43)
(hash-table-put! %s->m% "PF_INET" 'gauche.net)
(hash-table-put! %s->m% "<zlib-stream-error>" 'rfc.zlib)
(hash-table-put! %s->m% "delete-duplicates!" 'srfi-1)
(hash-table-put! %s->m% "instance-pool-map" 'gauche.mop.instance-pool)
(hash-table-put! %s->m% "dbi-execute" 'dbi)
(hash-table-put! %s->m% "ICMP4_REDIR_NET" 'rfc.icmp)
(hash-table-put! %s->m% "stream->symbol" 'util.stream)
(hash-table-put! %s->m% "sxml:content-raw" 'sxml.tools)
(hash-table-put! %s->m% "s64vector-xor!" 'gauche.uvector)
(hash-table-put! %s->m% "array-size" 'gauche.array)
(hash-table-put! %s->m% "make-rtd" 'gauche.record)
(hash-table-put! %s->m% "make-record-type" 'util.record)
(hash-table-put! %s->m% "IPV6_MULTICAST_HOPS" 'gauche.net)
(hash-table-put! %s->m% "html:bdo" 'text.html-lite)
(hash-table-put! %s->m% "u32vector?" 'gauche.uvector)
(hash-table-put! %s->m% "ftp-help" 'rfc.ftp)
(hash-table-put! %s->m% "f32vector-sub" 'gauche.uvector)
(hash-table-put! %s->m% "cgen-make-literal" 'gauche.cgen.literal)
(hash-table-put! %s->m% "null-generator" 'gauche.generator)
(hash-table-put! %s->m% "CR2" 'gauche.termios)
(hash-table-put! %s->m% "object-isomorphic?" 'util.isomorph)
(hash-table-put! %s->m% "char-set-filter" 'srfi-14)
(hash-table-put! %s->m% "queue-empty?" 'util.queue)
(hash-table-put! %s->m% "port-fold-right" 'gauche.portutil)
(hash-table-put! %s->m% "mutex-lock!" 'gauche.threads)
(hash-table-put! %s->m% "<instance-table-meta>" 'gauche.mop.instance-pool)
(hash-table-put! %s->m% "srfi-42-parallel" 'srfi-42)
(hash-table-put! %s->m% "ICMP4_SECURITYFAILURE" 'rfc.icmp)
(hash-table-put! %s->m% "list->char-set" 'srfi-14)
(hash-table-put! %s->m% "SO_DEBUG" 'gauche.net)
(hash-table-put! %s->m% "digest" 'util.digest)
(hash-table-put! %s->m% "put-u64le!" 'binary.io)
(hash-table-put! %s->m% "TCSAFLUSH" 'gauche.termios)
(hash-table-put! %s->m% "dbi-escape-sql" 'dbi)
(hash-table-put! %s->m% "f16vector-dot" 'gauche.uvector)
(hash-table-put! %s->m% "char-set:title-case" 'srfi-14)
(hash-table-put! %s->m% "list->generator" 'gauche.generator)
(hash-table-put! %s->m% "read-uint" 'binary.io)
(hash-table-put! %s->m% "make-directory*" 'file.util)
(hash-table-put! %s->m% "<u32vector-meta>" 'gauche.uvector)
(hash-table-put! %s->m% "mt-random-set-seed!" 'math.mt-random)
(hash-table-put! %s->m% "u16vector-sub" 'gauche.uvector)
(hash-table-put! %s->m% "LOG_CRON" 'gauche.syslog)
(hash-table-put! %s->m% "thread-cont!" 'gauche.threads)
(hash-table-put! %s->m% "group-collection" 'gauche.collection)
(hash-table-put! %s->m% "VKILL" 'gauche.termios)
(hash-table-put! %s->m% "ICMP4_ECHOREPLY" 'rfc.icmp)
(hash-table-put! %s->m% "write-block" 'gauche.uvector)
(hash-table-put! %s->m% "do-ec" 'srfi-42)
(hash-table-put! %s->m% "u64vector-copy!" 'gauche.uvector)
(hash-table-put! %s->m% "dict-delete!" 'gauche.dictionary)
(hash-table-put! %s->m% "sys-fdset->list" 'gauche.auxsys)
(hash-table-put! %s->m% "test-end" 'gauche.test)
(hash-table-put! %s->m% "alist-copy" 'srfi-1)
(hash-table-put! %s->m% "sparse-table-clear!" 'util.sparse)
(hash-table-put! %s->m% "stream-third" 'util.stream)
(hash-table-put! %s->m% "char-set-complement" 'srfi-14)
(hash-table-put! %s->m% "with-iterator" 'gauche.collection)
(hash-table-put! %s->m% "srfi-42-string" 'srfi-42)
(hash-table-put! %s->m% "NCCS" 'gauche.termios)
(hash-table-put! %s->m% "list-ec" 'srfi-42)
(hash-table-put! %s->m% "s8vector-ior!" 'gauche.uvector)
(hash-table-put! %s->m% "SIOCSIFHWADDR" 'gauche.net)
(hash-table-put! %s->m% "cgen-init" 'gauche.cgen.unit)
(hash-table-put! %s->m% "make-s16vector" 'gauche.uvector)
(hash-table-put! %s->m% "trie-common-prefix-map" 'util.trie)
(hash-table-put! %s->m% "stream-index" 'util.stream)
(hash-table-put! %s->m% "open-output-virtual" 'compat.stk)
(hash-table-put! %s->m% "process-stop" 'gauche.process)
(hash-table-put! %s->m% "char-tab" 'sxml.adaptor)
(hash-table-put! %s->m% "f64vector-clamp!" 'gauche.uvector)
(hash-table-put! %s->m% "open-output-conversion-port" 'gauche.charconv)
(hash-table-put! %s->m% "take-while!" 'srfi-1)
(hash-table-put! %s->m% "html:address" 'text.html-lite)
(hash-table-put! %s->m% "gauche-package-compile-and-link" 'gauche.package.compile)
(hash-table-put! %s->m% "tree-fold-bf" 'util.tree)
(hash-table-put! %s->m% "make-f16array" 'gauche.array)
(hash-table-put! %s->m% "remq" 'compat.stk)
(hash-table-put! %s->m% "every$" 'gauche.procedure)
(hash-table-put! %s->m% "read-binary-long" 'binary.io)
(hash-table-put! %s->m% "parse-cookie-string" 'rfc.cookie)
(hash-table-put! %s->m% "f64vector-length" 'gauche.uvector)
(hash-table-put! %s->m% "ftype:struct" 'binary.ftype)
(hash-table-put! %s->m% "hook->list" 'gauche.hook)
(hash-table-put! %s->m% "unfold" 'srfi-1)
(hash-table-put! %s->m% "macro:load" 'slib)
(hash-table-put! %s->m% "uncaught-exception-reason" 'gauche.threads)
(hash-table-put! %s->m% "$satisfy" 'parser.peg)
(hash-table-put! %s->m% "LOG_NOTICE" 'gauche.syslog)
(hash-table-put! %s->m% "instance-pool-remove!" 'gauche.mop.instance-pool)
(hash-table-put! %s->m% "write-fobject/uv" 'binary.ftype)
(hash-table-put! %s->m% "send-signal" 'compat.stk)
(hash-table-put! %s->m% "vm-build-insn" 'gauche.vm.insn-core)
(hash-table-put! %s->m% "html:kbd" 'text.html-lite)
(hash-table-put! %s->m% "kmp-step" 'srfi-13)
(hash-table-put! %s->m% "s64vector-ior" 'gauche.uvector)
(hash-table-put! %s->m% "IPPROTO_IPV6" 'gauche.net)
(hash-table-put! %s->m% "match-letrec" 'util.match)
(hash-table-put! %s->m% "combinations*-for-each" 'util.combinations)
(hash-table-put! %s->m% "third" 'srfi-1)
(hash-table-put! %s->m% "s32vector-fill!" 'gauche.uvector)
(hash-table-put! %s->m% "ftp-get" 'rfc.ftp)
(hash-table-put! %s->m% "u64vector-sub!" 'gauche.uvector)
(hash-table-put! %s->m% "rfc822-field->tokens" 'rfc.822)
(hash-table-put! %s->m% "CRDLY" 'gauche.termios)
(hash-table-put! %s->m% "$sep-by" 'parser.peg)
(hash-table-put! %s->m% "fold3-ec" 'srfi-42)
(hash-table-put! %s->m% "port-position-prefix" 'gauche.portutil)
(hash-table-put! %s->m% "touch-files" 'file.util)
(hash-table-put! %s->m% "mutex-state" 'gauche.threads)
(hash-table-put! %s->m% "make-fstruct-type" 'binary.ftype)
(hash-table-put! %s->m% "SO_ACCEPTCONN" 'gauche.net)
(hash-table-put! %s->m% "string-map!" 'srfi-13)
(hash-table-put! %s->m% "string-append-ec" 'srfi-42)
(hash-table-put! %s->m% "<s32array>" 'gauche.array)
(hash-table-put! %s->m% "mime-parse-parameters" 'rfc.mime)
(hash-table-put! %s->m% "pathname->vicinity" 'slib)
(hash-table-put! %s->m% "u32vector-dot" 'gauche.uvector)
(hash-table-put! %s->m% "date->time-utc" 'srfi-19)
(hash-table-put! %s->m% "tree->string" 'text.tree)
(hash-table-put! %s->m% "peg-parse-string" 'parser.peg)
(hash-table-put! %s->m% "rassq" 'util.list)
(hash-table-put! %s->m% "<s32vector>" 'gauche.uvector)
(hash-table-put! %s->m% "file-eqv?" 'file.util)
(hash-table-put! %s->m% "u8vector-sub!" 'gauche.uvector)
(hash-table-put! %s->m% "sxml:descendant-or-self" 'sxml.sxpath)
(hash-table-put! %s->m% "uvector-swap-bytes!" 'gauche.uvector)
(hash-table-put! %s->m% "string-skip" 'srfi-13)
(hash-table-put! %s->m% "put-u16!" 'binary.io)
(hash-table-put! %s->m% "u64vector-ref" 'gauche.uvector)
(hash-table-put! %s->m% "slib:form-feed" 'slib)
(hash-table-put! %s->m% "sys-gethostbyaddr" 'gauche.net)
(hash-table-put! %s->m% "date?" 'srfi-19)
(hash-table-put! %s->m% "with-time-counter" 'gauche.time)
(hash-table-put! %s->m% "bitwise-merge" 'srfi-60)
(hash-table-put! %s->m% "posix-localtime" 'compat.stk)
(hash-table-put! %s->m% "icmp-echo-sequence" 'rfc.icmp)
(hash-table-put! %s->m% "stream-cddddr" 'util.stream)
(hash-table-put! %s->m% "path-swap-extension" 'file.util)
(hash-table-put! %s->m% "dbm-db-copy" 'dbm)
(hash-table-put! %s->m% "current-time" 'slib)
(hash-table-put! %s->m% "ECHOPRT" 'gauche.termios)
(hash-table-put! %s->m% "string>=" 'srfi-13)
(hash-table-put! %s->m% "get-s32le" 'binary.io)
(hash-table-put! %s->m% "s8vector-and" 'gauche.uvector)
(hash-table-put! %s->m% "attlist-null?" 'sxml.ssax)
(hash-table-put! %s->m% "string-null?" 'srfi-13)
(hash-table-put! %s->m% "SIOCGIFMTU" 'gauche.net)
(hash-table-put! %s->m% "debug-source-info" 'gauche.vm.debugger)
(hash-table-put! %s->m% "write-gauche-package-description" 'gauche.package)
(hash-table-put! %s->m% "slib:version" 'slib)
(hash-table-put! %s->m% "u8vector->vector" 'gauche.uvector)
(hash-table-put! %s->m% "socket-buildmsg" 'gauche.net)
(hash-table-put! %s->m% "trie-common-prefix" 'util.trie)
(hash-table-put! %s->m% "time-utc->time-monotonic!" 'srfi-19)
(hash-table-put! %s->m% "array-inverse" 'gauche.array)
(hash-table-put! %s->m% "time-type" 'srfi-19)
(hash-table-put! %s->m% "get-internal-info" 'compat.stk)
(hash-table-put! %s->m% "ICMP6_UNREACH_NOROUTE" 'rfc.icmp)
(hash-table-put! %s->m% "FD_CLOEXEC" 'gauche.fcntl)
(hash-table-put! %s->m% "relation-deletable?" 'util.relation)
(hash-table-put! %s->m% "sxml:add-aux" 'sxml.tools)
(hash-table-put! %s->m% "find-with-index" 'gauche.sequence)
(hash-table-put! %s->m% "sys-uname" 'gauche.auxsys)
(hash-table-put! %s->m% "take-until" 'sxml.sxpath)
(hash-table-put! %s->m% "f32vector-clamp!" 'gauche.uvector)
(hash-table-put! %s->m% "reverse-list->string" 'srfi-13)
(hash-table-put! %s->m% "tree-map-empty?" 'gauche.treeutil)
(hash-table-put! %s->m% "rbtree-keys" 'util.rbtree)
(hash-table-put! %s->m% "get-s32" 'binary.io)
(hash-table-put! %s->m% "html:input" 'text.html-lite)
(hash-table-put! %s->m% "gauche-package-ensure" 'gauche.package.fetch)
(hash-table-put! %s->m% "gdrop-while" 'gauche.generator)
(hash-table-put! %s->m% "socket-address" 'gauche.net)
(hash-table-put! %s->m% "make-word-reader" 'text.unicode)
(hash-table-put! %s->m% "zstream-adler32" 'rfc.zlib)
(hash-table-put! %s->m% "sxml:attr-list" 'sxml.sxpath)
(hash-table-put! %s->m% "icmp4-parameter-code->string" 'rfc.icmp)
(hash-table-put! %s->m% "stream-caaar" 'util.stream)
(hash-table-put! %s->m% "relation-column-getter" 'util.relation)
(hash-table-put! %s->m% "string-transliterate" 'text.tr)
(hash-table-put! %s->m% "f64vector?" 'gauche.uvector)
(hash-table-put! %s->m% "sxml:ns-id->nodes" 'sxml.tools)
(hash-table-put! %s->m% "assoc$" 'gauche.procedure)
(hash-table-put! %s->m% "array-map!" 'gauche.array)
(hash-table-put! %s->m% "B2400" 'gauche.termios)
(hash-table-put! %s->m% "ftp-mtime" 'rfc.ftp)
(hash-table-put! %s->m% "SXML->HTML" 'sxml.to-html)
(hash-table-put! %s->m% "srl:parameterizable" 'sxml.serializer)
(hash-table-put! %s->m% "rfc822-date->date" 'rfc.822)
(hash-table-put! %s->m% "dbd-null-test-result-set!" 'dbd.null)
(hash-table-put! %s->m% "vector-fold" 'srfi-43)
(hash-table-put! %s->m% "zlib-version" 'rfc.zlib)
(hash-table-put! %s->m% "find-in-queue" 'util.queue)
(hash-table-put! %s->m% "LOG_CRIT" 'gauche.syslog)
(hash-table-put! %s->m% "<dbi-nonexistent-driver-error>" 'dbi)
(hash-table-put! %s->m% "ICMP4_HOST_ISOLATED" 'rfc.icmp)
(hash-table-put! %s->m% "u32vector-xor!" 'gauche.uvector)
(hash-table-put! %s->m% "html:caption" 'text.html-lite)
(hash-table-put! %s->m% "sxml:normalized?" 'sxml.tools)
(hash-table-put! %s->m% "<pseudo-record-meta>" 'gauche.record)
(hash-table-put! %s->m% "sys-getnameinfo" 'gauche.net)
(hash-table-put! %s->m% "s32vector-copy!" 'gauche.uvector)
(hash-table-put! %s->m% "s64vector-sub" 'gauche.uvector)
(hash-table-put! %s->m% "char-set:symbol" 'srfi-14)
(hash-table-put! %s->m% "sparse-vector-set!" 'util.sparse)
(hash-table-put! %s->m% "NLDLY" 'gauche.termios)
(hash-table-put! %s->m% "export-if-defined" 'gauche.modutil)
(hash-table-put! %s->m% "http-delete" 'rfc.http)
(hash-table-put! %s->m% "stream-length" 'util.stream)
(hash-table-put! %s->m% "ftype:slot-name" 'binary.ftype)
(hash-table-put! %s->m% "ICMP4_TIMESTAMPREPLY" 'rfc.icmp)
(hash-table-put! %s->m% "stream-cons*" 'util.stream)
(hash-table-put! %s->m% "put-u16be!" 'binary.io)
(hash-table-put! %s->m% "s16vector-dot" 'gauche.uvector)
(hash-table-put! %s->m% "md5-digest" 'rfc.md5)
(hash-table-put! %s->m% "bytes->list" 'slib)
(hash-table-put! %s->m% "test-error?" 'gauche.test)
(hash-table-put! %s->m% "<sparse-s8vector>" 'util.sparse)
(hash-table-put! %s->m% "sparse-table-values" 'util.sparse)
(hash-table-put! %s->m% "<s16vector-meta>" 'gauche.uvector)
(hash-table-put! %s->m% "find-min" 'gauche.collection)
(hash-table-put! %s->m% "s8vector-sub" 'gauche.uvector)
(hash-table-put! %s->m% "html:small" 'text.html-lite)
(hash-table-put! %s->m% "s8vector?" 'gauche.uvector)
(hash-table-put! %s->m% "make-u64vector" 'gauche.uvector)
(hash-table-put! %s->m% "char-set-delete!" 'srfi-14)
(hash-table-put! %s->m% "quoted-printable-encode-string" 'rfc.quoted-printable)
(hash-table-put! %s->m% "array-add-elements!" 'gauche.array)
(hash-table-put! %s->m% "stream-unfoldn" 'util.stream)
(hash-table-put! %s->m% "srfi-42--dispatch" 'srfi-42)
(hash-table-put! %s->m% "posix-mkdir" 'compat.stk)
(hash-table-put! %s->m% "O_ASYNC" 'gauche.fcntl)
(hash-table-put! %s->m% "stream-cdaddr" 'util.stream)
(hash-table-put! %s->m% "pre-post-order" 'sxml.tree-trans)
(hash-table-put! %s->m% "process-output->string" 'gauche.process)
(hash-table-put! %s->m% "export-symbol" 'compat.stk)
(hash-table-put! %s->m% "dbm-for-each" 'dbm)
(hash-table-put! %s->m% "write-to-string-with-serializer" 'gauche.serializer)
(hash-table-put! %s->m% "sxml:string" 'sxml.sxpath)
(hash-table-put! %s->m% "substring?" 'sxml.adaptor)
(hash-table-put! %s->m% "IEXTEN" 'gauche.termios)
(hash-table-put! %s->m% "rbtree-delete!" 'util.rbtree)
(hash-table-put! %s->m% "lset-intersection" 'srfi-1)
(hash-table-put! %s->m% "f32vector-div!" 'gauche.uvector)
(hash-table-put! %s->m% "SIOCSIFFLAGS" 'gauche.net)
(hash-table-put! %s->m% "<tmodule>" 'gauche.cgen.tmodule)
(hash-table-put! %s->m% "u8vector->list" 'gauche.uvector)
(hash-table-put! %s->m% "byte-set!" 'slib)
(hash-table-put! %s->m% "ip-protocol" 'rfc.ip)
(hash-table-put! %s->m% "sys-setpgid" 'gauche.auxsys)
(hash-table-put! %s->m% "input-file-port?" 'compat.stk)
(hash-table-put! %s->m% "process-command" 'gauche.process)
(hash-table-put! %s->m% "f16vector-clamp!" 'gauche.uvector)
(hash-table-put! %s->m% "filter-map" 'srfi-1)
(hash-table-put! %s->m% "tree-map-pop-min!" 'gauche.treeutil)
(hash-table-put! %s->m% "port?" 'slib)
(hash-table-put! %s->m% "gstate-filter" 'gauche.generator)
(hash-table-put! %s->m% "queue->list" 'util.queue)
(hash-table-put! %s->m% "1/pi" 'math.const)
(hash-table-put! %s->m% "stream-caar" 'util.stream)
(hash-table-put! %s->m% "cgen-emit-xtrn" 'gauche.cgen.unit)
(hash-table-put! %s->m% "applicable?" 'gauche.procedure)
(hash-table-put! %s->m% "read-binary-uint32" 'binary.io)
(hash-table-put! %s->m% "f32vector-fill!" 'gauche.uvector)
(hash-table-put! %s->m% "B600" 'gauche.termios)
(hash-table-put! %s->m% "ftype-size" 'binary.ftype)
(hash-table-put! %s->m% "sys-syslog" 'gauche.syslog)
(hash-table-put! %s->m% "uri-decode-string" 'rfc.uri)
(hash-table-put! %s->m% "concatenate!" 'srfi-1)
(hash-table-put! %s->m% "write-s64" 'binary.io)
(hash-table-put! %s->m% "hash-table-for-each" 'gauche.hashutil)
(hash-table-put! %s->m% "rbtree-push!" 'util.rbtree)
(hash-table-put! %s->m% "$s" 'parser.peg)
(hash-table-put! %s->m% "integer-range->char-set!" 'srfi-14)
(hash-table-put! %s->m% "file->sexp-list" 'file.util)
(hash-table-put! %s->m% "gauche-config" 'gauche.config)
(hash-table-put! %s->m% "LOG_UUCP" 'gauche.syslog)
(hash-table-put! %s->m% "instance-pools-of" 'gauche.mop.instance-pool)
(hash-table-put! %s->m% "delete" 'srfi-1)
(hash-table-put! %s->m% "html:h5" 'text.html-lite)
(hash-table-put! %s->m% "string-tokenize" 'srfi-13)
(hash-table-put! %s->m% "mime-body->file" 'rfc.mime)
(hash-table-put! %s->m% "u32vector-ior" 'gauche.uvector)
(hash-table-put! %s->m% "array" 'gauche.array)
(hash-table-put! %s->m% "sys-getloadavg" 'gauche.auxsys)
(hash-table-put! %s->m% "make-parameter" 'gauche.parameter)
(hash-table-put! %s->m% "s32vector-ref" 'gauche.uvector)
(hash-table-put! %s->m% "char-set:printing" 'srfi-14)
(hash-table-put! %s->m% "current-locale-details" 'srfi-29.bundle)
(hash-table-put! %s->m% "rfc822-header-ref" 'rfc.822)
(hash-table-put! %s->m% "reverse-bits->generator" 'gauche.generator)
(hash-table-put! %s->m% "ONLRET" 'gauche.termios)
(hash-table-put! %s->m% "$or" 'parser.peg)
(hash-table-put! %s->m% "file-atime<=?" 'file.util)
(hash-table-put! %s->m% "e" 'math.const)
(hash-table-put! %s->m% "VSTART" 'gauche.termios)
(hash-table-put! %s->m% "IPPROTO_TCP" 'gauche.net)
(hash-table-put! %s->m% "string-downcase!" 'srfi-13)
(hash-table-put! %s->m% "u64vector-xor!" 'gauche.uvector)
(hash-table-put! %s->m% "bytes" 'slib)
(hash-table-put! %s->m% "sys-ntohs" 'gauche.net)
(hash-table-put! %s->m% "list->integer" 'srfi-60)
(hash-table-put! %s->m% "date-week-day" 'srfi-19)
(hash-table-put! %s->m% "alist-delete!" 'srfi-1)
(hash-table-put! %s->m% "posix-wait" 'compat.stk)
(hash-table-put! %s->m% "ssax:xml->sxml" 'sxml.ssax)
(hash-table-put! %s->m% "stream-eighth" 'util.stream)
(hash-table-put! %s->m% "<u8vector>" 'gauche.uvector)
(hash-table-put! %s->m% "file-rdev" 'file.util)
(hash-table-put! %s->m% "f32vector-add!" 'gauche.uvector)
(hash-table-put! %s->m% "cise-render-rec" 'gauche.cgen.cise)
(hash-table-put! %s->m% "port-of" 'gauche.serializer)
(hash-table-put! %s->m% "string-suffix-length" 'srfi-13)
(hash-table-put! %s->m% "_POSIX_VDISABLE" 'gauche.termios)
(hash-table-put! %s->m% "get-f32le" 'binary.io)
(hash-table-put! %s->m% "&read-error" 'gauche.condutil)
(hash-table-put! %s->m% "make-cgen-type" 'gauche.cgen.type)
(hash-table-put! %s->m% "cgi-temporary-files" 'www.cgi)
(hash-table-put! %s->m% "make-csv-reader" 'text.csv)
(hash-table-put! %s->m% "sockaddr-family" 'gauche.net)
(hash-table-put! %s->m% "write-binary-ushort" 'binary.io)
(hash-table-put! %s->m% "date->string" 'srfi-19)
(hash-table-put! %s->m% "option-names" 'srfi-37)
(hash-table-put! %s->m% "quoted-printable-decode-string" 'rfc.quoted-printable)
(hash-table-put! %s->m% "array-div-left" 'gauche.array)
(hash-table-put! %s->m% "time>?" 'srfi-19)
(hash-table-put! %s->m% "<time-counter>" 'gauche.time)
(hash-table-put! %s->m% "http-null-receiver" 'rfc.http)
(hash-table-put! %s->m% "ssax:read-NCName" 'sxml.ssax)
(hash-table-put! %s->m% "ICMP6_PARAM_NEXTHEADER" 'rfc.icmp)
(hash-table-put! %s->m% "expand-path" 'file.util)
(hash-table-put! %s->m% "sxml:attr->xml" 'sxml.tools)
(hash-table-put! %s->m% "read-string" 'text.parse)
(hash-table-put! %s->m% "random-integer" 'srfi-27)
(hash-table-put! %s->m% "cout" 'sxml.adaptor)
(hash-table-put! %s->m% "if-sxpath" 'sxml.sxpath)
(hash-table-put! %s->m% "string-trim-right" 'srfi-13)
(hash-table-put! %s->m% "ISIG" 'gauche.termios)
(hash-table-put! %s->m% "library-fold" 'gauche.libutil)
(hash-table-put! %s->m% "sha256-digest-string" 'rfc.sha)
(hash-table-put! %s->m% "get-u64le" 'binary.io)
(hash-table-put! %s->m% "f16vector-div" 'gauche.uvector)
(hash-table-put! %s->m% "SIOCSIFNAME" 'gauche.net)
(hash-table-put! %s->m% "defmacro:load" 'slib)
(hash-table-put! %s->m% "u8vector-set!" 'gauche.uvector)
(hash-table-put! %s->m% "socket-accept" 'gauche.net)
(hash-table-put! %s->m% "codepoints-titlecase" 'text.unicode)
(hash-table-put! %s->m% "Z_FILTERED" 'rfc.zlib)
(hash-table-put! %s->m% "time-monotonic->modified-julian-day" 'srfi-19)
(hash-table-put! %s->m% "drop" 'srfi-1)
(hash-table-put! %s->m% "ICMP4_SEC_NEEDAUTHORIZATION" 'rfc.icmp)
(hash-table-put! %s->m% "sxml:change-attrlist!" 'sxml.tools)
(hash-table-put! %s->m% "u64vector-clamp!" 'gauche.uvector)
(hash-table-put! %s->m% "tree-map-fold-right" 'gauche.treeutil)
(hash-table-put! %s->m% "home-vicinity" 'slib)
(hash-table-put! %s->m% "atomic" 'gauche.threads)
(hash-table-put! %s->m% "vector-binary-search" 'srfi-43)
(hash-table-put! %s->m% "AF_UNSPEC" 'gauche.net)
(hash-table-put! %s->m% "<zlib-data-error>" 'rfc.zlib)
(hash-table-put! %s->m% "implementation-vicinity" 'slib)
(hash-table-put! %s->m% "time-utc" 'srfi-19)
(hash-table-put! %s->m% "dbi-do" 'dbi)
(hash-table-put! %s->m% "ICMP4_REDIR_HOST" 'rfc.icmp)
(hash-table-put! %s->m% "port->stream" 'util.stream)
(hash-table-put! %s->m% "sxml:attr-list-u" 'sxml.tools)
(hash-table-put! %s->m% "<arity-at-least>" 'gauche.procedure)
(hash-table-put! %s->m% "array-for-each-index" 'gauche.array)
(hash-table-put! %s->m% "rtd?" 'gauche.record)
(hash-table-put! %s->m% "transliterate" 'text.tr)
(hash-table-put! %s->m% "f32vector-copy!" 'gauche.uvector)
(hash-table-put! %s->m% "record-constructor" 'util.record)
(hash-table-put! %s->m% "B150" 'gauche.termios)
(hash-table-put! %s->m% "html:br" 'text.html-lite)
(hash-table-put! %s->m% "glob-fold" 'gauche.fileutil)
(hash-table-put! %s->m% "cgen-literal-static?" 'gauche.cgen.literal)
(hash-table-put! %s->m% "sparse-vector-pop!" 'util.sparse)
(hash-table-put! %s->m% "copy-queue" 'util.queue)
(hash-table-put! %s->m% "<instance-table-mixin>" 'gauche.mop.instance-pool)
(hash-table-put! %s->m% "mutex-unlock!" 'gauche.threads)
(hash-table-put! %s->m% "icmp4-unreach-code->string" 'rfc.icmp)
(hash-table-put! %s->m% "list->char-set!" 'srfi-14)
(hash-table-put! %s->m% "<f64array>" 'gauche.array)
(hash-table-put! %s->m% "put-s16be!" 'binary.io)
(hash-table-put! %s->m% "s32vector-xor!" 'gauche.uvector)
(hash-table-put! %s->m% "dbi-list-drivers" 'dbi)
(hash-table-put! %s->m% "make-s32vector" 'gauche.uvector)
(hash-table-put! %s->m% "<ftp-error>" 'rfc.ftp)
(hash-table-put! %s->m% "lcs" 'util.lcs)
(hash-table-put! %s->m% "char-set:letter" 'srfi-14)
(hash-table-put! %s->m% "vector->generator" 'gauche.generator)
(hash-table-put! %s->m% "<sparse-f16vector>" 'util.sparse)
(hash-table-put! %s->m% "gc" 'compat.stk)
(hash-table-put! %s->m% "ONLCR" 'gauche.termios)
(hash-table-put! %s->m% "read-u8" 'binary.io)
(hash-table-put! %s->m% "SSAX:XML->SXML" 'sxml.ssax)
(hash-table-put! %s->m% "create-directory*" 'file.util)
(hash-table-put! %s->m% "null-list?" 'srfi-1)
(hash-table-put! %s->m% "mt-random-get-state" 'math.mt-random)
(hash-table-put! %s->m% "mutex?" 'gauche.threads)
(hash-table-put! %s->m% "ICMP4_DEST_UNREACH" 'rfc.icmp)
(hash-table-put! %s->m% "IPPROTO_IP" 'gauche.net)
(hash-table-put! %s->m% "dict-fold" 'gauche.dictionary)
(hash-table-put! %s->m% "test-section" 'gauche.test)
(hash-table-put! %s->m% "min-ec" 'srfi-42)
(hash-table-put! %s->m% "sparse-table-delete!" 'util.sparse)
(hash-table-put! %s->m% "<uvector-meta>" 'gauche.uvector)
(hash-table-put! %s->m% "stream-fourth" 'util.stream)
(hash-table-put! %s->m% "dump" 'compat.stk)
(hash-table-put! %s->m% "call-with-iterators" 'gauche.collection)
(hash-table-put! %s->m% "f16vector-add" 'gauche.uvector)
(hash-table-put! %s->m% "gauche-thread-type" 'gauche.threads)
(hash-table-put! %s->m% "merge" 'gauche.sortutil)
(hash-table-put! %s->m% "attlist-fold" 'sxml.ssax)
(hash-table-put! %s->m% "cgen-include" 'gauche.cgen.unit)
(hash-table-put! %s->m% "trie-common-prefix-for-each" 'util.trie)
(hash-table-put! %s->m% "stream?" 'util.stream)
(hash-table-put! %s->m% "ssax:skip-S" 'sxml.ssax)
(hash-table-put! %s->m% "input-virtual-port?" 'compat.stk)
(hash-table-put! %s->m% "process-continue" 'gauche.process)
(hash-table-put! %s->m% "sys-cfgetospeed" 'gauche.termios)
(hash-table-put! %s->m% "ECHOK" 'gauche.termios)
(hash-table-put! %s->m% "ces-conversion-supported?" 'gauche.charconv)
(hash-table-put! %s->m% "break" 'srfi-1)
(hash-table-put! %s->m% "library-exists?" 'gauche.libutil)
(hash-table-put! %s->m% "html:div" 'text.html-lite)
(hash-table-put! %s->m% "s64vector-fill!" 'gauche.uvector)
(hash-table-put! %s->m% "f32vector-mul!" 'gauche.uvector)
(hash-table-put! %s->m% "IP_DROP_MEMBERSHIP" 'gauche.net)
(hash-table-put! %s->m% "base:eval" 'slib)
(hash-table-put! %s->m% "u8vector" 'gauche.uvector)
(hash-table-put! %s->m% "CRTSCTS" 'gauche.termios)
(hash-table-put! %s->m% "write-binary-uint8" 'binary.io)
(hash-table-put! %s->m% "tree-walk-bf" 'util.tree)
(hash-table-put! %s->m% "make-f32array" 'gauche.array)
(hash-table-put! %s->m% "IP_OPTIONS" 'gauche.net)
(hash-table-put! %s->m% "ssax:make-parser" 'sxml.ssax)
(hash-table-put! %s->m% "stream-cdadr" 'util.stream)
(hash-table-put! %s->m% "remv" 'compat.stk)
(hash-table-put! %s->m% "construct-cookie-string" 'rfc.cookie)
(hash-table-put! %s->m% "read-binary-ulong" 'binary.io)
(hash-table-put! %s->m% "run-hook" 'gauche.hook)
(hash-table-put! %s->m% "s64vector-clamp!" 'gauche.uvector)
(hash-table-put! %s->m% "tree-map-keys" 'gauche.treeutil)
(hash-table-put! %s->m% "pair-fold" 'srfi-1)
(hash-table-put! %s->m% "rbtree-pop!" 'util.rbtree)
(hash-table-put! %s->m% "atom" 'gauche.threads)
(hash-table-put! %s->m% "anychar" 'parser.peg)
(hash-table-put! %s->m% "abandoned-mutex-exception?" 'gauche.threads)
(hash-table-put! %s->m% "instance-pool-fold" 'gauche.mop.instance-pool)
(hash-table-put! %s->m% "getcwd" 'compat.stk)
(hash-table-put! %s->m% "write-fobject" 'binary.ftype)
(hash-table-put! %s->m% "html:var" 'text.html-lite)
(hash-table-put! %s->m% "pp" 'sxml.adaptor)
(hash-table-put! %s->m% "string-kmp-partial-search" 'srfi-13)
(hash-table-put! %s->m% "disasm" 'gauche.procedure)
(hash-table-put! %s->m% "f32vector-ref" 'gauche.uvector)
(hash-table-put! %s->m% "B75" 'gauche.termios)
(hash-table-put! %s->m% "match-let1" 'util.match)
(hash-table-put! %s->m% "power-set-binary" 'util.combinations)
(hash-table-put! %s->m% "fourth" 'srfi-1)
(hash-table-put! %s->m% "make-glob-fs-fold" 'gauche.fileutil)
(hash-table-put! %s->m% "ssax:read-pi-body-as-string" 'sxml.ssax)
(hash-table-put! %s->m% "$end-by" 'parser.peg)
(hash-table-put! %s->m% "catalog:read" 'slib)
(hash-table-put! %s->m% "read-s64" 'binary.io)
(hash-table-put! %s->m% "copy-file" 'file.util)
(hash-table-put! %s->m% "mutex-specific-set!" 'gauche.threads)
(hash-table-put! %s->m% "spaces" 'parser.peg)
(hash-table-put! %s->m% "define-fstruct-type" 'binary.ftype)
(hash-table-put! %s->m% "string-fold" 'srfi-13)
(hash-table-put! %s->m% "srfi-42-let" 'srfi-42)
(hash-table-put! %s->m% "tls-close" 'rfc.tls)
(hash-table-put! %s->m% "s32vector-ior" 'gauche.uvector)
(hash-table-put! %s->m% "<u64array>" 'gauche.array)
(hash-table-put! %s->m% "mime-compose-parameters" 'rfc.mime)
(hash-table-put! %s->m% "TCSANOW" 'gauche.termios)
(hash-table-put! %s->m% "u16vector->vector" 'gauche.uvector)
(hash-table-put! %s->m% "lstate-filter" 'gauche.lazy)
(hash-table-put! %s->m% "julian-day->date" 'srfi-19)
(hash-table-put! %s->m% "IMAXBEL" 'gauche.termios)
(hash-table-put! %s->m% "peg-parse-port" 'parser.peg)
(hash-table-put! %s->m% "file-equal?" 'file.util)
(hash-table-put! %s->m% "make-exchanger" 'slib)
(hash-table-put! %s->m% "sxml:following" 'sxml.sxpath)
(hash-table-put! %s->m% "VERASE" 'gauche.termios)
(hash-table-put! %s->m% "MSG_PEEK" 'gauche.net)
(hash-table-put! %s->m% "string-skip-right" 'srfi-13)
(hash-table-put! %s->m% "put-u32!" 'binary.io)
(hash-table-put! %s->m% "slib:require-if" 'slib)
(hash-table-put! %s->m% "require-extension" 'srfi-55)
(hash-table-put! %s->m% "char-set-intersection!" 'srfi-14)
(hash-table-put! %s->m% "<sys-protoent>" 'gauche.net)
(hash-table-put! %s->m% "&message" 'gauche.condutil)
(hash-table-put! %s->m% "date-nanosecond" 'srfi-19)
(hash-table-put! %s->m% "BRKINT" 'gauche.termios)
(hash-table-put! %s->m% "time-counter-get-current-time" 'gauche.time)
(hash-table-put! %s->m% "any-bits-set?" 'srfi-60)
(hash-table-put! %s->m% "posix-gmtime" 'compat.stk)
(hash-table-put! %s->m% "hmac-digest-string" 'rfc.hmac)
(hash-table-put! %s->m% "ssax:Prefix-XML" 'sxml.ssax)
(hash-table-put! %s->m% "file-is-readable?" 'compat.stk)
(hash-table-put! %s->m% "icmp4-describe-packet" 'rfc.icmp)
(hash-table-put! %s->m% "stream-ref" 'util.stream)
(hash-table-put! %s->m% "dbm-db-move" 'dbm)
(hash-table-put! %s->m% "s64vector-add!" 'gauche.uvector)
(hash-table-put! %s->m% "sxml:string-value" 'sxml.sxpath)
(hash-table-put! %s->m% "string-ci=" 'srfi-13)
(hash-table-put! %s->m% "srfi-42-list" 'srfi-42)
(hash-table-put! %s->m% "stable-sort" 'gauche.sortutil)
(hash-table-put! %s->m% "integer-length" 'srfi-60)
(hash-table-put! %s->m% "string-every" 'srfi-13)
(hash-table-put! %s->m% "all-tmodules" 'gauche.cgen.tmodule)
(hash-table-put! %s->m% "slib:in-catalog?" 'slib)
(hash-table-put! %s->m% "find-gauche-package-description" 'gauche.package)
(hash-table-put! %s->m% "socket-recv" 'gauche.net)
(hash-table-put! %s->m% "time-utc->time-tai" 'srfi-19)
(hash-table-put! %s->m% "trie-common-prefix-keys" 'util.trie)
(hash-table-put! %s->m% "time-second" 'srfi-19)
(hash-table-put! %s->m% "<json-parse-error>" 'rfc.json)
(hash-table-put! %s->m% "ipv4-global-address?" 'rfc.ip)
(hash-table-put! %s->m% "sys-setsid" 'gauche.auxsys)
(hash-table-put! %s->m% "uncode" 'compat.stk)
(hash-table-put! %s->m% "catalog:resolve" 'slib)
(hash-table-put! %s->m% "ICMP6_UNREACH_ADMIN" 'rfc.icmp)
(hash-table-put! %s->m% "<listener>" 'gauche.listener)
(hash-table-put! %s->m% "relation-delete!" 'util.relation)
(hash-table-put! %s->m% "sxml:add-aux!" 'sxml.tools)
(hash-table-put! %s->m% "group-sequence" 'gauche.sequence)
(hash-table-put! %s->m% "take-after" 'sxml.sxpath)
(hash-table-put! %s->m% "substring/shared" 'srfi-13)
(hash-table-put! %s->m% "rbtree-values" 'util.rbtree)
(hash-table-put! %s->m% "s64vector-copy!" 'gauche.uvector)
(hash-table-put! %s->m% "get-s64" 'binary.io)
(hash-table-put! %s->m% "f16vector-mul" 'gauche.uvector)
(hash-table-put! %s->m% "html:select" 'text.html-lite)
(hash-table-put! %s->m% "IP_MULTICAST_TTL" 'gauche.net)
(hash-table-put! %s->m% "vector->s8vector" 'gauche.uvector)
(hash-table-put! %s->m% "grxmatch" 'gauche.generator)
(hash-table-put! %s->m% "PARENB" 'gauche.termios)
(hash-table-put! %s->m% "string->words" 'text.unicode)
(hash-table-put! %s->m% "socket-status" 'gauche.net)
(hash-table-put! %s->m% "zstream-data-type" 'rfc.zlib)
(hash-table-put! %s->m% "julian-day->time-monotonic" 'srfi-19)
(hash-table-put! %s->m% "nodeset?" 'sxml.sxpath)
(hash-table-put! %s->m% "ICMP4_PARAM_PTR" 'rfc.icmp)
(hash-table-put! %s->m% "stream-caadr" 'util.stream)
(hash-table-put! %s->m% "TCP_MAXSEG" 'gauche.net)
(hash-table-put! %s->m% "Z_TEXT" 'rfc.zlib)
(hash-table-put! %s->m% "relation-column-setter" 'util.relation)
(hash-table-put! %s->m% "build-transliterator" 'text.tr)
(hash-table-put! %s->m% "sxml:ns-id->uri" 'sxml.tools)
(hash-table-put! %s->m% "array->vector" 'gauche.array)
(hash-table-put! %s->m% "topological-sort" 'util.toposort)
(hash-table-put! %s->m% "pack" 'binary.pack)
(hash-table-put! %s->m% "u32vector-clamp!" 'gauche.uvector)
(hash-table-put! %s->m% "alist->tree-map" 'gauche.treeutil)
(hash-table-put! %s->m% "srl:sxml->xml" 'sxml.serializer)
(hash-table-put! %s->m% "first-ec" 'srfi-42)
(hash-table-put! %s->m% "vector-fold-right" 'srfi-43)
(hash-table-put! %s->m% "adler32" 'rfc.zlib)
(hash-table-put! %s->m% "remove-from-queue!" 'util.queue)
(hash-table-put! %s->m% "find-tail" 'srfi-1)
(hash-table-put! %s->m% "<dbi-unsupported-error>" 'dbi)
(hash-table-put! %s->m% "ICMP4_NET_ANO" 'rfc.icmp)
(hash-table-put! %s->m% "job" 'control.job)
(hash-table-put! %s->m% "cgen-unit-init-name" 'gauche.cgen.unit)
(hash-table-put! %s->m% "html:thead" 'text.html-lite)
(hash-table-put! %s->m% "sxml:shallow-minimized?" 'sxml.tools)
(hash-table-put! %s->m% "generator-fold" 'gauche.procedure)
(hash-table-put! %s->m% "pseudo-rtd" 'gauche.record)
(hash-table-put! %s->m% "make-f32vector" 'gauche.uvector)
(hash-table-put! %s->m% "array-set!" 'gauche.array)
(hash-table-put! %s->m% "TCION" 'gauche.termios)
(hash-table-put! %s->m% "ftype:int8" 'binary.ftype)
(hash-table-put! %s->m% "sys-stat->ino" 'gauche.fileutil)
(hash-table-put! %s->m% "ssax:read-markup-token" 'sxml.ssax)
(hash-table-put! %s->m% "list->bytes" 'slib)
(hash-table-put! %s->m% "file->byte-generator" 'gauche.generator)
(hash-table-put! %s->m% "sparse-vector-exists?" 'util.sparse)
(hash-table-put! %s->m% "<queue>" 'util.queue)
(hash-table-put! %s->m% "stream-length>=" 'util.stream)
(hash-table-put! %s->m% "http-default-auth-handler" 'rfc.http)
(hash-table-put! %s->m% "make-stream" 'util.stream)
(hash-table-put! %s->m% "ICMP4_INFO_REQUEST" 'rfc.icmp)
(hash-table-put! %s->m% "html:link" 'text.html-lite)
(hash-table-put! %s->m% "info-get-node" 'text.info)
(hash-table-put! %s->m% "u16vector-xor!" 'gauche.uvector)
(hash-table-put! %s->m% "IFF_AUTOMEDIA" 'gauche.net)
(hash-table-put! %s->m% "md5-digest-string" 'rfc.md5)
(hash-table-put! %s->m% "u16vector->list" 'gauche.uvector)
(hash-table-put! %s->m% "prim-test" 'gauche.test)
(hash-table-put! %s->m% "close-port" 'compat.stk)
(hash-table-put! %s->m% "IXOFF" 'gauche.termios)
(hash-table-put! %s->m% "LOG_NOWAIT" 'gauche.syslog)
(hash-table-put! %s->m% "thread-start!" 'gauche.threads)
(hash-table-put! %s->m% "ftp-rmdir" 'rfc.ftp)
(hash-table-put! %s->m% "find-max" 'gauche.collection)
(hash-table-put! %s->m% "MSG_DONTROUTE" 'gauche.net)
(hash-table-put! %s->m% "ssax:uri-string->symbol" 'sxml.ssax)
(hash-table-put! %s->m% "get-f64le" 'binary.io)
(hash-table-put! %s->m% "any?-ec" 'srfi-42)
(hash-table-put! %s->m% "char-set-union" 'srfi-14)
(hash-table-put! %s->m% "bytes-length" 'slib)
(hash-table-put! %s->m% "&i/o-error" 'gauche.condutil)
(hash-table-put! %s->m% "posix-rmdir" 'compat.stk)
(hash-table-put! %s->m% "stream-cddaar" 'util.stream)
(hash-table-put! %s->m% "process-output->string-list" 'gauche.process)
(hash-table-put! %s->m% "export-all-symbols" 'compat.stk)
(hash-table-put! %s->m% "dbm-map" 'dbm)
(hash-table-put! %s->m% "write-to-file-with-serializer" 'gauche.serializer)
(hash-table-put! %s->m% "u32vector-add" 'gauche.uvector)
(hash-table-put! %s->m% "sxml:boolean" 'sxml.sxpath)
(hash-table-put! %s->m% "rbtree-exists?" 'util.rbtree)
(hash-table-put! %s->m% "with-input-conversion" 'gauche.charconv)
(hash-table-put! %s->m% "logior" 'srfi-60)
(hash-table-put! %s->m% "lset-intersection!" 'srfi-1)
(hash-table-put! %s->m% "sort-by!" 'gauche.sortutil)
(hash-table-put! %s->m% "current-tmodule-class" 'gauche.cgen.tmodule)
(hash-table-put! %s->m% "take!" 'srfi-1)
(hash-table-put! %s->m% "<f32vector-meta>" 'gauche.uvector)
(hash-table-put! %s->m% "thread-pool-shut-down?" 'control.thread-pool)
(hash-table-put! %s->m% "output-file-port?" 'compat.stk)
(hash-table-put! %s->m% "process-input" 'gauche.process)
(hash-table-put! %s->m% "node-eq?" 'sxml.sxpath)
(hash-table-put! %s->m% "map-in-order" 'srfi-1)
(hash-table-put! %s->m% "s64vector-ref" 'gauche.uvector)
(hash-table-put! %s->m% "s64vector-mul!" 'gauche.uvector)
(hash-table-put! %s->m% "slib:exit" 'slib)
(hash-table-put! %s->m% "IP_RECVERR" 'gauche.net)
(hash-table-put! %s->m% "gtake" 'gauche.generator)
(hash-table-put! %s->m% "CS8" 'gauche.termios)
(hash-table-put! %s->m% "list->s8vector" 'gauche.uvector)
(hash-table-put! %s->m% "logtest" 'srfi-60)
(hash-table-put! %s->m% "180/pi" 'math.const)
(hash-table-put! %s->m% "SO_TYPE" 'gauche.net)
(hash-table-put! %s->m% "stream-cadr" 'util.stream)
(hash-table-put! %s->m% "read-binary-uint64" 'binary.io)
(hash-table-put! %s->m% "s32vector-clamp!" 'gauche.uvector)
(hash-table-put! %s->m% "<hook>" 'gauche.hook)
(hash-table-put! %s->m% "append-reverse" 'srfi-1)
(hash-table-put! %s->m% "uri-encode" 'rfc.uri)
(hash-table-put! %s->m% "write-ber-integer" 'binary.io)
(hash-table-put! %s->m% "$c" 'parser.peg)
(hash-table-put! %s->m% "write-uint" 'binary.io)
(hash-table-put! %s->m% "<lock-file-failure>" 'file.util)
(hash-table-put! %s->m% "regexp-unparse" 'gauche.regexp)
(hash-table-put! %s->m% "ssax:make-pi-parser" 'sxml.ssax)
(hash-table-put! %s->m% "html:h6" 'text.html-lite)
(hash-table-put! %s->m% "string-filter" 'srfi-13)
(hash-table-put! %s->m% "vector-ec" 'srfi-42)
(hash-table-put! %s->m% "generator-map" 'gauche.procedure)
(hash-table-put! %s->m% "array-rank" 'gauche.array)
(hash-table-put! %s->m% "mime-make-boundary" 'rfc.mime)
(hash-table-put! %s->m% "f16vector->vector" 'gauche.uvector)
(hash-table-put! %s->m% "parameterize" 'gauche.parameter)
(hash-table-put! %s->m% "sys-stat->nlink" 'gauche.fileutil)
(hash-table-put! %s->m% "load-bundle!" 'srfi-29.bundle)
(hash-table-put! %s->m% "ltake-while" 'gauche.lazy)
(hash-table-put! %s->m% "char-set:whitespace" 'srfi-14)
(hash-table-put! %s->m% "make-sparse-vector" 'util.sparse)
(hash-table-put! %s->m% "file->generator" 'gauche.generator)
(hash-table-put! %s->m% "$fold-parsers" 'parser.peg)
(hash-table-put! %s->m% "rassq-ref" 'util.list)
(hash-table-put! %s->m% "file-atime>?" 'file.util)
(hash-table-put! %s->m% "string-reverse" 'srfi-13)
(hash-table-put! %s->m% "u16vector-ior" 'gauche.uvector)
(hash-table-put! %s->m% "sys-setenv" 'gauche.auxsys)
(hash-table-put! %s->m% "IFF_SLAVE" 'gauche.net)
(hash-table-put! %s->m% "u16vector-set!" 'gauche.uvector)
(hash-table-put! %s->m% "inet-checksum" 'gauche.net)
(hash-table-put! %s->m% "make-condition" 'gauche.condutil)
(hash-table-put! %s->m% "array-div-elements" 'gauche.array)
(hash-table-put! %s->m% "date-week-number" 'srfi-19)
(hash-table-put! %s->m% "IGNCR" 'gauche.termios)
(hash-table-put! %s->m% "booleans->integer" 'srfi-60)
(hash-table-put! %s->m% "posix-uname" 'compat.stk)
(hash-table-put! %s->m% "stream-ninth" 'util.stream)
(hash-table-put! %s->m% "file-nlink" 'file.util)
(hash-table-put! %s->m% "cise-translate" 'gauche.cgen.cise)
(hash-table-put! %s->m% "direction-of" 'gauche.serializer)
(hash-table-put! %s->m% "ftp-quit" 'rfc.ftp)
(hash-table-put! %s->m% "f64vector-swap-bytes" 'gauche.uvector)
(hash-table-put! %s->m% "string-prefix-length-ci" 'srfi-13)
(hash-table-put! %s->m% "get-f64be" 'binary.io)
(hash-table-put! %s->m% "cgen-box-expr" 'gauche.cgen.type)
(hash-table-put! %s->m% "cgi-add-temporary-file" 'www.cgi)
(hash-table-put! %s->m% "make-csv-writer" 'text.csv)
(hash-table-put! %s->m% "force-output" 'slib)
(hash-table-put! %s->m% "sockaddr-addr" 'gauche.net)
(hash-table-put! %s->m% "string->date" 'srfi-19)
(hash-table-put! %s->m% "stream-delete" 'util.stream)
(hash-table-put! %s->m% "option-required-arg?" 'srfi-37)
(hash-table-put! %s->m% "time>=?" 'srfi-19)
(hash-table-put! %s->m% "<real-time-counter>" 'gauche.time)
(hash-table-put! %s->m% "drop*" 'util.list)
(hash-table-put! %s->m% "http-string-receiver" 'rfc.http)
(hash-table-put! %s->m% "ICMP6_PARAM_OPTION" 'rfc.icmp)
(hash-table-put! %s->m% "simplify-path" 'file.util)
(hash-table-put! %s->m% "u16vector-add!" 'gauche.uvector)
(hash-table-put! %s->m% "sxml:sxml->xml" 'sxml.tools)
(hash-table-put! %s->m% ".$" 'gauche.procedure)
(hash-table-put! %s->m% "random-real" 'srfi-27)
(hash-table-put! %s->m% "cerr" 'sxml.adaptor)
(hash-table-put! %s->m% "if-car-sxpath" 'sxml.sxpath)
(hash-table-put! %s->m% "string-trim-both" 'srfi-13)
(hash-table-put! %s->m% "rbtree?" 'util.rbtree)
(hash-table-put! %s->m% "<sha384>" 'rfc.sha)
(hash-table-put! %s->m% "ash" 'srfi-60)
(hash-table-put! %s->m% "gettext" 'text.gettext)
(hash-table-put! %s->m% "socket-setsockopt" 'gauche.net)
(hash-table-put! %s->m% "Z_HUFFMAN_ONLY" 'rfc.zlib)
(hash-table-put! %s->m% "codepoints-foldcase" 'text.unicode)
(hash-table-put! %s->m% "time-monotonic->time-tai" 'srfi-19)
(hash-table-put! %s->m% "debug-print" 'gauche.vm.debugger)
(hash-table-put! %s->m% "icmp6-message-type->string" 'rfc.icmp)
(hash-table-put! %s->m% "sxml:change-name!" 'sxml.tools)
(hash-table-put! %s->m% "referencer" 'gauche.sequence)
(hash-table-put! %s->m% "NI_NAMEREQD" 'gauche.net)
(hash-table-put! %s->m% "make-s64vector" 'gauche.uvector)
(hash-table-put! %s->m% "u32vector-mul" 'gauche.uvector)
(hash-table-put! %s->m% "IP_TOS" 'gauche.net)
(hash-table-put! %s->m% "atomic-update!" 'gauche.threads)
(hash-table-put! %s->m% "s8vector-copy" 'gauche.uvector)
(hash-table-put! %s->m% "CS5" 'gauche.termios)
(hash-table-put! %s->m% "vector-any" 'srfi-43)
(hash-table-put! %s->m% "AF_UNIX" 'gauche.net)
(hash-table-put! %s->m% "bit-field" 'srfi-60)
(hash-table-put! %s->m% "<zlib-memory-error>" 'rfc.zlib)
(hash-table-put! %s->m% "every" 'srfi-1)
(hash-table-put! %s->m% "SO_SNDLOWAT" 'gauche.net)
(hash-table-put! %s->m% "B57600" 'gauche.termios)
(hash-table-put! %s->m% "ICMP4_REDIR_NETTOS" 'rfc.icmp)
(hash-table-put! %s->m% "job-start-time" 'control.job)
(hash-table-put! %s->m% "iterator->stream" 'util.stream)
(hash-table-put! %s->m% "sxml:aux-list" 'sxml.tools)
(hash-table-put! %s->m% "shape-for-each" 'gauche.array)
(hash-table-put! %s->m% "rtd-constructor" 'gauche.record)
(hash-table-put! %s->m% "string-tr" 'text.tr)
(hash-table-put! %s->m% "record-predicate" 'util.record)
(hash-table-put! %s->m% "u16vector-clamp!" 'gauche.uvector)
(hash-table-put! %s->m% "slib:report" 'slib)
(hash-table-put! %s->m% "ftp-list" 'rfc.ftp)
(hash-table-put! %s->m% "define-cgen-literal" 'gauche.cgen.literal)
(hash-table-put! %s->m% "sparse-vector-fold" 'util.sparse)
(hash-table-put! %s->m% "queue-push!" 'util.queue)
(hash-table-put! %s->m% "instance-pool-of" 'gauche.mop.instance-pool)
(hash-table-put! %s->m% "mutex-locker" 'gauche.threads)
(hash-table-put! %s->m% "LOG_NEWS" 'gauche.syslog)
(hash-table-put! %s->m% "ICMP4_NET_UNREACH" 'rfc.icmp)
(hash-table-put! %s->m% "O_WRONLY" 'gauche.fcntl)
(hash-table-put! %s->m% "string->char-set" 'srfi-14)
(hash-table-put! %s->m% "sxml:attr-list-node" 'sxml.tools)
(hash-table-put! %s->m% "array?" 'gauche.array)
(hash-table-put! %s->m% "put-s16le!" 'binary.io)
(hash-table-put! %s->m% "f16vector->list" 'gauche.uvector)
(hash-table-put! %s->m% "feature-eval" 'slib)
(hash-table-put! %s->m% "dbi-make-connection" 'dbi)
(hash-table-put! %s->m% "system" 'compat.stk)
(hash-table-put! %s->m% "sys-stat->gid" 'gauche.fileutil)
(hash-table-put! %s->m% "lcs-with-positions" 'util.lcs)
(hash-table-put! %s->m% "modf" 'gauche.auxsys)
(hash-table-put! %s->m% "reverse-vector->generator" 'gauche.generator)
(hash-table-put! %s->m% "<sparse-f32vector>" 'util.sparse)
(hash-table-put! %s->m% "assq-ref" 'util.list)
(hash-table-put! %s->m% "read-u16" 'binary.io)
(hash-table-put! %s->m% "http-string-sender" 'rfc.http)
(hash-table-put! %s->m% "remove-directory*" 'file.util)
(hash-table-put! %s->m% "make-mutex" 'gauche.threads)
(hash-table-put! %s->m% "mt-random-set-state!" 'math.mt-random)
(hash-table-put! %s->m% "VMIN" 'gauche.termios)
(hash-table-put! %s->m% "ICMP4_SOURCE_QUENCH" 'rfc.icmp)
(hash-table-put! %s->m% "F_SETFD" 'gauche.fcntl)
(hash-table-put! %s->m% "s8vector" 'gauche.uvector)
(hash-table-put! %s->m% "s16vector-xor!" 'gauche.uvector)
(hash-table-put! %s->m% "IFF_NOTRAILERS" 'gauche.net)
(hash-table-put! %s->m% "u16vector" 'gauche.uvector)
(hash-table-put! %s->m% "test-module" 'gauche.test)
(hash-table-put! %s->m% "char-code-limit" 'slib)
(hash-table-put! %s->m% "srfi-42--dispatch-set!" 'srfi-42)
(hash-table-put! %s->m% "error" 'compat.stk)
(hash-table-put! %s->m% "sparse-table-copy" 'util.sparse)
(hash-table-put! %s->m% "ssax:reverse-collect-str" 'sxml.ssax)
(hash-table-put! %s->m% "stream-fifth" 'util.stream)
(hash-table-put! %s->m% "call-with-builder" 'util.trie)
(hash-table-put! %s->m% "f16vector-swap-bytes!" 'gauche.uvector)
(hash-table-put! %s->m% "profiler-show" 'gauche.vm.profiler)
(hash-table-put! %s->m% "trie->list" 'util.trie)
(hash-table-put! %s->m% "dispatch-union" 'srfi-42)
(hash-table-put! %s->m% "stream-null" 'util.stream)
(hash-table-put! %s->m% "array-expt" 'gauche.array)
(hash-table-put! %s->m% "posix-pipe" 'compat.stk)
(hash-table-put! %s->m% "output-virtual-port?" 'compat.stk)
(hash-table-put! %s->m% "process-list" 'gauche.process)
(hash-table-put! %s->m% "s16vector-add" 'gauche.uvector)
(hash-table-put! %s->m% "map$" 'gauche.collection)
(hash-table-put! %s->m% "ces-guess-from-string" 'gauche.charconv)
(hash-table-put! %s->m% "span!" 'srfi-1)
(hash-table-put! %s->m% "make-f64array" 'gauche.array)
(hash-table-put! %s->m% "macro" 'compat.stk)
(hash-table-put! %s->m% "split-at!" 'srfi-1)
(hash-table-put! %s->m% "remove-file" 'compat.stk)
(hash-table-put! %s->m% "stream-cddar" 'util.stream)
(hash-table-put! %s->m% "string-find" 'compat.stk)
(hash-table-put! %s->m% "read-binary-float" 'binary.io)
(hash-table-put! %s->m% "AI_ADDRCONFIG" 'gauche.net)
(hash-table-put! %s->m% "reduce" 'srfi-1)
(hash-table-put! %s->m% "u16vector-mul!" 'gauche.uvector)
(hash-table-put! %s->m% "u32vector->vector" 'gauche.uvector)
(hash-table-put! %s->m% "d" 'gauche.interactive)
(hash-table-put! %s->m% "atom?" 'gauche.threads)
(hash-table-put! %s->m% "CLOCAL" 'gauche.termios)
(hash-table-put! %s->m% "lower" 'parser.peg)
(hash-table-put! %s->m% "char-set-count" 'srfi-14)
