
(defmacro echo-war string
  `(begin
     (echohl 'WarningMsg)
     (echomsg (s+ ,@string))
     (echohl 'None)))

(defmacro echo-err string
  `(begin
     (echohl 'Error)
     (echomsg (s+ ,@string))
     (echohl 'None)))

(defmacro zero? (num)
  `(== 0 ,num))

(defmacro inc!
  (match
    [(_ sym) `(+= ,sym 1)]
    [(_ sym delta) `(+= ,sym ,delta)]))

(defmacro dec!
  (match
    [(_ sym) `(-= ,sym 1)]
    [(_ sym delta) `(-= ,sym ,delta)]))

(defmacro s+ str-list
  `(string-append ,@str-list))

(defmacro ref-set! (sym . arg)
  (when (< (length arg) 2)
    (vise-error "Bad ref-set! syntax. (ref-set! sym refer ... vall)\n~a" `(ref-set! ,sym ,@arg)))
  `(set! (ref ,sym ,@(drop-right arg 1)) ,(last arg)))

(defmacro (get-rest sym def)
  `(get ,sym 0 ,def))

(defmacro pa$n (n proc . args)
  (let1 arg (map (lambda (n) (gensym "pa_")) (iota n))
    `(lambda ,arg (,proc ,@args ,@arg))))

(defmacro pa$0 (proc . args)
  `(pa$n 0 ,proc ,@args))

(defmacro pa$1 (proc . args)
  `(pa$n 1 ,proc ,@args))

(defmacro pa$2 (proc . args)
  `(pa$n 2 ,proc ,@args))

(defmacro pa$3 (proc . args)
  `(pa$n 3 ,proc ,@args))

(defmacro pa$4 (proc . args)
  `(pa$n 4 ,proc ,@args))

(defmacro pa$5 (proc . args)
  `(pa$n 5 ,proc ,@args))

(defmacro pa$6 (proc . args)
  `(pa$n 6 ,proc ,@args))

(defmacro .$ proc-list
  (let1 arg (gensym "arg_")
    `(lambda (,arg)
       ,(fold-right
          (lambda (p acc) (list p acc))
          arg
          proc-list))))

(defmacro expand-wrapper (expr conv)
  `(expand ,(fold
              (lambda (c acc)
                (string-append 
                  acc
                  (case c
                    [(:p :path :fullpath) ":p"]
                    [(:h :head :directory) ":h"]
                    [(:t :tail :file) ":t"]
                    [(:r :remove-ext) ":r"]
                    [(:e :only-ext) ":e"]
                    [else c])))
              expr
              conv)))

(defmacro cur-file conv
  `(expand-wrapper "%" ,conv))

(defmacro under-cursor-file conv
  `(expand-wrapper "<cfile>" ,conv))

(defmacro cur-source-file conv
  `(expand-wrapper "<sfile>" ,conv))

(defmacro cur-source-line conv
  `(expand-wrapper "<slnum>" ,conv))

(defmacro under-cursor-word conv
  `(expand-wrapper "<cword>" ,conv))

(defmacro under-cursor-WORD conv
  `(expand-wrapper "<cWORD>" ,conv))

(defmacro switch-to-buffer (bufnum . body);{{{
  (let ([mark-sym (x->string (gensym "switch"))])
    `(let1 bufnum (bufnr "%")
       (when (!= bufnum ,bufnum)
         (defvar l:changebuf 1)
         (ieie#mark-back-to-window ,mark-sym)
         (ieie#move-to-buffer ,bufnum))
       ,@body
       (when (!= bufnum ,bufnum)
         (ieie#back-to-marked-window ,mark-sym)))));}}}
